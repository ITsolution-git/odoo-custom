-
    Create some default value for some (non-existing) model, for all users.
-
    !python {model: ir.values }: |
        self.set(cr, uid, 'default', False, 'my_test_field',['unexisting_model'], 'global value')
-
    Retrieve it.
-
    !python {model: ir.values }: |
        # d is a list of triple (id, name, value)
        d = self.get(cr, uid, 'default', False, ['unexisting_model'])
        assert d[0][1] == 'my_test_field', "Can't retrieve the created default value."
        assert d[0][2] == 'global value', "Can't retrieve the created default value."
-
    Do it again but for a specific user.
-
    !python {model: ir.values }: |
        self.set(cr, uid, 'default', False, 'my_test_field',['unexisting_model'], 'specific value', preserve_user=True)
-
    Retrieve it and check it is the one for the current user.
-
    !python {model: ir.values }: |
        d = self.get(cr, uid, 'default', False, ['unexisting_model'])
        assert len(d) == 1, "Only one default must be returned per field"
        assert d[0][1] == 'my_test_field', "Can't retrieve the created default value."
        assert d[0][2] == 'specific value', "Can't retrieve the created default value."
-
    Create some action bindings for a non-existing model
-
    !python {model: ir.values }: |
        self.set(cr, uid, 'action', 'tree_but_open', 'OnDblClick Action', ['unexisting_model'], 'ir.actions.act_window,10', isobject=True)
        self.set(cr, uid, 'action', 'tree_but_open', 'OnDblClick Action 2', ['unexisting_model'], 'ir.actions.act_window,11', isobject=True)
        self.set(cr, uid, 'action', 'client_action_multi', 'Side Wizard', ['unexisting_model'], 'ir.actions.act_window,12', isobject=True)
        self.set(cr, uid, 'action', 'client_print_multi', 'Nice Report', ['unexisting_model'], 'ir.actions.report.xml,2', isobject=True)
        self.set(cr, uid, 'action', 'client_action_relate', 'Related Stuff', ['unexisting_model'], 'ir.actions.act_window,14', isobject=True)
-
    Replace one action binding to set a new name
-
    !python {model: ir.values }: |
        self.set(cr, uid, 'action', 'tree_but_open', 'OnDblClick Action New', ['unexisting_model'], 'ir.actions.act_window,10', isobject=True)
-
    Retrieve the action bindings and check they're correct
-
    !python {model: ir.values }: |
        actions = self.get(cr, uid, 'action', 'tree_but_open', ['unexisting_model'])
        assert len(actions) == 2, "Mismatching number of bound actions"
        #first action
        assert len(actions[0]) == 3, "Malformed action definition"
        assert actions[0][1] == 'OnDblClick Action 2', 'Bound action does not match definition'
        assert isinstance(actions[0][2], dict) and actions[0][2]['id'] == 11, 'Bound action does not match definition'
        #second action - this ones comes last because it was re-created with a different name
        assert len(actions[1]) == 3, "Malformed action definition"
        assert actions[1][1] == 'OnDblClick Action New', 'Re-Registering an action should replace it'
        assert isinstance(actions[1][2], dict) and actions[1][2]['id'] == 10, 'Bound action does not match definition'

        actions = self.get(cr, uid, 'action', 'client_action_multi', ['unexisting_model'])
        assert len(actions) == 1, "Mismatching number of bound actions"
        assert len(actions[0]) == 3, "Malformed action definition"
        assert actions[0][1] == 'Side Wizard', 'Bound action does not match definition'
        assert isinstance(actions[0][2], dict) and actions[0][2]['id'] == 12, 'Bound action does not match definition'

        actions = self.get(cr, uid, 'action', 'client_print_multi', ['unexisting_model'])
        assert len(actions) == 1, "Mismatching number of bound actions"
        assert len(actions[0]) == 3, "Malformed action definition"
        assert actions[0][1] == 'Nice Report', 'Bound action does not match definition'
        assert isinstance(actions[0][2], dict) and actions[0][2]['id'] == 2, 'Bound action does not match definition'

        actions = self.get(cr, uid, 'action', 'client_action_relate', ['unexisting_model'])
        assert len(actions) == 1, "Mismatching number of bound actions"
        assert len(actions[0]) == 3, "Malformed action definition"
        assert actions[0][1] == 'Related Stuff', 'Bound action does not match definition'
        assert isinstance(actions[0][2], dict) and actions[0][2]['id'] == 14, 'Bound action does not match definition'
