-
  In order to test the purchase requisition module, I have to add a boolean field in product, 
  If I checked it then it's requisition create.
-
  I start by Checking the product, Product must have requisition field checked.
  and Product supply method is buy and the procure method is make to order.
-
  !record {model: product.product, id: product.product_product_hdd3}:
    supply_method: 'buy'
    purchase_requisition: True
-
  I create the procurement order for the product and after run the procurement create purchase requisition.
-
  !python {model: product.product}: |
    import time
    import netsvc
    mk_proc = self.pool.get('make.procurement')
    proc_order = self.pool.get('procurement.order')
    pur_req = self.pool.get('purchase.requisition')
    context = {'active_model': 'product.product','active_ids': [ref('product.product_product_hdd3')],'active_id': ref('product.product_product_hdd3')}
    default_data = mk_proc.default_get(cr, uid, ['uom_id', 'warehouse_id', 'date_planned', 'product_id', 'qty'], context)
    vals = {'uom_id': ref('product.product_uom_unit'),'warehouse_id': ref('stock.stock_warehouse_shop0'),'qty': default_data.get('qty'),'date_planned': default_data.get('date_planned')}
    ids = mk_proc.create(cr, uid, vals, context)
    req_id = mk_proc.make_procurement(cr, uid, [ids], context)
    order = proc_order.browse(cr, uid, [req_id.get('res_id')])
    assert order[0].state == "confirmed", "Procurement Order should be in Confirmed state"
    assert order[0].product_id.id == ref('product.product_product_hdd3'),"Product is not correspond in procurement order"
    assert order[0].product_qty == default_data.get('qty'),"Product's quantity is not correspond in procurement order"
    assert order[0].product_uom.id == ref('product.product_uom_unit'),"Product's UOM is not correspond in procurement order"
    wf_service = netsvc.LocalService("workflow")
    for proc in order:
      wf_service.trg_validate(uid, 'procurement.order',proc.id,'button_check', cr)
    proc_ids = proc_order.search(cr, uid, [('id','=',req_id.get('res_id')),('state','in',['running'])])
    proc_id = proc_order.browse(cr, uid, proc_ids)
    assert proc_id[0].state == 'running',"Product's UOM is not correspond in procurement order"
    if proc_id[0].requisition_id:
      pur_req_rec = pur_req.browse(cr, uid, [proc_id[0].requisition_id.id])
      assert pur_req_rec[0].state == 'draft',"Product's UOM is not correspond in procurement order"
      for record in pur_req_rec[0].line_ids:
        assert record.product_id.id == ref('product.product_product_hdd3'),"Product's UOM is not correspond in procurement order"
        assert record.product_qty == default_data.get('qty'),"Product's UOM is not correspond in procurement order"
        assert record.product_uom_id.id == ref('product.product_uom_unit'),"Product's UOM is not correspond in procurement order"
