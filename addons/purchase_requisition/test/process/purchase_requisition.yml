-
  In order to test the purchase requisition module, I have to add a boolean field in product, 
  If I checked it then it's requisition create.
-
  I start by Checking the product, Product must have requisition field checked.
  and Product supply method is buy and the procure method is make to order.
-
  !record {model: product.product, id: product.product_product_hdd3}:
    supply_method: 'buy'
    purchase_requisition: True
-
  I create the procurement order for the product.
-
  !python {model: product.product}: |
    import time
    procurement = self.pool.get('make.procurement')
    product = self.browse(cr, uid,[ref('product.product_product_hdd3')])
    context = {'active_model': 'product.product','active_ids': [product[0].id],'active_id': product[0].id}
    default_data = procurement.default_get(cr, uid, ['uom_id', 'warehouse_id', 'date_planned', 'product_id', 'qty'], context)
    vals = {'uom_id': product[0].uom_id.id,'warehouse_id': ref('stock.stock_warehouse_shop0'),'qty': default_data.get('qty'),'date_planned': default_data.get('date_planned')}
    ids = procurement.create(cr, uid, vals, context)
    req_id = procurement.make_procurement(cr, uid, [ids], context)
    proc_order = self.pool.get('procurement.order')
    order = proc_order.browse(cr, uid, [req_id.get('res_id')])
    assert order[0].state == "confirmed", "Procurement Order should be in Confirmed state"
    assert order[0].product_id == product[0],"Product is not correspond in procurement order"
    assert order[0].product_qty == default_data.get('qty'),"Product's quantity is not correspond in procurement order"
    assert order[0].product_uom == product[0].uom_id,"Product's UOM is not correspond in procurement order"

    
-
  I create the procurement order from the selected purchase order.
-
  !python {model: purchase.order}: |
    req_id = self.pool.get('procurement.order').action_po_assign(cr, uid, [ref('purchase.order_purchase6')], context)
    self.wkf_confirm_order(cr, uid, [req_id], context)
-
  I create the purchase requisition for the selected product.
-
  !python {model: purchase.requisition}: |   
    self.browse(cr, uid, [context.get('requisition_id')], context)
      
