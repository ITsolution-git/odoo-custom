-
  In order to test find nearest Partner functionality and assign to opportunity ,
-
  I Set Geo Lattitude and Longitude according to partner address.
-
  !python {model: res.partner}: |
    self.geo_localize(cr, uid, [ref('base.res_partner_ericdubois0')], context)
-
 I check Geo Lattitude and Longitude of partner after set
-
  !python {model: res.partner}: |
    partner = self.browse(cr, uid, ref('base.res_partner_ericdubois0'))
    assert partner.partner_latitude == 50.4530495 , "Lattitude is wrong"
    assert partner.partner_longitude == 3.9693885 , "Longitude is wrong"
-
  I assign nearest partner to opportunity.
-
  !python {model: crm.lead}: |
    self.assign_partner(cr, uid, [ref('crm.crm_case_abcfuelcounits0')], context=context)
-
  I check assigned partner of opportunity who is nearest Geo Lattitude and Longitude of opportunity.
-
  !python {model: crm.lead}: |
    lead = self.browse(cr, uid, ref('crm.crm_case_abcfuelcounits0'))
    assert lead.partner_assigned_id.id == ref('base.res_partner_ericdubois0') , "Opportuniy is not assigned nearest partner"
    assert lead.partner_latitude == 50.8495239 , "Lattitude is wrong"
    assert lead.partner_longitude == 4.3667002 , "Longitude is wrong"
    
-
  I forward this opportunity to its nearest partner.
-
  !python {model: crm.lead.forward.to.partner}: |
    context.update({'active_model': 'crm.lead', 'active_id': ref('crm.crm_case_abcfuelcounits0'), 'active_ids': [ref('crm.crm_case_abcfuelcounits0')]})
    forward_id = self.create(cr, uid, {'send_to': 'partner'}, context=context)
    try:
      self.action_forward(cr, uid, [forward_id], context=context)
    except:
      pass
