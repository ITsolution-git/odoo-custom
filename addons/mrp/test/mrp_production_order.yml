-
  In order to test the manufacturing order working with procurements I will use
  some products with different supply method and procurement method, also check
  the bills of material for the products.
-
  I am creating one manufacturing order.
-
  !record {model: mrp.production, id: mrp_production_mo1}:
    company_id: base.main_company
    date_planned: !eval datetime.today().strftime("%Y-%m-%d %H:%M:%S")
    location_dest_id: stock.stock_location_stock
    location_src_id: stock.stock_location_stock
    product_id: product.product_product_pc1
    name: MO/0123
    product_qty: 5.0
    product_uom: product.product_uom_unit
    product_uos_qty: 0.0
-
  I compute the data.
-
  !python {model: mrp.production}: |
    self.action_compute(cr, uid, [ref("mrp_production_mo1")])
-
  I confirm the order.
-
  !workflow {model: mrp.production, action: button_confirm, ref: mrp_production_mo1}
-
  I create record for changing production quantity to 6.00
-
  !record {model: change.production.qty, id: mrp_production_qty}:
    product_qty: 6.0
-
  Changes the Quantity of Product.
-
  !python {model: change.production.qty}: |
    context = {"lang": 'en_US', "active_model":"mrp.production", "active_ids": [ref("mrp_production_mo1")], "tz": False, "active_id":ref('mrp_production_mo1')}
    self.default_get(cr, uid, ["product_qty"], context)
    self.change_prod_qty(cr, uid, [ref("mrp_production_qty")], context=context)
-
  I check now quantity of the production order is 6 or not.
-
  !assert {model: mrp.production, id: mrp_production_mo1}:
    - product_qty == 6
-
  I am checking Procurement orders for components of PC1.
-
  !python {model: procurement.order}: |
    from tools.translate import _
    production_obj = self.pool.get('mrp.production')
    production = production_obj.browse(cr, uid, ref('mrp_production_mo1'))
    product_ids = map(lambda x:x.product_id.id, production.move_lines)
    proc_ids = self.search(cr, uid, [('product_id','in',product_ids)])
    assert proc_ids, _('No Procurements!')
-
  The scheduler runs.
-
  !function {model: procurement.order, name: run_scheduler}:
    - model: procurement.order
      search: "[]"
-
  I am checking Internal picking.
-
  !python {model: stock.picking}: |
    from tools.translate import _
    pick_ids = self.search(cr, uid, [('type','=','internal')])
    assert pick_ids, _('No Internal Pickings!')
-
  I see that there is a manufacturing order for the sub product CPU_GEN with ready state and I start production of it.
-
  !python {model: mrp.production}: |
    from tools.translate import _
    order_ids = self.search(cr, uid, [('state','=','ready'), ('product_id', '=', ref('product.product_product_cpu_gen'))])
    assert order_ids, _('No manufacturing order in Ready state!')
    import netsvc
    wf_service = netsvc.LocalService("workflow")
    for order in order_ids:
        wf_service.trg_validate(uid, 'mrp.production', order, 'button_produce', cr)
-
  I create record for producing products with quantity 1.00.
-
  !record {model: mrp.product.produce, id: mrp_product_produce0}:
    product_qty: 1.00
    mode: 'consume_produce'
-
  I produce the product.
-
  !python {model: mrp.product.produce}: |
    prod_obj = self.pool.get('mrp.production')
    prod_ids = prod_obj.search(cr, uid, [('state','=','in_production'), ('product_id', '=', ref('product.product_product_cpu_gen'))])
    self.do_produce(cr, uid, [ref('mrp_product_produce0')], context={'active_ids': prod_ids})
-
  Now the manufacturing order for subproduct CPU_GEN is done and manufacturing
  order for PC1 is in ready state.
-
  !python {model: mrp.production}: |
    from tools.translate import _
    prod_ids = self.search(cr, uid, [('state','=','done'), ('product_id', '=', ref('product.product_product_cpu_gen'))])
    assert prod_ids, _('Manufacturing order for CPU_GEN is yet not done!')
-
  I start producing the product PC1.
-
  !workflow {model: mrp.production, action: button_produce, ref: mrp_production_mo1}
-
  I create record for producing products with quantity 6.00.
-
  !record {model: mrp.product.produce, id: mrp_product_produce1}:
    product_qty: 6.00
    mode: 'consume_produce'
-
  Finally my production order is done.
-
  !python {model: mrp.product.produce}: |
    context = {"lang": 'en_US', "active_model":"mrp.production", "active_ids": [ref("mrp_production_mo1")], "tz": False, "active_id":ref('mrp_production_mo1')}
    self.do_produce(cr, uid, [ref('mrp_product_produce1')], context=context)
-
  I check now the production order for PC1 is done.
-
  !assert {model: mrp.production, id: mrp_production_mo1}:
    - state == 'done'
