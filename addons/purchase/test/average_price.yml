-
  Set a product as using average price
-
  !record {model: product.product, id: product_average_icecream}:
    default_code: AVG
    name: Average Ice Cream
    type: product
    categ_id: product.product_category_1
    list_price: 100.0
    standard_price: 70.0
    uom_id: product.product_uom_kgm
    uom_po_id: product.product_uom_kgm
    procure_method: make_to_stock
    valuation: real_time
    cost_method: average
    property_stock_account_input: account.o_expense
    property_stock_account_output: account.o_income
    description: Average Ice Cream can be mass-produced and thus is widely available in developed parts of the world. Ice cream can be purchased in large cartons (vats and squrounds) from supermarkets and grocery stores, in smaller quantities from ice cream shops, convenience stores, and milk bars, and in individual servings from small carts or vans at public events.
- 
  I create a draft Purchase Order for first in move
- 
  !record {model: purchase.order, id: purchase_order_average1}:
    partner_id: base.res_partner_3
    location_id: stock.stock_location_stock
    pricelist_id: 1
    order_line:
      - product_id: product_average_icecream
        product_qty: 10.0
        product_uom: product.product_uom_categ_kgm
        price_unit: 60.0
        name: 'Average Ice Cream'
- 
  I create a draft Purchase Order for second shipment for 30 pieces at 80 euro
- 
  !record {model: purchase.order, id: purchase_order_average2}:
    partner_id: base.res_partner_3
    location_id: stock.stock_location_stock
    pricelist_id: 1
    order_line:
      - product_id: product_average_icecream
        product_qty: 30.0
        product_uom: product.product_uom_categ_kgm
        price_unit: 80.0
        name: 'Average Ice Cream'
- 
  I confirm the first purchase order
-
  !workflow {model: purchase.order, action: purchase_confirm, ref: purchase_order_average1}
- 
  I confirm the second purchase order
- 
  !workflow {model: purchase.order, action: purchase_confirm, ref: purchase_order_average2}
-
  I check the "Approved" status of purchase order 1
-
  !assert {model: purchase.order, id: purchase_order_average1}:
    - state == 'approved'
- 
  Process the reception of purchase order 1
-
  !python {model: stock.partial.picking}: |
    pick_ids = self.pool.get('purchase.order').browse(cr, uid, ref("purchase_order_average1")).picking_ids
    print pick_ids
    partial_id = self.create(cr, uid, {}, context={'active_model': 'stock.picking','active_ids': [pick_ids[0].id]})
    
    self.do_partial(cr, uid, [partial_id])
- 
  Check the standard price of the product (average icecream)
- 
  !python {model: product.product}: |
    print self.browse(cr, uid, ref("product_average_icecream")).qty_available
    assert self.browse(cr, uid, ref("product_average_icecream")).standard_price == 60.0, 'Standard price should not change while receiving products!'
- 
  Process the reception of purchase order 2
- 
  !python {model: stock.partial.picking}: |
    pick_ids = self.pool.get('purchase.order').browse(cr, uid, ref("purchase_order_average2")).picking_ids
    partial_id = self.create(cr, uid, {}, context={'active_model': 'stock.picking','active_ids': [pick_ids[0].id]})
    self.do_partial(cr, uid, [partial_id])
- 
  Check the standard price
- 
  !python {model: product.product}: |
    assert self.browse(cr, uid, ref("product_average_icecream")).standard_price == 75.0, 'Standard price should not change while receiving products!'
- 
  Let us send some goods
- 
  !record {model: stock.picking, id: outgoing_average_shipment}:
    type: out
- 
  Picking needs movement from stock
- 
  !record {model: stock.move, id: outgoing_shipment_average_icecream}:
    picking_id: outgoing_average_shipment
    product_id: product_average_icecream
    product_uom: product.product_uom_kgm
    product_qty: 20.0
    type: out
- 
  I confirm outgoing shipment of 20 kg of Average Ice Cream. 
- 
  !workflow {model: stock.picking, action: button_confirm, ref: outgoing_average_shipment}
- 
  Process the delivery of the outgoing shipment
- 
  !python {model: stock.partial.picking}: |
    partial_id = self.create(cr, uid, {}, context={'active_model': 'stock.picking','active_ids': [ref("outgoing_average_shipment")], 'default_type':'out'})
    self.do_partial(cr, uid, [partial_id])
- 
  Check the standard price (60 * 10 + 30 * 80) / 40 = 75.0 did not change
- 
  !python {model: product.product}: |
    assert self.browse(cr, uid, ref("product_average_icecream")).standard_price == 75.0, 'Standard price as average price of second reception incorrect!'
    assert self.browse(cr, uid, ref("product_average_icecream")).qty_available == 20.0, 'Pieces were not picked correctly'
- 
  Make a new purchase order with 500 g Average Ice Cream at a price of 100
- 
  !record {model: purchase.order, id: purchase_order_average3}:
    partner_id: base.res_partner_3
    location_id: stock.stock_location_stock
    pricelist_id: 1
    order_line:
      - product_id: product_average_icecream
        product_qty: 500.0
        product_uom: product.product_uom_gram
        price_unit: 1.0
        name: 'Average Ice Cream'
- 
  I confirm the first purchase order
-
  !workflow {model: purchase.order, action: purchase_confirm, ref: purchase_order_average3}
- 
  Process the reception of purchase order 3 in grams
- 
  !python {model: stock.partial.picking}: |
    pick_ids = self.pool.get('purchase.order').browse(cr, uid, ref("purchase_order_average3")).picking_ids
    partial_id = self.create(cr, uid, {}, context={'active_model': 'stock.picking','active_ids': [pick_ids[0].id]})
    self.do_partial(cr, uid, [partial_id])
- 
  Check price is (75.0*20 + 500) / 20.5 = 97.56097561 
- 
  !python {model: product.product}: |
    print self.browse(cr, uid, ref("product_average_icecream")).qty_available
    print self.browse(cr, uid, ref("product_average_icecream")).standard_price
    assert round(self.browse(cr, uid, ref("product_average_icecream")).standard_price, 2) == 97.56, 'Standard price as average price of third reception with other UoM incorrect!'