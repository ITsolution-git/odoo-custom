-
  In order to test to cancel purchase order from Different State,I start cancel the draft order.
-
  Initially purchase order is in the draft state.
-
  !assert {model: purchase.order, id: order_purchase5}:
    - state == 'draft'
-
  I want to cancel order form draft state.
-
  !python {model: purchase.order}: |
    self.action_cancel(cr, uid, [ref("order_purchase5")])
-
  I check that order is in the cancel state.
-
  !assert {model: purchase.order, id: order_purchase5}:
    - state == 'cancel'
-
  Now again set purchase order to draft state.
-
  !python {model: purchase.order}: |
    self.action_cancel_draft(cr, uid, [ref("order_purchase5")]) 
-
  Now I confirm the this order.
-
  !workflow {model: purchase.order, action: purchase_confirm, ref: order_purchase5}
-
  I check that order is in the confirm state.
-
  !assert {model: purchase.order, id: order_purchase5}:
    - state == 'approved'
-
  I want to cancel order form confirm state.
-
  !python {model: purchase.order}: |
    self.action_cancel(cr, uid, [ref("order_purchase5")])
-
  I have to first cancel reception of order .
-
  !python {model: stock.picking}: |
    search_ids=self.search(cr, uid, [('purchase_id', '=', ref("order_purchase5"))])
    self.action_cancel(cr, uid, search_ids)
-
  Now I am able to cancel purchase order because related picking was cancel.
-
  !python {model: purchase.order}: |
    self.action_cancel(cr, uid, [ref("order_purchase5")])
-
  I check that order is in the cancel state.
-
  !assert {model: purchase.order, id: order_purchase5}:
    - state == 'cancel'

