-
  In order to test the purchase flow, I compute the total of the listed products.
  "Basic PC" product price is 450.20 and ordered 2 'PCE'
  "New server config + material" product price is 150.50 and ordered 5 'PCE'
  So, Total should be [(450.20*2)+(150.50*5)] = 1652.90
-
  I check the amount of the RFQ is correctly computed
-
  !assert {model: purchase.order, id: order_purchase1, string: The amount of Test purchase is correctly computed}:
    - sum([l.price_subtotal for l in order_line]) == amount_untaxed
-
  I confirm the RFQ.
-
  !workflow {model: purchase.order, action: purchase_confirm, ref: order_purchase1}
-
  I check the created Purchase order.
-
  !assert {model: purchase.order, id: order_purchase1}:
    - state == 'approved'
-
  I check that the purchase order has now a corresponding invoice details
-
  !python {model: purchase.order}: |
    purchase_order = self.browse(cr, uid, ref("order_purchase1"))
    assert len(purchase_order.invoice_ids) == 1,"Invoice line is not more or less than one"
    for invoice in purchase_order.invoice_ids:
      if purchase_order.invoiced == True:
        assert invoice.state == "open", "Invoice state should be Open"
      else:
        assert invoice.state == "draft", "Invoice state should be draft"
      assert invoice.reference == purchase_order.partner_ref or purchase_order.name,"Invoice reference is not correspond with purchase order"
      assert invoice.account_id == purchase_order.partner_id.property_account_payable ,"Invoice account_id is not correspond with purchase order"
      assert invoice.type == 'in_invoice',"Invoice type is not correspond with purchase order"
      assert invoice.currency_id == purchase_order.pricelist_id.currency_id ,"Invoice currency_id is not correspond with purchase order"
      assert invoice.address_invoice_id == purchase_order.partner_address_id ,"Invoice address_invoice is not correspond with purchase order"
      assert invoice.address_contact_id == purchase_order.partner_address_id ,"Invoice address_contact is not correspond with purchase order"
      assert invoice.origin == purchase_order.name,"Invoice origin is not correspond with purchase order"
      assert invoice.company_id == purchase_order.company_id ,"Invoice company is not correspond with purchase order"
      assert invoice.name == purchase_order.name, "Invoice name is not correspond with purchase order"
      assert invoice.amount_untaxed == purchase_order.amount_untaxed, "Invoice untaxed amount is not correspond with purchase order"
      assert invoice.amount_tax == purchase_order.amount_tax, "Invoice tax amount is not correspond with purchase order"
      assert invoice.amount_total == purchase_order.amount_total, "Invoice total amount is not correspond with purchase order"
      assert invoice.partner_id == purchase_order.partner_id, "Invoice supplier is not correspond with purchase order"
      assert len(invoice.invoice_line) == len(purchase_order.order_line), "Invoice line is not correspond with puchase order line"
      for index in range(0,len(invoice.invoice_line)):
        assert invoice.invoice_line[index].price_unit == purchase_order.order_line[index].price_unit, "Invoice unit price is not correspond with purchase order"
        assert invoice.invoice_line[index].name == purchase_order.order_line[index].name,"Invoice product is not correspond with purchase order"
        assert invoice.invoice_line[index].price_unit == purchase_order.order_line[index].price_unit or 0.0,"Invoice product is not correspond with purchase order"
        assert invoice.invoice_line[index].quantity == purchase_order.order_line[index].product_qty,"Invoice product is not correspond with purchase order"
        assert invoice.invoice_line[index].product_id == purchase_order.order_line[index].product_id  or False,"Invoice product is not correspond with purchase order"
        assert invoice.invoice_line[index].uos_id == purchase_order.order_line[index].product_uom  or False,"Invoice product is not correspond with purchase order"
        assert len(invoice.invoice_line[index].invoice_line_tax_id) == len(purchase_order.order_line[index].taxes_id), "Included Taxes line for products is not correspond with puchase order line"
        for tax in range(0,len(invoice.invoice_line[index].invoice_line_tax_id)):
          assert invoice.invoice_line[index].invoice_line_tax_id[tax].name == purchase_order.order_line[index].taxes_id[tax].name,"Invoice Taxes of products are not correspond with purchase order Taxes products"

-
  I check that the purchase order has now a corresponding Reception.
-
  !python {model: purchase.order}: |
    purchase_order = self.browse(cr, uid, ref("order_purchase1"))
    assert len(purchase_order.picking_ids) == 1, "Reception line should be one"
    for picking in purchase_order.picking_ids:
      assert picking.state == "assigned", "Reception state should be in assigned state"
      assert picking.address_id == purchase_order.dest_address_id  or purchase_order.partner_address_id ,"Reception product is not correspond with purchase order"
      if purchase_order.invoice_method == 'picking':
        assert picking.invoice_state == '2binvoiced',"Reception Invoice state should be 2binvoiced if it's Based on receptions "
      elif purchase_order.invoice_method == 'picking':
        assert picking.invoice_state == 'invoiced',"Reception Invoice state should be invoiced."
      else:
        assert picking.invoice_state == 'none',"Reception Invoice state should be Not applicable if it's invoice method is 'Draft invoices pre-generated'"
      assert picking.company_id == purchase_order.company_id ,"Reception company is not correspond with purchase order"
      for index in range(0,len(picking.move_lines)):
        assert picking.move_lines[index].product_id == purchase_order.order_line[index].product_id, "Reception product is not correspond with purchase order"
        assert picking.move_lines[index].location_dest_id == purchase_order.location_id, "Reception location is not correspond with purchase order"
        assert picking.move_lines[index].product_uom == purchase_order.order_line[index].product_uom, "Reception uom is not correspond with purchase order"        
        assert picking.move_lines[index].product_qty == purchase_order.order_line[index].product_qty, "Reception qty is not correspond with purchase order"
        assert picking.move_lines[index].product_id == purchase_order.order_line[index].product_id ,"Reception products is not correspond with purchase order"
        assert picking.move_lines[index].product_uos_qty == purchase_order.order_line[index].product_qty,"Reception product uos qty is not correspond with purchase order"
        assert picking.move_lines[index].product_uom == purchase_order.order_line[index].product_uom ,"Reception product UOM is not correspond with purchase order"
        assert picking.move_lines[index].product_uos == purchase_order.order_line[index].product_uom ,"Reception product UOS is not correspond with purchase order"
        assert picking.move_lines[index].location_dest_id == purchase_order.location_id,"Reception Destination Location is not correspond with purchase order"
        assert picking.move_lines[index].company_id == purchase_order.company_id ,"Reception Company is not correspond with purchase order"
        assert picking.move_lines[index].price_unit == purchase_order.order_line[index].price_unit ,"Reception Price unit is not correspond with purchase order"
