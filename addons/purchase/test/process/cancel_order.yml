-
   In order to test the cancel flow, I start it from canceling confirmed purchase order.
-
  I confirm the purchase order.
-
  !workflow {model: purchase.order, action: purchase_confirm, ref: order_purchase4}
-
  I changed Expected Date to Next Day.
-
  !python {model: purchase.order}: |
    import datetime
    next_day = (datetime.date.today()+datetime.timedelta(days=1))
    self.write(cr, uid, [ref("order_purchase4")], {'minimum_planned_date': next_day})
-
  I check the "Approved" status  after confirmed RFQ.
-
  !assert {model: purchase.order, id: order_purchase4}:
    - state == 'approved'
-
  First I cancel  receptions related to this order if order shipped.
-
  !python {model: purchase.order}: |
    order = self.browse(cr, uid, ref("order_purchase4"))
    self.pool.get('stock.picking').action_cancel(cr, uid, [picking.id for picking in  order.picking_ids])
-
  I check order status in "Shipping Exception".
-
  !python {model: purchase.order}: |
    order = self.browse(cr, uid, ref("order_purchase4"))
    assert order.state == "except_picking", "order should be in Ship Exception state after cancel shipment"    
-
  Now I am able to cancel purchase order.
-
  !python {model: purchase.order}: |
    self.action_cancel(cr, uid, [ref("order_purchase4")])
-
  I check that order is cancelled.
-
  !assert {model: purchase.order, id: order_purchase4}:
    - state == 'cancel'
-
  After cancel the order, I check that it's related invoice cancelled.
-
  !python {model: purchase.order}: |
    order = self.browse(cr, uid, ref("order_purchase4"))
    assert order.invoice_ids[0].state == "cancel", "order's related invoice should be cancelled"   
-
  Now again set cancelled order to draft.
-
  !python {model: purchase.order}: |
    self.action_cancel_draft(cr, uid, [ref("order_purchase4")])
-
  Now I again to cancel draft order.
-
  !python {model: purchase.order}: |
    self.action_cancel(cr, uid, [ref("order_purchase4")])
-
  I check that order is cancelled.
-
  !assert {model: purchase.order, id: order_purchase4}:
    - state == 'cancel'
