-
  In order to test Checking of Cost price of product if the product price "Costing Method" 
  is "Average Price" and we change value of product on incoming shipment
  
-        
  I create  product.
-
  !record {model: product.product, id: product_product_pen0 }:
    categ_id: product.product_category_3
    cost_method: average
    name: Pen drive
    procure_method: make_to_stock
    supply_method: buy
    type: product
    standard_price: 1500.0
    list_price: 1500.0
    supply_method: buy
    uom_id: product.product_uom_unit
    uom_po_id: product.product_uom_unit
    volume: 0.0
    warranty: 0.0
    weight: 0.0

-
  Update Starting Real Stock And Virtual Stock threw Wizard
-
  !record {model: stock.change.product.qty , id: stock_change_product_id }:
    product_id: product_product_pen0 
    new_quantity: 2.0
    location_id: stock.stock_location_stock
-
  Then, Click on "Update Price" button of this wizard.
-
  !python {model: stock.change.product.qty }: |
    self.change_product_qty(cr, uid, [ref('stock_change_product_id')], {'active_id': ref('product_product_pen0')})
-
  I create purchase order for Pen drive.
- 
  !record {model: purchase.order, id: purchase_order_po11}:
    company_id: base.main_company
    date_order: '2010-05-11'
    invoice_method: order
    location_id: stock.stock_location_stock
    order_line:
      - date_planned: '2010-05-13'
        name: Pen drive
        price_unit: 1500.0
        product_id: 'product_product_pen0'
        product_qty: 2.0
        product_uom: product.product_uom_unit
        state: draft
    partner_address_id: base.res_partner_address_7
    partner_id: base.res_partner_4
    pricelist_id: purchase.list0
-
  PO Initially in Draft State .
-
  !assert {model: purchase.order, id: purchase_order_po11}:
    - state == 'draft'  
-  
  PO Going to Draft To Confirm State
-
  !workflow {model: purchase.order, action: purchase_confirm, ref: purchase_order_po11}
-
  I check that the Order has transit from draft state to confirm state.
-
  !assert {model: purchase.order, id: purchase_order_po11}:
    - state == 'approved'  
-   
  I receive the order of the supplier the Incoming Shipments menu.
-   
  !python {model: stock.picking }: |
    import time
    procurement_obj = self.pool.get('procurement.order')
    proc_ids = procurement_obj.browse(cr, uid, [ref('purchase_order_po11')])[0]
    picking_ids = self.search(cr, uid, [('purchase_id', '=', proc_ids.id),('type','=','in')])
    pickings = self.browse(cr, uid, picking_ids)
    for picking in pickings:
       move = picking.move_lines[0]
       partial_datas = {
            'partner_id': picking.address_id.partner_id.id,
            'address_id': picking.address_id.id,
            'delivery_date' : time.strftime('%Y-%m-%d')
           }
       partial_datas['move%s'%(move.id)]= {
           'product_id': move.product_id,
           'product_qty': move.product_qty,
           'product_uom': move.product_uom.id,
           'product_price' : 1000.0,
       } 
       self.do_partial(cr, uid, [picking.id], partial_datas)
-
  I confirm the Reservation.
-
  !python {model: stock.move }: |
    procurement_obj = self.pool.get('procurement.order')
    picking_obj = self.pool.get('stock.picking')
    proc_ids = procurement_obj.browse(cr, uid, [ref('purchase_order_po11')])[0]
    picking_ids = picking_obj.search(cr, uid, [('purchase_id', '=', proc_ids.id),('type','=','in')])
    move_ids = self.search(cr, uid, [('picking_id', '=', picking_ids)])
    self.action_done(cr,uid,move_ids)
-
  Compare With Avarage Price Has Been Updated that is Correct
-
  !assert {model: product.product, id: product_product_pen0 ,string: Updated Avarage Price Has not been Correct}:
    - standard_price == 1250  

