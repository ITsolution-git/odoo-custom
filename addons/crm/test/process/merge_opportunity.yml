-
  I merge two opportunities.
-
  !python {model: crm.lead}: |
    opportunity_ids = self.search(cr, uid, [('type', '=', 'opportunity'), ('state', 'not in', ['done', 'cancel']), ('partner_id', '=', ref('base.res_partner_2'))], limit=2)
    assert len(opportunity_ids) == 2, 'There should be two opportunities (got %s instead)' % len(opportunity_ids)
    context.update({'active_model': 'crm.lead', 'active_ids': opportunity_ids, 'active_id': opportunity_ids[0]})
-
  !record {model: crm.merge.opportunity, id: opportunity_merge_id }:
-
  !python {model: crm.merge.opportunity}: |
    self.action_merge(cr, uid, [ref("opportunity_merge_id")], context=context)
-
  I check for merged opportunities for customer.
-
  !python {model: crm.lead}: |
    merge_id = self.search(cr, uid, [('partner_id','=', ref("base.res_partner_2"))])
    assert merge_id, 'Fail to create Merge opportunity'
    merge_data = self.browse(cr, uid, merge_id)[0]
    assert merge_data.type == 'opportunity', 'Merged opportunity type didn\'t change'
    assert merge_data.partner_id.id == ref("base.res_partner_2"), 'Partner missmatch'