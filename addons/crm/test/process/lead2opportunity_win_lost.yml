-
  I test to convert lead to real business opportunity, so first i create existing partner attached with lead.
-
  !record {model: crm.lead2opportunity.partner, id: crm_lead2opportunity_partner_create_1}:
    action: 'exist'
    partner_id: base.res_partner_agrolait
-
  Create opportunity based on exiting partner.
-
  !python {model: crm.lead2opportunity.partner}: |
    self.action_apply(cr, uid, [ref("crm_lead2opportunity_partner_create_1")], {'active_ids': [ref("crm_case_qrecorp0")], 'active_id': ref("crm_case_qrecorp0")})
-
  After converted in opportunity, i test to lead is converted to opportunity.
-
  !python {model: crm.lead}: |
    lead = self.browse(cr, uid, ref('crm_case_qrecorp0'))
    assert lead.type == 'opportunity', 'Lead is not converted to opportunity!'
    assert lead.partner_id.id == ref("base.res_partner_agrolait"), 'Partner missmatch!'
    assert lead.stage_id.id == ref("stage_lead1"), 'Stage of opportunity is incorrect!'
-
  Finally, i won this opportunity, so i close this opportunity.
-
  !python {model: crm.lead}: |
    self.case_mark_won(cr, uid, [ref("crm_case_qrecorp0")])
-
  I check opportunity is close or not.
-
  !assert {model: crm.lead, id: crm.crm_case_qrecorp0, string: Opportunity in done state}:
    - state == "done"
-
  In order to test stage of opportunity after win, i will test stage of opportunity.
-
  !assert {model: crm.lead, id: crm.crm_case_qrecorp0, string: stage of opportunity is win}:
    - stage_id.name == "Won"
-
  I add internal note to this opportunity, so i create note.
-
  !record {model: crm.add.note, id: crm_add_note_won_opportunity}:
    body: 'I won this Opportunity'
-
  Apply this note to opportunity.
-
  !python {model: crm.add.note}: |
    self.action_add(cr, uid, [ref("crm_add_note_won_opportunity")], {"active_model": "crm.lead","active_ids": [ref("crm_case_qrecorp0")]})

# TODO: cheked For ordering of history of message
#-
#  I test Internal latest note added on opportunity .
#-
#  !python {model: crm.lead}: |
#    lead = self.browse(cr, uid, ref('crm_case_qrecorp0'))
#    assert lead.message_ids[0].subject == 'I won this Opportunity', 'Fail to Added interal note on opportunity'
-
  After winning the opportunity, i test probability is 100.
-
  !assert {model: crm.lead, id: crm.crm_case_qrecorp0, string: Probability is equal to 100}:
    - probability == 100.0
-
  Suppose i have opportinity in initial stage, i will check after loss my `opportunity` , probability of that opportunity is 0
-
  !python {model: crm.lead}: |
    self.case_open(cr, uid, [ref("crm_case_rdroundfundingunits0")])
    self.case_mark_lost(cr, uid, [ref("crm_case_rdroundfundingunits0")])
-
  I check after loss the opportunity, probability set to 0.0 and lost stage set accordingly.
-
  !python {model: crm.lead}: |
    opportunity = self.browse(cr, uid, ref('crm_case_rdroundfundingunits0'))
    assert opportunity.stage_id.id == ref('crm.stage_lead6'), 'Stage is not changed!'
    assert opportunity.probability == 0.0, 'Probability is wrong!'
