-
  I cancel unqualified lead.
-
  !python {model: crm.lead}: |
    self.case_cancel(cr, uid, [ref("crm_case_itisatelesalescampaign0")])
-
  I check cancelled lead.
-
  !assert {model: crm.lead, id: crm.crm_case_itisatelesalescampaign0, string: Lead is in cancel state}:
    - state == "cancel"
-
  I reset cancelled lead into unqualified lead.
-
  !python {model: crm.lead}: |
    self.case_reset(cr, uid, [ref("crm_case_itisatelesalescampaign0")])
-
  I check unqualified lead after reset.
-
  !assert {model: crm.lead, id: crm.crm_case_itisatelesalescampaign0, string: Lead is in draft state}:
    - state == "draft"
-
  I re-open the opportunity
-
  !python {model: crm.lead}: |
    self.case_open(cr, uid, [ref("crm_case_itisatelesalescampaign0")])
-
 I check stage and state of the re-opened opportunity
-
  !python {model: crm.lead}: |
    lead = self.browse(cr, uid, ref('crm.crm_case_itisatelesalescampaign0'))
    assert lead.stage_id.id == ref('crm.stage_lead2'), "Opportunity stage should be 'Qualification'."
    assert lead.state == 'open', "Opportunity should be in 'open' state."
-
  I escalate the lead to parent team.
-
  !python {model: crm.lead}: |
    self.case_escalate(cr, uid, [ref("crm_case_itisatelesalescampaign0")])
-
  I check lead escalate to parent team.
-
  !assert {model: crm.lead, id: crm.crm_case_itisatelesalescampaign0, string: Escalate lead to parent team}:
    - section_id.name == "Sales Department"
-
  I mark as lost the opportunity.
-
  !python {model: crm.lead}: |
    self.case_mark_lost(cr, uid, [ref("crm_case_itisatelesalescampaign0")])
-
  I check opportunity after lost.
-
  !python {model: crm.lead}: |
    lead = self.browse(cr, uid, ref('crm_case_itisatelesalescampaign0'))
    assert lead.stage_id.id == ref('crm.stage_lead6'), "Stage should be 'Lost'."
    assert lead.state == 'cancel', "Opportunity is not in 'cancel' state."
    assert lead.probability == 0.0, 'Opportunity probability is wrong and should be 0.0.'
