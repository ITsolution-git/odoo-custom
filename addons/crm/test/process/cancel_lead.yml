-
  I cancel unqualified lead.
-
  !python {model: crm.lead}: |
    self.case_cancel(cr, uid, [ref("crm_case_itisatelesalescampaign0")])
-
  I check cancelled lead.
-
  !assert {model: crm.lead, id: crm.crm_case_itisatelesalescampaign0, string: Lead is in cancel state}:
    - state == "cancel"
-
  I reset cancelled lead into unqualified lead.
-
  !python {model: crm.lead}: |
    self.case_reset(cr, uid, [ref("crm_case_itisatelesalescampaign0")])
-
  I check unqualified lead after reset.
-
  !assert {model: crm.lead, id: crm.crm_case_itisatelesalescampaign0, string: Lead is in draft state}:
    - state == "draft"
-
  I put unqualified lead into pending.
-
  !python {model: crm.lead}: |
    self.case_pending(cr, uid, [ref("crm_case_itisatelesalescampaign0")])
-
  I check status of pending lead.
-
  !assert {model: crm.lead, id: crm.crm_case_itisatelesalescampaign0, string: Lead is in pending state}:
    - state == "pending"
-
  I Escalate the Lead to Parent Team.
-
  !python {model: crm.lead}: |
    self.case_escalate(cr, uid, [ref("crm_case_itisatelesalescampaign0")])
-
  I check lead escalate to Parent Team.
-
  !assert {model: crm.lead, id: crm.crm_case_itisatelesalescampaign0, string: Escalate lead to parent team}:
    - section_id.name == "Sales Department"
-
  I mark as lost the opportunity.
-
  !python {model: crm.lead}: |
    self.case_mark_lost(cr, uid, [ref("crm_case_itisatelesalescampaign0")])
-
  I check opportunity after lost.
-
  !python {model: crm.lead}: |
    lead = self.browse(cr, uid, ref('crm_case_itisatelesalescampaign0'))
    assert lead.state == 'done', "lead is not done state"
    assert lead.stage_id.id == ref('crm.stage_lead6'), 'Stage is not changed!'
    assert lead.probability == 0.0, 'Probability is wrong!'
-
  I create a Record Rule.
-
  !python {model: base.action.rule}: |
    modle_id = self.pool.get("ir.model").search(cr, uid, [('name', '=', 'crm.lead')])
    from datetime import datetime
    new_id = self.create(cr, uid, {'name': 'New Rule', 'model_id': modle_id[0],  'trg_user_id': ref('base.user_root'), 'trg_partner_id': ref('base.res_partner_asus'), 'act_user_id': ref('base.user_demo') })
    lead_obj = self.pool.get("crm.lead")
    self._check(cr, uid)
-
  I create New Lead To Check Record Rule.
-
  !record {model: crm.lead, id: crm_lead_test_rules_id }:
    name: 'test leads Ruels'
    user_id: base.user_root
    partner_id: base.res_partner_asus
-
  I Check Record Rule is Apply and Responsible is Changed.
-
  !python {model: crm.lead}: |
    user = self.browse(cr, uid, ref('crm_lead_test_rules_id'))
    demo_user = self.pool.get("res.users").browse(cr, uid, ref('base.user_demo'))
    assert user.user_id.id == demo_user.id, "Responsible is Not changed." 
