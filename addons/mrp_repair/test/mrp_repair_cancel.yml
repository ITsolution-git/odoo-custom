-
  I start by creating new Repair order for "Basic Pc" product and Invoice Type None.
-
  !record {model: mrp.repair, id: mrp_repair_rma2}:
    address_id: base.res_partner_address_1
    guarantee_limit: !eval datetime.today().strftime("%Y-%m-%d")
    invoice_method: 'none'
    partner_invoice_id: base.res_partner_address_1
    location_dest_id: stock.stock_location_14
    location_id: stock.stock_location_14
    move_id: 'stock_move_pcbasicpc0'
    name: RMA000055
    operations:
      - location_dest_id: stock.location_production
        location_id: stock.stock_location_stock
        name: '[HDD1] HDD Seagate 7200.8 80GB'
        price_unit: 50.0
        product_id: product.product_product_hdd1
        product_uom: product.product_uom_unit
        product_uom_qty: 1.0
        state: draft
        to_invoice: 1
        type: add
    fees_lines:
      - name: 'HDD1 Seagate repair fees'
        product_id: product.product_product_hdd1
        product_uom_qty: 1.0
        product_uom: product.product_uom_unit
        price_unit: 50.0
    partner_id: base.res_partner_9
    product_id: product.product_product_pc1
-
  I confirm This Repair order.
-
  !workflow {model: mrp.repair, action: repair_confirm, ref: mrp_repair_rma2}
-
  Cancel Repair order.
-
  !python {model: mrp.repair.cancel}: |
    context = {"lang": 'en_US', "active_model":"mrp.repair", "active_ids": [ref("mrp_repair_rma2")], "tz": False, "active_id":ref('mrp_repair_rma2')}
    self.fields_view_get(cr, uid, False, "form", context)
    self.cancel_repair(cr, uid, [ref("mrp_repair_rma2")], context=context)
-
  Reopen the repair order in draft state.
-
  !python {model: mrp.repair}: |
    self.action_cancel_draft(cr, uid, [ref('mrp_repair_rma2')])
-
  Repair order state to 'Ready'.
-
  !python {model: mrp.repair}: |
    self.action_repair_ready(cr, uid, [ref('mrp_repair_rma2')], context=None)
-
 Cancel repair order.
-
  !python {model: mrp.repair}: |
   self.action_cancel(cr, uid, [ref('mrp_repair_rma2')], context=None)
-
  I start by creating new Repair order for "Basic Pc" product and Invoice Type b4repair.
-
  !record {model: mrp.repair, id: mrp_repair_rma1}:
    address_id: base.res_partner_address_1
    guarantee_limit: !eval datetime.today().strftime("%Y-%m-%d")
    invoice_method: 'b4repair'
    partner_invoice_id: base.res_partner_address_1
    location_dest_id: stock.stock_location_14
    location_id: stock.stock_location_14
    move_id: 'stock_move_pcbasicpc0'
    name: RMA00005
    operations:
      - location_dest_id: stock.location_production
        location_id: stock.stock_location_stock
        name: '[HDD1] HDD Seagate 7200.8 80GB'
        price_unit: 50.0
        product_id: product.product_product_hdd1
        product_uom: product.product_uom_unit
        product_uom_qty: 1.0
        state: draft
        to_invoice: 1
        type: add
    fees_lines:
      - name: 'HDD1 Seagate repair fees'
        product_id: product.product_product_hdd1
        product_uom_qty: 1.0
        product_uom: product.product_uom_unit
        price_unit: 50.0
    partner_id: base.res_partner_9
    product_id: product.product_product_pc1
-
  I confirm This Repair order For Invoice Type b4repair.
-
  !workflow {model: mrp.repair, action: repair_confirm, ref: mrp_repair_rma1}
-
  I select invoiced before repair option in this "RMA00005" Repair order.
  so I create Invoice by click on "Make Invoice" wizard.
-
  !record {model: mrp.repair.make_invoice, id: mrp_repair_make_invoice_0}:
    group: 1
-
  I click on "Create Invoice" button of this wizard to make invoice.
-
  !python {model: mrp.repair.make_invoice}: |
    self.make_invoices(cr, uid, [ref("mrp_repair_make_invoice_0")], {"active_ids": [ref("mrp_repair.mrp_repair_rma1")]})
-
  I check that Invoice is created for this repair order.
-
  !python {model: mrp.repair}: |
     obj_lines = self.pool.get('account.invoice.line')
     inv_obj = self.pool.get('account.invoice')
     repair_id = self.browse(cr, uid, [ref('mrp_repair_rma1')], context=context)[0]
     invoice_ids = inv_obj.search(cr, uid, [('partner_id', '=', repair_id.partner_id.id)])
     invoice_id = inv_obj.browse(cr, uid, invoice_ids)[0]
     assert repair_id.partner_id.id == invoice_id.partner_id.id, "No invoice existing for the same partner"
-
  I start the repairing  process by click on "Start Repair" Button For Invoice Type b4repair.
-
  !workflow {model: mrp.repair, action: repair_ready, ref: mrp_repair_rma1}
-
  Repairing Process for product is Done and I End Repair process by click on "End Repair" button For Invoice Type b4repair.
-
  !workflow {model: mrp.repair, action: action_repair_end, ref: mrp_repair_rma1}

