-
  In order to test "mrp_repair" module, I start from confirm it, and start repair.
-
  I confirm Repair order.
-
  !workflow {model: mrp.repair, action: repair_confirm, ref: mrp_repair_rmrp0}
-
  I start the repairing  process by click on "Start Repair" Button For Invoice Type After repair.
-
  !workflow {model: mrp.repair, action: repair_ready, ref: mrp_repair_rmrp0}
-
  I check that state is "Under Repair".
-
  !assert {model: mrp.repair, id: mrp_repair_rmrp0}:
      - state == 'under_repair'
-
  Repairing Process for product is Done and I End Repair process by click on "End Repair" button.
-
  !workflow {model: mrp.repair, action: action_repair_end, ref: mrp_repair_rmrp0}
-
  I define invoiced after repair option in this Repair order.
  so I create Invoice by click on "Make Invoice" wizard.
-
  !record {model: mrp.repair.make_invoice, id: mrp_repair_make_invoice_0}:
    group: 1
-
  I click on "Create Invoice" button of this wizard to make invoice.
-
  !python {model: mrp.repair.make_invoice}: |
    self.make_invoices(cr, uid, [ref("mrp_repair_make_invoice_0")], {"active_ids": [ref("mrp_repair.mrp_repair_rmrp0")]})
-
  I check that Invoice is created for this repair order.
-
  !python {model: mrp.repair}: |
     repair_id = self.browse(cr, uid, [ref('mrp_repair_rmrp0')], context=context)[0]
     assert repair_id.invoice_id.id, _("No invoice exists for this repair order")
-
  I start by creating new copy Repair order for "Basic PC" product.
-
  !python {model: mrp.repair}: |
    copy_id = self.copy(cr, uid, ref("mrp_repair_rmrp0"))
    context.update({'new_id':copy_id})
-
  I update the Invoice Method is "No Invoice" and confirm it.
-
  !python {model: mrp.repair}: |
    import netsvc
    new_id = context.get('new_id')
    self.write(cr, uid, [new_id], {'invoice_method': 'none'})
    wf_service = netsvc.LocalService("workflow")
    wf_service.trg_validate(uid, 'mrp.repair', new_id, 'repair_confirm', cr)    
-
  I Cancel this Repair order.
-
  !python {model: mrp.repair.cancel}: |
    new_id = context.get('new_id')
    context.update({"active_model":"mrp.repair", "active_ids": [new_id],"active_id": new_id})
    self.fields_view_get(cr, uid, False, "form", context)
    self.cancel_repair(cr, uid, [new_id], context)
-
  I check that Repair order is in "Cancel" state.
-
  !python {model: mrp.repair}: |
    new_id = context.get('new_id')
    order = self.browse(cr, uid, [new_id])[0]
    assert order.state == 'cancel',"Repair order should be in Cancel state."
-
  I Reopen the repair order as new.
-
  !python {model: mrp.repair}: |
    new_id = context.get('new_id')
    self.action_cancel_draft(cr, uid, [new_id])
-
  I change the Invoice method of the repair order to Before repair and confirm it again.
-
  !python {model: mrp.repair}: |
    import netsvc
    new_id = context.get('new_id')
    self.write(cr, uid, [new_id], {'invoice_method': 'b4repair'})
    wf_service = netsvc.LocalService("workflow")
    wf_service.trg_validate(uid, 'mrp.repair', new_id, 'repair_confirm', cr) 
-
  Repair order state to 'Ready'.
-
  !python {model: mrp.repair}: |
    new_id = context.get('new_id')
    self.action_repair_ready(cr, uid, [new_id], context)
-
  I click on "Create Invoice" button of this wizard to make invoice.
-
  !python {model: mrp.repair}: |
    import netsvc
    new_id = context.get('new_id')
    wf_service = netsvc.LocalService("workflow")
    wf_service.trg_validate(uid, 'mrp.repair', new_id, 'action_invoice_create', cr)   
-
  I check that Invoice is created for this repair order.
-
  !python {model: mrp.repair}: |
     new_id = context.get('new_id')
     repair_id = self.browse(cr, uid, [new_id], context)[0]
     assert repair_id.invoice_id.id, _("No invoice exists for this repair order.")
-
  I start the repairing process by click on "Start Repair" Button.
-
  !python {model: mrp.repair}: |
    import netsvc
    new_id = context.get('new_id')
    wf_service = netsvc.LocalService("workflow")
    wf_service.trg_validate(uid, 'mrp.repair', new_id, 'action_repair_start', cr)     
-
  Repairing Process for product is Done and I End Repair process by click on "End Repair" button For Invoice Type b4repair.
-
  !python {model: mrp.repair}: |
    import netsvc
    new_id = context.get('new_id')
    wf_service = netsvc.LocalService("workflow")
    wf_service.trg_validate(uid, 'mrp.repair', new_id, 'action_repair_end', cr)       
    
