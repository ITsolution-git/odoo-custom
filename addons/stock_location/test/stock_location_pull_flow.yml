-
  In order to test the stock_location module, I create a product and define its pulled flows. If a product is needed either in Chicago Shop or in Birmingham shop, there must be a incomming move from transit location to these shops, and an outgoing move from Stock to the transit location.
-
  !record {model: stock.location.route, id: stock_location_route}:
    name: 'Route from one company to the other'
    pull_ids: 
      - invoice_state: none
        location_id: stock.stock_location_shop0
        location_src_id: stock.stock_location_intermediatelocation0
        name: E001
        procure_method: make_to_order
        picking_type_id: stock.picking_type_in
        action: move
      - invoice_state: none
        location_id: stock.stock_location_shop1
        procure_method: make_to_order
        location_src_id: stock.stock_location_intermediatelocation0
        name: E002
        picking_type_id: stock.picking_type_in
        procure_method: make_to_order
        action: move
      - invoice_state: none
        location_id: stock.stock_location_intermediatelocation0
        location_src_id: stock.stock_location_stock
        name: E003
        action: move
        procure_method: make_to_order
        picking_type_id: stock.picking_type_out

- 
  !record {model: product.product, id: product_product_hpcdwriters01}:
    list_price: 1000.0
    mes_type: fixed
    name: HP CD writers
    type: product
    uom_id: product.product_uom_unit
    uom_po_id: product.product_uom_unit
    route_ids: [stock_location_route]
    property_stock_inventory: stock.location_inventory
    property_stock_procurement: stock.location_procurement
    property_stock_production: stock.location_production
    qty_available: 15
-
  I create a procurement order.
-
  !record {model: procurement.order, id: procurement_order_test0}:
    company_id: stock.res_company_1
    date_planned: !eval time.strftime('%Y-%m-%d %H:%M:%S')
    location_id: stock.stock_location_shop0
    name: Testing001
    priority: '1'
    product_id: product_product_hpcdwriters01
    product_qty: 5.0
    product_uom: product.product_uom_unit
    product_uos: product.product_uom_unit
    product_uos_qty: 0.0
-
  I confirm the procurement order.
-
  !python {model: procurement.order}: |
    self.run(cr, uid, [ref("procurement_order_test0")])
-
  I check the new procurement order has been created .
-
  !python {model: procurement.order }: |
   procurement_ids = self.search(cr, uid, [('origin','=','E001')])
   assert len(procurement_ids), "Procurement order hasn't been created."
-
  I check the Outgoing Picking is created for source location Stock and destination Chicago shop.
-
  !python {model: stock.picking }: |
    in_picking_id = self.search(cr, uid, [('picking_type_id','=',ref('stock.picking_type_in'))])
    assert len(in_picking_id), "Picking in hasn't been created."
    in_picking = self.browse(cr, uid, in_picking_id[0])
    assert in_picking.move_lines[0].location_id.id == ref('stock.stock_location_intermediatelocation0'), "wrong source location for picking in"
    assert in_picking.move_lines[0].location_dest_id.id == ref('stock.stock_location_shop0'), "wrong destination location for picking in"
    assert in_picking.company_id.id == ref('stock.res_company_1'), "wrong company for picking in"
    out_picking_id = self.search(cr, uid, [('picking_type_id','=',ref('stock.picking_type_out'))])
    assert len(out_picking_id), "Picking out hasn't been created."
