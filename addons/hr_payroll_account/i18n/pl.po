# Polish translation for openobject-addons
# Copyright (c) 2010 Rosetta Contributors and Canonical Ltd 2010
# This file is distributed under the same license as the openobject-addons package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2010.
#
msgid ""
msgstr ""
"Project-Id-Version: openobject-addons\n"
"Report-Msgid-Bugs-To: FULL NAME <EMAIL@ADDRESS>\n"
"POT-Creation-Date: 2010-08-20 06:11+0000\n"
"PO-Revision-Date: 2010-09-17 14:54+0000\n"
"Last-Translator: Grzegorz Grzelak (Cirrus.pl) <Unknown>\n"
"Language-Team: Polish <pl@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Launchpad-Export-Date: 2010-09-29 05:17+0000\n"
"X-Generator: Launchpad (build Unknown)\n"

#. module: hr_payroll_account
#: field:hr.payslip,move_line_ids:0
msgid "Accounting Lines"
msgstr ""

#. module: hr_payroll_account
#: field:hr.payslip,move_ids:0
msgid "Accounting vouchers"
msgstr ""

#. module: hr_payroll_account
#: constraint:ir.model:0
msgid ""
"The Object name must start with x_ and not contain any special character !"
msgstr ""
"Nazwa obiektu musi zaczynać się od x_ oraz nie może zawierać znaków "
"specjalnych !"

#. module: hr_payroll_account
#: code:addons/hr_payroll_account/hr_payroll_account.py:0
#, python-format
msgid ""
"Please defined bank account for %s !' % (slip.employee_id.name)))\n"
"\n"
"            if not slip.employee_id.bank_account_id.partner_id:\n"
"                raise osv.except_osv(_('Integrity Error !"
msgstr ""

#. module: hr_payroll_account
#: view:hr.payslip:0
msgid "Other Informations"
msgstr "Inne informacje"

#. module: hr_payroll_account
#: model:ir.model,name:hr_payroll_account.model_hr_payslip_account_move
msgid "Account Move Link to Pay Slip"
msgstr ""

#. module: hr_payroll_account
#: view:hr.payslip:0
msgid "Description"
msgstr "Opis"

#. module: hr_payroll_account
#: code:addons/hr_payroll_account/hr_payroll_account.py:0
#, python-format
msgid ""
"Period is not defined for slip date %s'%slip.date))\n"
"            period_id = search_periods[0]\n"
"            name = 'Payment of Salary to %s' % (slip.employee_id.name)\n"
"            move = {\n"
"                'journal_id': slip.bank_journal_id.id,\n"
"                'period_id': period_id,\n"
"                'date': slip.date,\n"
"                'type':'bank_pay_voucher',\n"
"                'ref':slip.number,\n"
"                'narration': name\n"
"            }\n"
"            move_id = move_pool.create(cr, uid, move, context=context)\n"
"            self.create_voucher(cr, uid, [slip.id], name, move_id)\n"
"\n"
"            name = \"To %s account\" % (slip.employee_id.name)\n"
"            ded_rec = {\n"
"                'move_id':move_id,\n"
"                'name': name,\n"
"                #'partner_id': partner_id,\n"
"                'date': slip.date,\n"
"                'account_id': slip.employee_id.property_bank_account.id,\n"
"                'debit': 0.0,\n"
"                'credit' : slip.total_pay,\n"
"                'journal_id' : slip.journal_id.id,\n"
"                'period_id' :period_id,\n"
"                'ref':slip.number\n"
"            }\n"
"            line_ids += [movel_pool.create(cr, uid, ded_rec, "
"context=context)]\n"
"            name = \"By %s account\" % "
"(slip.employee_id.property_bank_account.name)\n"
"            cre_rec = {\n"
"                'move_id':move_id,\n"
"                'name': name,\n"
"                'partner_id': partner_id,\n"
"                'date': slip.date,\n"
"                'account_id': partner.property_account_payable.id,\n"
"                'debit':  slip.total_pay,\n"
"                'credit' : 0.0,\n"
"                'journal_id' : slip.journal_id.id,\n"
"                'period_id' :period_id,\n"
"                'ref':slip.number\n"
"            }\n"
"            line_ids += [movel_pool.create(cr, uid, cre_rec, "
"context=context)]\n"
"\n"
"            other_pay = slip.other_pay\n"
"            #Process all Reambuse Entries\n"
"            for line in slip.line_ids:\n"
"                if line.type == 'otherpay' and line.expanse_id.invoice_id:\n"
"                    if not line.expanse_id.invoice_id.move_id:\n"
"                        raise osv.except_osv(_('Warning !"
msgstr ""

#. module: hr_payroll_account
#: view:hr.payslip:0
msgid "Accounting Informations"
msgstr "Informacje o koncie"

#. module: hr_payroll_account
#: model:ir.module.module,description:hr_payroll_account.module_meta_information
msgid ""
"Generic Payroll system Integrated with Accountings\n"
"    * Expanse Encoding\n"
"    * Payment Encoding\n"
"    * Comany Contribution Managemet\n"
"    "
msgstr ""

#. module: hr_payroll_account
#: code:addons/hr_payroll_account/hr_payroll_account.py:0
#, python-format
msgid ""
"Period is not defined for slip date %s'%slip.date))\n"
"                period_id = search_periods[0]\n"
"\n"
"            move = {\n"
"                #'name': slip.name,\n"
"                'journal_id': slip.journal_id.id,\n"
"                'period_id': period_id,\n"
"                'date': slip.date,\n"
"                'ref':slip.number,\n"
"                'narration': slip.name\n"
"            }\n"
"            move_id = move_pool.create(cr, uid, move, context=context)\n"
"            self.create_voucher(cr, uid, [slip.id], slip.name, move_id)\n"
"\n"
"            line = {\n"
"                'move_id':move_id,\n"
"                'name': \"By Basic Salary / \" + slip.employee_id.name,\n"
"                'date': slip.date,\n"
"                'account_id': slip.employee_id.salary_account.id,\n"
"                'debit': slip.basic,\n"
"                'credit': 0.0,\n"
"                'quantity':slip.working_days,\n"
"                'journal_id': slip.journal_id.id,\n"
"                'period_id': period_id,\n"
"                'analytic_account_id': False,\n"
"                'ref':slip.number\n"
"            }\n"
"\n"
"            #Setting Analysis Account for Basic Salary\n"
"            if slip.employee_id.analytic_account:\n"
"                line['analytic_account_id'] = "
"slip.employee_id.analytic_account.id\n"
"\n"
"            move_line_id = movel_pool.create(cr, uid, line, "
"context=context)\n"
"            line_ids += [move_line_id]\n"
"\n"
"            line = {\n"
"                'move_id':move_id,\n"
"                'name': \"To Basic Paysble Salary / \" + "
"slip.employee_id.name,\n"
"                'partner_id': partner_id,\n"
"                'date': slip.date,\n"
"                'account_id': slip.employee_id.employee_account.id,\n"
"                'debit': 0.0,\n"
"                'quantity':slip.working_days,\n"
"                'credit': slip.basic,\n"
"                'journal_id': slip.journal_id.id,\n"
"                'period_id': period_id,\n"
"                'ref':slip.number\n"
"            }\n"
"            line_ids += [movel_pool.create(cr, uid, line, context=context)]\n"
"\n"
"            for line in slip.line_ids:\n"
"                name = \"[%s] - %s / %s\" % (line.code, line.name, "
"slip.employee_id.name)\n"
"                amount = line.total\n"
"\n"
"                if line.type == 'leaves':\n"
"                    continue\n"
"\n"
"                rec = {\n"
"                    'move_id':move_id,\n"
"                    'name': name,\n"
"                    'date': slip.date,\n"
"                    'account_id': line.account_id.id,\n"
"                    'debit': 0.0,\n"
"                    'credit' : 0.0,\n"
"                    'journal_id' : slip.journal_id.id,\n"
"                    'period_id' :period_id,\n"
"                    'analytic_account_id':False,\n"
"                    'ref':slip.number,\n"
"                    'quantity':1\n"
"                }\n"
"\n"
"                #Setting Analysis Account for Salary Slip Lines\n"
"                if line.analytic_account_id:\n"
"                    rec['analytic_account_id'] = "
"line.analytic_account_id.id\n"
"                else:\n"
"                    rec['analytic_account_id'] = slip.deg_id.account_id.id\n"
"\n"
"                if line.type == 'allowance' or line.type == 'otherpay':\n"
"                    rec['debit'] = amount\n"
"                    if not partner.property_account_payable:\n"
"                        raise osv.except_osv(_('Integrity Error !"
msgstr ""

#. module: hr_payroll_account
#: model:ir.module.module,shortdesc:hr_payroll_account.module_meta_information
msgid "Human Resource Payroll Accounting"
msgstr "Księgowość płac"

#. module: hr_payroll_account
#: view:hr.payslip:0
#: field:hr.payslip,move_payment_ids:0
msgid "Payment Lines"
msgstr "Pozycje płatności"

#. module: hr_payroll_account
#: code:addons/hr_payroll_account/hr_payroll_account.py:0
#, python-format
msgid "Please define fiscal year for perticular contract"
msgstr ""

#. module: hr_payroll_account
#: model:ir.model,name:hr_payroll_account.model_hr_payslip
msgid "Pay Slip"
msgstr ""

#. module: hr_payroll_account
#: view:hr.payslip:0
msgid "Account Lines"
msgstr "Pozycje"

#. module: hr_payroll_account
#: constraint:ir.ui.view:0
msgid "Invalid XML for View Architecture!"
msgstr "Niewłaściwy XML dla architektury widoku!"

#. module: hr_payroll_account
#: view:hr.payslip:0
msgid "Accounting Vouchers"
msgstr ""

#. module: hr_payroll_account
#: help:hr.payslip,period_id:0
msgid "Keep empty to use the period of the validation(Payslip) date."
msgstr ""

#. module: hr_payroll_account
#: code:addons/hr_payroll_account/hr_payroll_account.py:0
#, python-format
msgid ""
"Fiscal Year is not defined for slip date %s'%slip.date))\n"
"            search_periods = period_pool.search(cr, uid, "
"[('date_start','<=',slip.date),('date_stop','>=',slip.date)], "
"context=context)\n"
"            if not search_periods:\n"
"                raise osv.except_osv(_('Warning !"
msgstr ""

#. module: hr_payroll_account
#: code:addons/hr_payroll_account/hr_payroll_account.py:0
#, python-format
msgid ""
"Fiscal Year is not defined for slip date %s'%slip.date))\n"
"                search_periods = "
"period_pool.search(cr,uid,[('date_start','<=',slip.date),('date_stop','>=',sl"
"ip.date)], context=context)\n"
"                if not search_periods:\n"
"                    raise osv.except_osv(_('Warning !"
msgstr ""

#. module: hr_payroll_account
#: code:addons/hr_payroll_account/hr_payroll_account.py:0
#, python-format
msgid "Warning !"
msgstr "Ostrzeżenie !"

#. module: hr_payroll_account
#: code:addons/hr_payroll_account/hr_payroll_account.py:0
#, python-format
msgid "Please Confirm all Expanse Invoice appear for Reimbursement"
msgstr ""

#. module: hr_payroll_account
#: field:hr.payslip,period_id:0
msgid "Force Period"
msgstr "Wymuś okres"

#. module: hr_payroll_account
#: code:addons/hr_payroll_account/hr_payroll_account.py:0
#, python-format
msgid "Please Configure Partners Receivable Account!!"
msgstr ""

#. module: hr_payroll_account
#: code:addons/hr_payroll_account/hr_payroll_account.py:0
#, python-format
msgid ""
"Please defined partner in bank account for %s !' % "
"(slip.employee_id.name)))\n"
"\n"
"            partner = slip.employee_id.bank_account_id.partner_id\n"
"            partner_id = slip.employee_id.bank_account_id.partner_id.id\n"
"\n"
"            period_id = False\n"
"\n"
"            if slip.period_id:\n"
"                period_id = slip.period_id.id\n"
"            else:\n"
"                fiscal_year_ids = fiscalyear_pool.search(cr, uid, [], "
"context=context)\n"
"                if not fiscal_year_ids:\n"
"                    raise osv.except_osv(_('Warning !"
msgstr ""

#. module: hr_payroll_account
#: view:hr.payslip:0
msgid "Accounting Details"
msgstr ""

#. module: hr_payroll_account
#: code:addons/hr_payroll_account/hr_payroll_account.py:0
#, python-format
msgid "Please Configure Partners Payable Account!!"
msgstr ""

#. module: hr_payroll_account
#: code:addons/hr_payroll_account/hr_payroll_account.py:0
#, python-format
msgid "Integrity Error !"
msgstr "Błąd integracji !"
