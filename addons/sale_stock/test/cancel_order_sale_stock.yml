-
  In order to test the cancel sale order.
  First I confirm order.
-
  !workflow {model: sale.order, action: order_confirm, ref: sale.sale_order_8}
-
  I do a partial delivery order.
-
  !python {model: stock.picking}: |
    domain = [('origin','=','Test/001')]
    picks = self.search(cr, uid, domain, context=context)
    pick = self.browse(cr, uid, picks[-1], context=context)
    self.pool.get('stock.pack.operation').create(cr, uid, {
        'picking_id': pick.id,
        'product_id': ref('product.product_product_27'),
        'product_uom_id': ref('product.product_uom_unit'),
        'product_qty': 1
    })
    pick.do_partial(context=context)
-
  I test that I have two pickings, one done and one backorder to do
-
  !python {model: stock.picking}: |
    picks = self.search(cr, uid, [('origin','=','Test/001')])
    assert len(picks)>1, 'Only one picking, partial picking may have failed!'
    picks = self.search(cr, uid, [('origin','=','Test/001'), ('state','=','done')])
    assert len(picks)==1, 'You should have one delivery order which is done!'
    picks = self.search(cr, uid, [('origin','=','Test/001'), ('backorder_id','=',picks[0])])
    assert len(picks)==1, 'You should have one backorder to process!'
-
  I cancel the backorder
-
  !python {model: stock.picking}: |
    picks = self.search(cr, uid, [('origin','=','Test/001'),('backorder_id','<>',False)])
    self.action_cancel(cr, uid, picks)
-
  I invoice from order.
-
  !workflow {model: sale.order, action: manual_invoice, ref: sale.sale_order_8}
