-
  In order to test the cancel sale order with that user which have salesman rights.
  First I confirm order.
-
  !context
    uid: 'res_sale_stock_salesman'
-
  !workflow {model: sale.order, action: order_confirm, ref: sale.sale_order_8}
-
  I send delivery in two shipments, so I am doing a partial delivery order.
-
  !python {model: stock.picking}: |
    context={}
    delivery_orders = self.search(cr, uid, [('sale_id','=',ref("sale.sale_order_8"))])
    first_picking = self.browse(cr, uid, delivery_orders[-1], context=context)
    if first_picking.force_assign(cr, uid, first_picking):
      first_move = first_picking.move_lines[0]
      values = {'move%s'%(first_move.id): {'product_qty': 2, 'product_uom':ref('product.product_uom_unit')}}
      first_picking.do_partial(values, context=context)
-
  Now I cancel latest shipment.
-
  !python {model: stock.picking}: |
    delivery_orders = self.search(cr, uid, [('sale_id','=',ref("sale.sale_order_8"))])
    last_delivery_order_id = delivery_orders[-1]
    self.pool.get('stock.picking').signal_button_cancel(cr, uid, [last_delivery_order_id])
-
  Only Stock User can change data related warehouse therefore test with that user which have stcok user rights,
-
  !context
    uid: 'res_stock_user'
-
  I run the scheduler.
-
  !python {model: procurement.order}: |

     self.run_scheduler(cr, uid)
-
  Salesman can also check order therefore test with that user which have salesman rights,
-
  !context
    uid: 'res_sale_stock_salesman'
-
  I check order status in "Ship Exception".
-
  !assert {model: sale.order, id: sale.sale_order_8, string: Sale order should be in shipping exception}:
    - state == "shipping_except"
-
  Now I regenerate shipment.
-
  !workflow {model: sale.order, action: ship_recreate, ref: sale.sale_order_8}
-
  I check state of order in 'To Invoice'.
-
  !assert {model: sale.order, id: sale.sale_order_8, string: Sale order should be In Progress state}:
    - state == 'manual'
-
  I make invoice for order.
-
  !workflow {model: sale.order, action: manual_invoice, ref: sale.sale_order_8}
-
  To cancel the sale order from Invoice Exception, I have to cancel the invoice of sale order.
-
  !python {model: sale.order}: |
    invoice_ids = self.browse(cr, uid, ref("sale.sale_order_8")).invoice_ids
    first_invoice_id = invoice_ids[0]
    self.pool.get('account.invoice').signal_invoice_cancel(cr, uid, [first_invoice_id.id])
-
  I check order status in "Invoice Exception" and related invoice is in cancel state.
-
  !assert {model: sale.order, id: sale.sale_order_8, string: Sale order should be in Invoice Exception state}:
    - state == "invoice_except", "Order should be in Invoice Exception state after cancel Invoice"
-
  Then I click on the Ignore Exception button.
-
  !workflow {model: sale.order, action: invoice_corrected, ref: sale.sale_order_8}

-
  I check state of order in 'In Progress'.
-
  !assert {model: sale.order, id: sale.sale_order_8, string: Sale order should be In progress state}:
    - state == 'progress'
