-
  In order to test the stock module, I need to create initial physical inventory.
-
  I create a physical inventory and change the product quantity zero by making a physical inventory.
-
   !record {model: stock.inventory, id: stock_physical_inventory0}:
    name: Physical inventory
-
  I define and fill the inventory.
-
  !python {model: stock.fill.inventory}: |
    ids = self.create(cr, uid, {'location_id': ref('stock_location_components'),'set_stock_zero': True})
    self.view_init(cr, uid, ["set_stock_zero", "location_id", "recursive"])
    self.fill_inventory(cr, uid, [ids],{"full": "1", "active_model": "stock.inventory","active_id": ids,"active_ids":[ref('stock_physical_inventory0')]})
-
  I confirm the inventory.
-
  !python {model: stock.inventory}: |
   inventory = self.browse(cr, uid, [ref('stock_physical_inventory0')])[0]
   self.action_confirm(cr,uid,[inventory.id])
   assert inventory.state == 'confirm',"Inventory should be in 'Confirmed' state."
   if inventory.inventory_line_id:
     for line in inventory.inventory_line_id:
       assert line.product_qty == 0.0,"Product quantity should be Zero."
     assert len(inventory.move_ids) >= 1,"Move should be created after confirmed inventory"
     for move in  inventory.move_ids:
       assert move.location_id.id == ref('stock_location_components'),"Source location of move is not corresponding."
       assert move.location_dest_id.id == ref('location_inventory'),"Destination location of move is not corresponding."
-
  I validate the inventory after confirmation.
-
  !python {model: stock.inventory}: |
   inventory = self.browse(cr, uid, [ref('stock_physical_inventory0')])[0]
   self.action_done(cr,uid,[inventory.id])
   assert inventory.state == 'done',"Inventory should be in 'Done' state"
