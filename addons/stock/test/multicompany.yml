
-
  Set the current user as multicompany user
-
  !context
    uid: 'stock.multicompany_user'

-
  check no error on getting default stock.move values in multicompany setting
-
  !python {model: stock.move}: |
    location_obj = self.pool.get('stock.location')
    fields = ['location_id', 'location_dest_id']
    for type in ('in', 'internal', 'out'):
        context['picking_type'] = type
        defaults = self.default_get(cr, uid, ['location_id', 'location_dest_id', 'type'], context)
        for field in fields:
            if defaults[field] != False:
                try:
                    location_obj.check_access_rule(cr, uid, defaults[field], 'read', context)
                except Exception, exc:
                    assert False, "unreadable location %s: %s" % (field, exc)
        assert defaults['type'] == type, "wrong move type"

-
  check onchange_move_type does not return unreadable in multicompany setting
-
  !python {model: stock.move}: |
    location_obj = self.pool.get('stock.location')
    fields = ['location_id', 'location_dest_id']
    for type in ('in', 'internal', 'out'):
        result = self.onchange_move_type(cr, uid, [], type, context)['value']
        for field in fields:
            if defaults[field] != False:
                try:
                    location_obj.check_access_rule(cr, uid, defaults[field], 'read', context)
                except Exception, exc:
                    assert False, "unreadable location %s: %s" % (field, exc)

-
  check default location readability for stock_fill_inventory in multicompany setting
-
  !python {model: stock.fill.inventory}: |
    location_obj = self.pool.get('stock.location')
    defaults = self.default_get(cr, uid, ['location_id'], context)
    if defaults['location_id'] != False:
        try:
            location_obj.check_access_rule(cr, uid, defaults['location_id'], 'read'
        except Exception, exc:
            assert False, "unreadable source location: %s" % exc

-
  check default locations for warehouse in multicompany setting
-
  !python {model: stock.warehouse}: |
    fields = ['lot_input_id', 'lot_stock_id', 'lot_output_id']
    defaults = self.default_get(cr, uid, fields, context)
    for field in fields:
        for field in fields:
            if defaults[field] != False:
                try:
                    location_obj.check_access_rule(cr, uid, defaults[field], 'read', context)
                except Exception, exc:
                    assert False, "unreadable default %s: %s" % (field, exc)
