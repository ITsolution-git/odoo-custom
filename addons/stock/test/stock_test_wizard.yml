
-
  I create stock.tracking record.
-
  !record {model: stock.tracking, id: stock_tracking_0}:
    move_ids:
      - product_id: product.product_product_pc1
        product_qty: 5.0
        product_uom: product.product_uom_unit
        location_id : stock.stock_location_suppliers
        location_dest_id: stock.stock_location_shop0
        name : '[PC1] Basic PC'
        date_expected : !eval time.strftime('%Y-%m-%d %H:%M:%S')
    name: 0000007
    active: True
    date: !eval time.strftime('%Y-%m-%d %H:%M:%S')

-
  I trace the information of a product.
-
  !python {model: stock.tracking}: |
     self.name_get(cr, uid, [ref('stock_tracking_0')],{'lang': 'en_US', 'tz': False, 'active_model': 'ir.ui.menu', 'field': '', 'type': ''})
     self.action_traceability(cr,uid,[ref('stock_tracking_0')], {'lang': 'en_US', 'tz': False, 'active_model': 'ir.ui.menu', 'field': '', 'type': ''})

-
  I creat stock.move Record
-
  !record {model: stock.move, id: stock_move_test0}:
    location_dest_id: stock.stock_location_shop0
    product_id: product.product_product_pc1
    product_qty: 5.0
    product_uom: product.product_uom_unit
    date_expected : !eval time.strftime('%Y-%m-%d %H:%M:%S')
    location_id : stock.stock_location_suppliers
    name : '[PC1] Basic PC'
    company_id: base.main_company
    product_uos_qty : 5.0
    name: IN/00010
    state: assigned

-
  I Check  onchange function of stock.move object
-
  !python {model: stock.move }: |
    self.onchange_lot_id(cr, uid, [ref("stock_move_test0")], ref("stock.stock_production_lot0"), 5, ref("stock.stock_location_suppliers"), ref("product.product_product_pc1"), ref("product.product_uom_unit"), None)
    self.onchange_quantity(cr, uid, [ref("stock_move_test0")], ref("product.product_product_pc1"), 10, ref("product.product_uom_unit"), ref("product.product_uom_unit"))
    self.onchange_uos_quantity(cr, uid, [ref("stock_move_test0")], ref("product.product_product_pc1"), 10, ref("product.product_uom_unit"), ref("product.product_uom_unit"))
    self.onchange_product_id(cr, uid, [ref("stock_move_test0")], ref("product.product_product_pc1"), ref("stock.stock_location_suppliers"), ref("stock.stock_location_shop0"), False)

-
  I Check _getSSCC  and action_partial_move function of stock.move object
-
  !python {model: stock.move }: |
    context = {"lang": 'en_US', "default_location_dest_id": ref("stock.stock_location_shop0"), "active_model":
      "stock.move", "search_default_receive": 1, 'product_receive': True, "default_location_id": ref("stock.stock_location_suppliers"),"active_ids":[ref("stock_move_test0")], "tz": False, "active_id":ref("stock_move_test0")}
    self._getSSCC(cr, uid , context)
    self.action_partial_move(cr, uid , [ref("stock_move_test0")], context)

-
  I check write function
-
  !python {model: stock.move }: |
    vals = {"product_qty" : 2, "product_uos_qty": 2}
    self.write(cr, uid, [ref("stock_move_test0")], vals, {"lang": 'en_US', "default_location_dest_id": ref("stock.stock_location_shop0"), "active_model":
      "ir.ui.menu", "search_default_receive": 1, 'product_receive': True, "default_location_id": ref("stock.stock_location_suppliers"),"active_ids":[ref("stock_move_tree")], "tz": False, "active_id":ref("stock_move_tree")})

-
  I check default function
-
  !python {model: stock.move }: |
    self.name_get(cr, uid, [ref("stock_move_test0")], {"lang": 'en_US', "default_location_dest_id": ref("stock.stock_location_shop0"), "active_model":
      "stock.move", "search_default_receive": 1, 'product_receive': True, "default_location_id": ref("stock.stock_location_suppliers"),"active_ids":[ref("stock_move_test0")], "tz": False, "active_id":ref("stock_move_test0")})
    ctx = {"lang": 'en_US', "default_location_dest_id": ref("stock.stock_location_shop0"), "active_model":
      "ir.ui.menu", "search_default_receive": 1, 'product_receive': True, "default_location_id": ref("stock.stock_location_suppliers"),"active_ids":[ref("view_move_form_reception_picking")], "tz": False, "active_id":ref("view_move_form_reception_picking")}
    self._default_location_destination(cr, uid, ctx)
    self._default_location_source(cr, uid, ctx)


