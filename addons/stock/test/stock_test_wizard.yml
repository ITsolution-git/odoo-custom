
-
  I created picking record with move lines for test unlink
-
  !record {model: stock.picking, id: stock_picking_unlink0}:
    address_id: base.main_address
    company_id: base.main_company
    invoice_state: 2binvoiced
    move_lines:
      - location_dest_id: stock.stock_location_shop0
        product_id: product.product_product_pc1
        product_qty: 30.0
        product_uom: product.product_uom_unit
        date_expected : !eval time.strftime('%Y-%m-%d %H:%M:%S')
        location_id : stock.stock_location_suppliers
        name : '[PC1] Basic PC'
        product_uos_qty : 30.0
    name: IN/00010
    type: in
    state: draft

-
  I Unlink above record
-
  !python {model: stock.picking}: |
    self.unlink(cr, uid, [ref("stock_picking_unlink0")], {"lang": "en_US", "search_default_available":
      1, "tz": False, "active_model": "ir.ui.menu", "section_id": False, "contact_display":
      "partner_address", "active_ids": [ref("stock.menu_action_picking_tree4")],
      "active_id": ref("stock.menu_action_picking_tree4"), })

-
  I created picking record with move lines for move in cancel
-
  !record {model: stock.picking, id: stock_picking_cancel0}:
    address_id: base.main_address
    company_id: base.main_company
    invoice_state: 2binvoiced
    move_lines:
      - location_dest_id: stock.stock_location_shop0
        product_id: product.product_product_pc1
        product_qty: 30.0
        product_uom: product.product_uom_unit
        date_expected : !eval time.strftime('%Y-%m-%d %H:%M:%S')
        location_id : stock.stock_location_suppliers
        name : '[PC1] Basic PC'
        product_uos_qty : 30.0
    name: IN/00010
    type: in
    state: assigned

-
   I cancel the picking
-
  !python {model: stock.picking}: |
    self.action_cancel(cr, uid, [ref("stock_picking_cancel0")], {"lang": "en_US", "search_default_available":
      1, "tz": False, "active_model": "ir.ui.menu", "section_id": False, "contact_display":
      "partner_address", "active_ids": [ref("stock.menu_action_picking_tree4")],
      "active_id": ref("stock.menu_action_picking_tree4"), })

-
  In order to test picking i created picking record with move lines
-
  !record {model: stock.picking, id: stock_picking_in0}:
    address_id: base.main_address
    company_id: base.main_company
    invoice_state: 2binvoiced
    move_lines:
      - location_dest_id: stock.stock_location_shop0
        product_id: product.product_product_pc1
        product_qty: 30.0
        product_uom: product.product_uom_unit
        date_expected : !eval time.strftime('%Y-%m-%d %H:%M:%S')
        location_id : stock.stock_location_suppliers
        name : '[PC1] Basic PC'
        product_uos_qty : 30.0
    name: IN/00010
    type: in

-
  I performed an osv_memory action draft_validate on module stock.picking
-
  !python {model: stock.picking}: |
    self.draft_validate(cr, uid, [ref("stock_picking_in0")], {"lang": "en_US", "search_default_available":
      1, "tz": False, "active_model": "ir.ui.menu", "section_id": False, "contact_display":
      "partner_address", "active_ids": [ref("stock.menu_action_picking_tree4")],
      "active_id": ref("stock.menu_action_picking_tree4"), })

-
  I create a record for partial picking.
-
  !record {model: stock.partial.picking, id: stock_partial_picking_0}:
    date: !eval time.strftime('%Y-%m-%d %H:%M:%S')
-
  I make picking order Done.
-
  !python {model: stock.partial.picking}: |
     pick_obj = self.pool.get('stock.picking')
     partial = self.browse(cr, uid, ref('stock_partial_picking_0'), context)
     partial_datas = {
            'delivery_date' : partial.date
     }
     for pick in pick_obj.browse(cr, uid, [ref('stock_picking_in0')]):
        for m in pick.move_lines:
           partial_datas['move%s'%(m.id)] = {
                    'product_id' : m.product_id.id,
                    'product_qty' : m.product_qty,
                    'product_uom' : m.product_uom.id
           }
     context = {"lang": "en_US", "search_default_available":
      1, "tz": False, "active_model": "ir.ui.menu", "contact_display": "partner",
      "active_ids": [ref('stock_picking_in0')], "active_id": ref("purchase.menu_action_picking_tree4"),
      }
     self.fields_view_get(cr, uid, False,"form", context)
     self.do_partial(cr, uid, [ref('stock_partial_picking_0')], context)

-
  I create stock.tracking record.
-
  !record {model: stock.tracking, id: stock_tracking_0}:
    move_ids:
      - product_id: product.product_product_pc1
        product_qty: 5.0
        product_uom: product.product_uom_unit
        location_id : stock.stock_location_suppliers
        location_dest_id: stock.stock_location_shop0
        name : '[PC1] Basic PC'
        date_expected : !eval time.strftime('%Y-%m-%d %H:%M:%S')
    name: 0000007
    active: True
    date: !eval time.strftime('%Y-%m-%d %H:%M:%S')

-
  I trace the information of a product.
-
  !python {model: stock.tracking}: |
     self.name_get(cr, uid, [ref('stock_tracking_0')],{'lang': 'en_US', 'tz': False, 'active_model': 'ir.ui.menu', 'field': '', 'type': ''})
     self.action_traceability(cr,uid,[ref('stock_tracking_0')], {'lang': 'en_US', 'tz': False, 'active_model': 'ir.ui.menu', 'field': '', 'type': ''})

-
  I creat stock.move Record
-
  !record {model: stock.move, id: stock_move_test0}:
    location_dest_id: stock.stock_location_shop0
    product_id: product.product_product_pc1
    product_qty: 5.0
    product_uom: product.product_uom_unit
    date_expected : !eval time.strftime('%Y-%m-%d %H:%M:%S')
    location_id : stock.stock_location_suppliers
    name : '[PC1] Basic PC'
    company_id: base.main_company
    product_uos_qty : 5.0
    name: IN/00010
    state: assigned

-
  I Check  onchange function of stock.move object
-
  !python {model: stock.move }: |
    self.onchange_lot_id(cr, uid, [ref("stock_move_test0")], ref("stock.stock_production_lot0"), 5, ref("stock.stock_location_suppliers"), ref("product.product_product_pc1"), ref("product.product_uom_unit"), None)
    self.onchange_quantity(cr, uid, [ref("stock_move_test0")], ref("product.product_product_pc1"), 10, ref("product.product_uom_unit"), ref("product.product_uom_unit"))
    self.onchange_uos_quantity(cr, uid, [ref("stock_move_test0")], ref("product.product_product_pc1"), 10, ref("product.product_uom_unit"), ref("product.product_uom_unit"))
    self.onchange_product_id(cr, uid, [ref("stock_move_test0")], ref("product.product_product_pc1"), ref("stock.stock_location_suppliers"), ref("stock.stock_location_shop0"), False)

-
  I Check _getSSCC  and action_partial_move function of stock.move object
-
  !python {model: stock.move }: |
    context = {"lang": 'en_US', "default_location_dest_id": ref("stock.stock_location_shop0"), "active_model":
      "stock.move", "search_default_receive": 1, 'product_receive': True, "default_location_id": ref("stock.stock_location_suppliers"),"active_ids":[ref("stock_move_test0")], "tz": False, "active_id":ref("stock_move_test0")}
    self._getSSCC(cr, uid , context)
    self.action_partial_move(cr, uid , [ref("stock_move_test0")], context)

-
  I check write function
-
  !python {model: stock.move }: |
    vals = {"product_qty" : 2, "product_uos_qty": 2}
    self.write(cr, uid, [ref("stock_move_test0")], vals, {"lang": 'en_US', "default_location_dest_id": ref("stock.stock_location_shop0"), "active_model":
      "ir.ui.menu", "search_default_receive": 1, 'product_receive': True, "default_location_id": ref("stock.stock_location_suppliers"),"active_ids":[ref("stock_move_tree")], "tz": False, "active_id":ref("stock_move_tree")})

-
  I check default function
-
  !python {model: stock.move }: |
    self.name_get(cr, uid, [ref("stock_move_test0")], {"lang": 'en_US', "default_location_dest_id": ref("stock.stock_location_shop0"), "active_model":
      "stock.move", "search_default_receive": 1, 'product_receive': True, "default_location_id": ref("stock.stock_location_suppliers"),"active_ids":[ref("stock_move_test0")], "tz": False, "active_id":ref("stock_move_test0")})
    self._default_location_destination(cr, uid,{"lang": 'en_US', "default_location_dest_id": ref("stock.stock_location_shop0"), "active_model":
      "ir.ui.menu", "search_default_receive": 1, 'product_receive': True, "default_location_id": ref("stock.stock_location_suppliers"),"active_ids":[ref("view_move_form_reception_picking")], "tz": False, "active_id":ref("view_move_form_reception_picking")})
    self._default_location_source(cr, uid,{"lang": 'en_US', "default_location_dest_id": ref("stock.stock_location_shop0"), "active_model":
      "ir.ui.menu", "search_default_receive": 1, 'product_receive': True, "default_location_id": ref("stock.stock_location_suppliers"),"active_ids":[ref("view_move_form_reception_picking")], "tz": False, "active_id":ref("view_move_form_reception_picking")})
-
  I confirm the move.
-
  !python {model: stock.move}: |
   self.action_confirm(cr,uid,[ref('stock_move_test0')])
   self.action_assign(cr,uid,[ref('stock_move_test0')])

-
  I create a record for partial move.
-
  !record {model: stock.partial.move, id: stock_partial_move_0}:
    date: !eval time.strftime('%Y-%m-%d %H:%M:%S')

-
  I done stock.move record.
-
  !python {model: stock.partial.move }: |
    import time
    pick_obj = self.pool.get('stock.picking')
    move_obj = self.pool.get('stock.move')
    pick=pick_obj.browse(cr,uid,ref('stock_picking_in0'))
    search_id = move_obj.search(cr, uid, [('picking_id', '=', pick.id)])
    partial_datas={}
    for move in pick.move_lines:
        partial_datas['move%s'%(move.id)]= {
          'quantity': move.product_qty,
          'product_uom': move.product_uom.id,
          'prodlot_id': move.prodlot_id and move.prodlot_id.id or False,
          'wizard_id': ref('stock_partial_move_0'),
        }
    context = {"lang": 'en_US', "default_location_dest_id": ref("stock.stock_location_shop0"),
     "active_model": "stock.move", "search_default_receive": 1, 'product_receive': True, "default_location_id": ref("stock.stock_location_suppliers"),"active_ids": search_id, "tz": False, "active_id":search_id[0]}
    self.fields_view_get(cr, uid, False,"form", context)
    self.do_partial(cr, uid, [ref('stock_partial_move_0')], context)
    