
-
  In order to test picking i created picking record with move lines
-
  !record {model: stock.picking, id: stock_picking_in0}:
    address_id: base.main_address
    company_id: base.main_company
    invoice_state: 2binvoiced
    move_lines:
      - location_dest_id: stock.stock_location_shop0
        product_id: product.product_product_pc1
        product_qty: 30.0
        product_uom: product.product_uom_unit
        date_expected : '2011-01-05 12:58:07'
        location_id : stock.stock_location_suppliers
        name : '[PC1] Basic PC'
        product_uos_qty : 30.0
    name: IN/00010
    type: in

-
  I performed an osv_memory action draft_validate on module stock.picking
-
  !python {model: stock.picking}: |
    self.draft_validate(cr, uid, [ref("stock_picking_in0")], {"lang": "en_US", "search_default_available":
      1, "tz": False, "active_model": "ir.ui.menu", "section_id": False, "contact_display":
      "partner_address", "active_ids": [ref("stock.menu_action_picking_tree4")],
      "active_id": ref("stock.menu_action_picking_tree4"), })

-
  I confirm the picking.
-

  !python {model: stock.picking }: |
    import time
    pick=self.browse(cr,uid,ref('stock_picking_in0'))
    partial_datas={}
    for move in pick.move_lines:
        partial_datas['move%s'%(move.id)]= {
          'product_id': move.product_id,
          'product_qty': move.product_qty,
        }
    self.do_partial(cr, uid, [pick.id],partial_datas)
-
  I Performing an osv_memory action create_invoice on module stock.invoice.onshipping
-
  !python {model: stock.invoice.onshipping}: |
    pick=self.browse(cr,uid,ref('stock_picking_in0'))
    invoice_line_id = self.pool.get('stock.invoice.onshipping').create(cr, uid,{}, {"lang": 'en_US', "active_model":
      "stock.picking", "active_ids": [pick.id], "tz": False, "active_id":pick.id})
    self.open_invoice(cr, uid, [invoice_line_id], {"lang": "en_US",
      "search_default_available": 1, "inv_type": "in_invoice" , "tz": False, "active_model": "stock.picking",
      "contact_display": "partner_address", "active_ids": [ref("stock_picking_in0")],
      "active_id": ref("stock_picking_in0"), })
-
  I Performed an osv_memory action move_scrap and consume move on module stock.move.scrap
-

  !python {model: stock.picking }: |
    import time
    location_obj = self.pool.get('stock.location')
    scrpaed_location_ids = location_obj.search(cr, uid, [('scrap_location','=',True)])
    pick=self.browse(cr,uid,ref('stock_picking_in0'))
    scrap_obj=self.pool.get('stock.move.scrap')
    consume_obj=self.pool.get('stock.move.consume')
    partial_datas={}
    move=pick.move_lines[0]
    partial_datas= {
          'product_id': move.product_id.id,
          'location_id': scrpaed_location_ids[0],
          'product_qty': move.product_qty,
          'product_uom': move.product_uom.id,
      }
    scrap_id = self.pool.get('stock.move.scrap').create(cr, uid, partial_datas)
    scrap_obj.move_scrap(cr, uid, [scrap_id], {"lang": "en_US", "tz":
    False, "active_model": "stock.move", "scrap": True, "active_ids": [move.id],
    "active_id": move.id, })
    consume_id = self.pool.get('stock.move.consume').create(cr, uid, partial_datas)
    consume_obj.do_move_consume(cr, uid, [consume_id], {"lang": "en_US", "tz":
    False, "active_model": "stock.move", "scrap": True, "active_ids": [move.id],
    "active_id": move.id, })
-
  I return the picking.
-

  !python {model: stock.picking }: |
    import time
    pick=self.browse(cr,uid,ref('stock_picking_in0'))
    partial_datas={}
    partial_pick_id = self.pool.get('stock.return.picking').create(cr, uid,{}, {"lang": 'en_US', "active_model":
      "stock.picking", "active_ids": [pick.id], "tz": False, "active_id":pick.id})
    for move in pick.move_lines:
      partial_datas= {
          'product_id': move.product_id.id,
          'quantity': move.product_qty,
      }
    self.pool.get('stock.return.picking').create_returns(cr, uid, [partial_pick_id], {"lang": 'en_US', "active_model":
      "stock.picking", "active_ids": [pick.id], "tz": False, "active_id":pick.id})
    
-
  I create stock.move record.
-

  !python {model: stock.move }: |
    import time
    pick_obj = self.pool.get('stock.picking')
    pick=pick_obj.browse(cr,uid,ref('stock_picking_in0'))
    partial_move_id = self.pool.get('stock.partial.move').create(cr, uid,{})
    search_id = self.search(cr, uid, [('picking_id', '=', pick.id)])
    partial_datas={}
    for move in pick.move_lines:
        partial_datas['move%s'%(move.id)]= {
          'quantity': move.product_qty,
          'product_uom': move.product_uom.id,
          'prodlot_id': move.prodlot_id and move.prodlot_id.id or False,
          'wizard_id': partial_move_id,
        }
    self.do_partial(cr, uid, [partial_move_id],partial_datas,{"lang": 'en_US', "active_model":
      "stock.move", 'search_default_receive': 1, 'product_receive': True, "active_ids": search_id, "tz": False, "active_id":search_id[0]})
    