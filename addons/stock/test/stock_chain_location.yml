-
  In order to test chained locations, I update the stock of product.
-
  I update product quantity and check the stock moves are properly done or not
-
  !python {model: stock.change.product.qty}: |
    product = self.pool.get('product.product').browse(cr, uid, ref('product.product_product_sprouting'))
    fields = {'location_id' : ref('convenience_location_stock'), 'new_quantity': 1, 'product_id': product.id}
    ids = self.create(cr, uid, fields)
    self.change_product_qty(cr, uid, [ids], {'active_model':'product.product', 'active_id': product.id, 'active_ids':[product.id]})
-
  I check stock moves of product.
-
  !python {model: stock.move}: |
    ids = self.search(cr, uid, [('product_id','=',ref('product.product_product_sprouting'))])
    for i in self.browse(cr, uid, ids):
      assert i.product_qty >= 1,"Product is not correspond"
      if i.location_id.name == 'Inventory loss':
        assert i.location_dest_id.name == 'Convenience Store',"Destination location must be 'Refrigerated Vehicles'"
      if i.location_id.name == 'Convenience Store':
        assert i.location_dest_id.name == 'Cold Storage',"Destination location must be 'Cold Storage' because the source location is 'Refrigerated Vehicles'"
      if i.location_id.name == 'Cold Storage':
        assert i.location_dest_id.name == 'Customers',"Destination location must be 'Customers' because the source location is 'Cold Storage'"
