-
  In order to test the cancel stock. I start from cancelling the incoming shipment.
-
  First, I create copies of incoming shipment.
-
  !python {model: stock.picking}: |
    stock = self.pool.get('stock.move')
    context.update({'active_id':ref('stock.stock_picking_1')})
    id1 = self.copy(cr, uid, ref('stock.stock_picking_1'), context)
    id2 = self.copy(cr, uid, ref('stock.stock_picking_1'), context)
    id3 = self.copy(cr, uid, ref('stock.stock_picking_1'), context)
    context.update({'id1':id1,'id2':id2,'id3':id3})
-
  Now, I cancel all related moves of picking so automatically picking goes to cancelled state..
-
  !python {model: stock.picking}: |
    import netsvc
    wf_service = netsvc.LocalService("workflow")
    stock = self.pool.get('stock.move')
    pick = self.browse(cr, uid, context.get('id1'))
    move_ids = stock.search(cr, uid, [('picking_id','=',pick.name)])
    for move in move_ids:
      wf_service.trg_validate(uid, 'stock.move', move, 'action_confirm', cr)
      stock.force_assign(cr, uid, move)
      wf_service.trg_validate(uid, 'stock.move', move, 'action_cancel', cr)
-
  Now, directlly cancel the picking.
-
  !python {model: stock.picking}: |
    import netsvc
    wf_service = netsvc.LocalService("workflow")
    pick_id = context.get('id2')
    wf_service.trg_validate(uid, 'stock.picking', pick_id, 'button_cancel', cr)
-
  I return the picking.
-
  !python {model: stock.picking}: |
    copy_id = context.get('id3')
    self.draft_force_assign(cr, uid, [copy_id])
    self.force_assign(cr, uid, [copy_id])
    stock_partial_picking = self.pool.get('stock.partial.picking')
    context.update({'active_model': 'stock.picking','active_ids': [copy_id],'active_id': copy_id})
    partial_id = stock_partial_picking.create(cr, uid, {}, context=context)
    stock_partial_picking.do_partial(cr, uid, [partial_id], context)
    return_pick_id = self.pool.get('stock.return.picking').create(cr, uid,{}, context)
    self.pool.get('stock.return.picking').create_returns(cr, uid, [return_pick_id], context)
