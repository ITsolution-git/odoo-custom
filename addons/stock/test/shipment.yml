-
  Only stock manager can confirm shipment and picking, so let's check data with giving the access rights of manager
-
  !context
    uid: 'res_users_stock_manager'
-
  I confirm outgoing shipment of 130 unit 15” LCD Monitor.
-
  !workflow {model: stock.picking, action: button_confirm, ref: outgoing_shipment}
-
  I check shipment details after confirmed.
-
  !python {model: stock.picking}: |
    shipment = self.browse(cr, uid, ref("outgoing_shipment"))
    assert shipment.state == "confirmed", "Shipment should be confirmed."
    for move_line in shipment.move_lines:
        assert move_line.state == "confirmed", "Move should be confirmed."

-
  Now I check vitual stock of 15” LCD Monitor after confirmed outgoing shipment.
-
  !python {model: product.product}: |
    product = self.browse(cr, uid, ref('product_product_6'), context=context)
    product.virtual_available == -30, "Vitual stock is not updated."

-
  I confirm incomming shipment of 50 unit 15” LCD Monitor.
-
  !workflow {model: stock.picking, action: button_confirm, ref: incomming_shipment}
-
  I receive 40 unit 15” LCD Monitor so I make backorder of incomming shipment for 40 unit.
-
  !python {model: stock.partial.picking}: |
    context.update({'active_model': 'stock.picking', 'active_id': ref('incomming_shipment'), 'active_ids': [ref('incomming_shipment')]})
-
  !record {model: stock.partial.picking, id: partial_incomming}:
    move_ids:
        - quantity: 40
          product_id: product_product_6
          product_uom: product.product_uom_unit
          move_id: incomming_shipment_monitor
          location_id: stock_location_3
          location_dest_id: location_monitor
-
  !python {model: stock.partial.picking }: |
    self.do_partial(cr, uid, [ref('partial_incomming')], context=context)
-
  I check backorder shipment after received partial shipment.
-
  !python {model: stock.picking}: |
    shipment = self.browse(cr, uid, ref("incomming_shipment"))
    backorder = shipment.backorder_id
    assert backorder, "Backorder should be created after partial shipment."
    assert backorder.state == 'done', "Backorder should be close after received."
    for move_line in backorder.move_lines:
        assert move_line.product_qty == 40, "Qty in backorder does not correspond."
        assert move_line.state == 'done', "Move line of backorder should be closed."
-
  I receive another 10 unit 15” LCD Monitor.
-
  !record {model: stock.partial.picking, id: partial_incomming}:
    move_ids:
        - quantity: 10
          product_id: product_product_6
          product_uom: product.product_uom_unit
          move_id: incomming_shipment_monitor
          location_id: stock_location_3
          location_dest_id: location_monitor
-
  !python {model: stock.partial.picking }: |
    self.do_partial(cr, uid, [ref('partial_incomming')], context=context)

-
  I check incomming shipment after received.
-
  !python {model: stock.picking}: |
    shipment = self.browse(cr, uid, ref("incomming_shipment"))
    assert shipment.state == 'done', "shipment should be close after received."
    for move_line in shipment.move_lines:
        assert move_line.product_qty == 10, "Qty does not correspond."
        assert move_line.product_id.virtual_available == 20, "Virtual stock does not correspond."
        assert move_line.state == 'done', "Move line should be closed."

-
  I return last incomming shipment for 10 unit 15” LCD Monitor.
-
  !record {model: stock.return.picking, id: return_incomming}:
    invoice_state: none
-
  !python {model: stock.return.picking }: |
    # this work without giving the id of the picking to return, magically, thanks to the context
    self.create_returns(cr, uid, [ref('return_incomming')], context=context)
-
  I cancel incomming shipment after return it.
-
  !python {model: stock.picking}: |
    # the cancel is not on the return, but on the incomming shipment (which now has a quantity of 10, thanks to the 
    # backorder). This situation is a little weird as we returned a move that we finally cancelled... As result, only
    # 30Unit from the original 50Unit will be counted in the stock (50 - 10 (cancelled quantity) - 10 (returned quantity))
    self.action_cancel(cr, uid, [ref("incomming_shipment")], context=context)
-
  I make invoice of backorder of incomming shipment.
-
  !python {model: stock.invoice.onshipping}: |
    shipment = self.pool.get('stock.picking').browse(cr, uid, ref("incomming_shipment"))
    context.update({'active_model': 'stock.picking', 'active_id': shipment.backorder_id.id, 'active_ids': [shipment.backorder_id.id]})
-
  !record {model: stock.invoice.onshipping, id: invoice_incomming}:
    group: False
-
  !python {model: stock.invoice.onshipping }: |
    self.create_invoice(cr, uid, [ref('invoice_incomming')], context=context)
-
  I check invoice state of backorder of incomming shipment.
-
  !python {model: stock.picking}: |
    shipment = self.browse(cr, uid, ref("incomming_shipment"))
    assert shipment.backorder_id.invoice_state == 'invoiced', 'Invoice state is not upadted.'
-
  I check available stock after received incomming shipping.
-
  !python {model: product.product}: |
    product = self.browse(cr, uid, ref('product_product_6'), context=context)
    assert product.qty_available == 140, "Stock does not correspond."
    assert product.virtual_available == 0, "Vitual stock does not correspond."
-
  I check the stock valuation account entries.
-
  !python {model: account.move}: |
    incomming_shipment = self.pool.get('stock.picking').browse(cr, uid, ref('incomming_shipment'), context=context)
    account_move_ids = self.search(cr, uid, [('ref','=',incomming_shipment.name)])
    assert len(account_move_ids), "account move should be created."
    account_move = self.browse(cr, uid, account_move_ids[0], context=context)
    assert len(account_move.line_id) == len(incomming_shipment.move_lines) + 1, 'accuont entries are not correspond.'
    for account_move_line in account_move.line_id:
        for stock_move in incomming_shipment.move_lines:
            if account_move_line.account_id.id == stock_move.product_id.property_stock_account_input.id:
                assert account_move_line.credit == 10000.0, "Credit amount does not correspond."
                assert account_move_line.debit == 0.0, "Debit amount does not correspond."
            else:
                assert account_move_line.credit == 0.0, "Credit amount does not correspond."
                assert account_move_line.debit == 10000.0, "Debit amount does not correspond."
-
  I check outgoing shipment after stock availablity in Chicago shop.
-
  !python {model: stock.picking}: |
    shipment = self.browse(cr, uid, ref("outgoing_shipment"), context=context)
    self.pool.get('stock.move').action_assign(cr, uid, [x.id for x in shipment.move_lines]) 
    assert shipment.state == "assigned", "Shipment should be assigned."
    for move_line in shipment.move_lines:
        assert move_line.state == "assigned", "Move should be assigned."
    self.force_assign(cr, uid, [shipment.id])
-
  I deliver 5 unit 15” LCD Monitor to customer so I make partial deliver
-
  !python {model: stock.partial.move}: |
    context.update({'active_model': 'stock.move', 'active_id': ref('outgoing_shipment_monitor'), 'active_ids': [ref('outgoing_shipment_monitor')]})
-
  !record {model: stock.partial.move, id: partial_outgoing_monitor}:
    move_ids:
        - quantity: 5
          product_id: product_product_6
          product_uom: product.product_uom_unit
          move_id: outgoing_shipment_monitor
          location_id: location_monitor
          location_dest_id: stock_location_output
-
  !python {model: stock.partial.move }: |
    self.do_partial(cr, uid, [ref('partial_outgoing_monitor')], context=context)

-
  I packing outgoing shipment into box per 10 unit with unique tracking lot.
-
  !python {model: stock.move}: |
    stock_split = self.pool.get('stock.split.into')
    move = self.browse(cr, uid, ref('outgoing_shipment_monitor'), context=context)
    context.update({'active_model': 'stock.move', 'active_id': move.id, 'active_ids': [move.id]})
    total_qty = move.product_qty
    split_qty = 10
    while(total_qty>0):
        split_id = stock_split.create(cr, uid, {'quantity': split_qty}, context=context)
        stock_split.split(cr, uid, [split_id], context=context)
        total_qty -= split_qty
-
  I deliver outgoing shipment.
-
  !python {model: stock.partial.picking}: |
    context.update({'active_model': 'stock.picking', 'active_id': ref('outgoing_shipment'), 'active_ids': [ref('outgoing_shipment')]})
-
  !record {model: stock.partial.picking, id: partial_outgoing}:
    picking_id: outgoing_shipment
-
  !python {model: stock.partial.picking }: |
    self.do_partial(cr, uid, [ref('partial_outgoing')], context=context)

-
  I check outgoing shipment after deliver.
-
  !python {model: stock.picking}: |
    shipment = self.browse(cr, uid, ref("outgoing_shipment"), context=context)
    assert shipment.state == "done", "Shipment should be closed."
    for move_line in shipment.move_lines:
        assert move_line.state == "done", "Move should be closed."
-
  I check availaible stock after deliver.
-
  !python {model: product.product}: |
    product = self.browse(cr, uid, ref('product_product_6'), context=context)
    assert round(product.qty_available, 2) == 10, "Stock does not correspond."
   
