-
  I update the current stock of the product '[CPU2]High speed processor config'.
-
  I assignd the location.
-
  !record {model: stock.warehouse, id: stock.warehouse0}:
    lot_stock_id: stock_location_stock
-
  I create stock production lot for product '[CPU2]High speed processor config'.
-
  !record {model: stock.production.lot, id: stock_production_lot0}:
    product_id: product.product_product_cpu2
    date: !eval time.strftime('%Y-%m-%d %H:%M:%S')
    name: 0000001
-
  I take '[CPU2]High speed processor config' product and with the help of 'Change Product Quantity' wizard update the product stock.
-
  !python {model: product.product}: |
    change_qty = self.pool.get('stock.change.product.qty')
    product = self.browse(cr, uid, ref('product.product_product_cpu2'))
    ids = change_qty.create(cr, uid, {'location_id' : ref('stock_location_stock'), 'new_quantity': 5, 'product_id': product.id, 'prodlot_id': ref('stock.stock_production_lot0')})
    change_qty.change_product_qty(cr, uid, [ids], {'active_model':'product.product', 'active_id': product.id, 'active_ids':[product.id]})
    assert product.qty_available == 5,'Product Quantity is not Updated'
-
  I trace the stock production lot for '[CPU2]High speed processor config' product.
-
  !python {model: stock.production.lot }: |
    self.action_traceability(cr,uid,[ref('stock_production_lot0')], {'lang': 'en_US', 'tz': False, 'active_model': 'ir.ui.menu', 'field': '', 'type': ''})
-
  I check that physical inventory created.
-
  !python {model: stock.inventory.line}: |
    ids = self.search(cr, uid, [('product_id','=',ref('product.product_product_cpu2'))])
    inventory = self.browse(cr, uid, ids)[0]
    assert inventory.product_qty == 5,'product Quantity is not correspond'
    assert inventory.location_id.id == ref('stock_location_stock'), 'Location is not correspond'
    assert inventory.state == 'done', 'State should be in Done state'
-
  I check that stock moves created.
-
  !python {model: stock.move}: |
    ids = self.search(cr, uid, [('product_id','=',ref('product.product_product_cpu2'))])
    assert [x.state for x in self.browse(cr, uid, ids) if x.state == 'done'], 'stock moves should be done!'    

-
  For testing the process of return picking, I create copy of delivery order.
-
  !python {model: stock.picking}: |
    context.update({'active_id':ref('stock.stock_picking_1')})
    new_id = self.copy(cr, uid, ref('stock.stock_picking_1'), context)
    context.update({'new_id':new_id})
-
  Now,I return the delivery order.
-
  !python {model: stock.picking}: |
    copy_id = context.get('new_id')
    self.draft_force_assign(cr, uid, [copy_id])
    self.force_assign(cr, uid, [copy_id])
    stock_partial_picking = self.pool.get('stock.partial.picking')
    context.update({'active_model': 'stock.picking','active_ids': [copy_id],'active_id': copy_id})
    partial_id = stock_partial_picking.create(cr, uid, {}, context=context)
    stock_partial_picking.do_partial(cr, uid, [partial_id], context)
    return_pick_id = self.pool.get('stock.return.picking').create(cr, uid,{}, context)
    self.pool.get('stock.return.picking').create_returns(cr, uid, [return_pick_id], context)

