- 
  In order to test partial delivery and back orders, I will use a delivery order with 5 CPU1 and 5 CPU3
-
  I confirm and force the availability of all products on the picking OUT001
- 
  !python {model: stock.picking}: |
    self.draft_force_assign(cr, uid, [ref('stock.stock_picking_1')], {})
    self.force_assign(cr, uid, [ref('stock.stock_picking_1')], {})
-
  After having confirmed the picking and its two lines, I add a new move line in draft state with 7 FAN2
-
  !record {model: stock.move, id: stock_move_3}:
    product_id: product.product_product_fan2
    product_uom: product.product_uom_unit
    product_uos_qty: 7.0
    product_qty: 7.0
    location_dest_id: stock.stock_location_customers
    location_id: stock.stock_location_stock
    name: CPU3, Processor AMD Athlon XP 1800
    picking_id: stock_picking_1
- |
  I click on 'Process Now' to process the delivery order and I change quantities to:
  7 CPU1, 0 CPU3, 3 FAN2 and a new product of 4 PC1
-
  !python {model: stock.picking}: |
    result = self.action_process(cr, uid, [ref('stock.stock_picking_1')], {})['res_id']
    pick = self.pool.get('stock.partial.picking').browse(cr, uid, result, {})
    lobj = self.pool.get('stock.partial.picking.line')
    for line in pick.move_ids:
        if line.product_id.id == ref('product.product_product_cpu3'):
            lobj.write(cr, uid, [line.id], {
                'quantity': 0.0
            }, {})
        elif line.product_id.id == ref('product.product_product_cpu1'):
            lobj.write(cr, uid, [line.id], {
                'quantity': 7.0
            }, {})
        elif line.product_id.id == ref('product.product_product_fan2'):
            lobj.write(cr, uid, [line.id], {
                'quantity': 3.0
            }, {})
    lobj.create(cr, uid, {
        'product_id': ref('product.product_product_pc1'),
        'quantity': 2.0,
        'product_uom': ref('product.product_uom_unit'),
        'location_id': ref('stock.stock_location_stock'),
        'location_dest_id': ref('stock.stock_location_customers'),
        'wizard_id': result
    }, {})
    self.pool.get('stock.partial.picking').do_partial(cr, uid, [result], {})
-
  I test that the back order contains 5 CPU3, 4 FAN2 and nothing else
-
  !python {model: stock.picking}: |
    pick = self.browse(cr, uid, ref('stock.stock_picking_1'), {})
    for line in pick.move_lines:
        if line.product_id.id == ref('product.product_product_cpu3'):
            assert line.product_qty == 5.0, "Wrong quantity %.2f for CPU3 back order" % (line.product_qty,)
        elif line.product_id.id == ref('product.product_product_fan2'):
            assert line.product_qty == 4.0, "Wrong quantity %.2f for FAN2 back order" % (line.product_qty,)
        elif line.product_id.id == ref('product.product_product_pc1'):
            assert line.product_qty == 0.0, "Wrong quantity for PC1 back order"
        else:
            assert line.product_qty == 0.0, "Wrong quantity for %s back order" % (line.product_id.code,)

