-
  Set a product as using fifo price
-
  !record {model: product.product, id: product_fifo_icecream}:
    default_code: FIFO
    name: FIFO Ice Cream
    type: product
    categ_id: product.product_category_1
    list_price: 100.0
    standard_price: 70.0
    uom_id: product.product_uom_kgm
    uom_po_id: product.product_uom_kgm
    procure_method: make_to_stock
    cost_method: fifo
    valuation: real_time
    property_stock_account_input: account.o_expense
    property_stock_account_output: account.o_income
    description: FIFO Ice Cream can be mass-produced and thus is widely available in developed parts of the world. Ice cream can be purchased in large cartons (vats and squrounds) from supermarkets and grocery stores, in smaller quantities from ice cream shops, convenience stores, and milk bars, and in individual servings from small carts or vans at public events.
- 
  I create a draft Purchase Order for first in move for 10 kg at 60 euro
- 
  !record {model: purchase.order, id: purchase_order_fifo1}:
    partner_id: base.res_partner_3
    location_id: stock.stock_location_stock
    pricelist_id: 1
    order_line:
      - product_id: product_fifo_icecream
        product_qty: 10.0
        product_uom: product.product_uom_categ_kgm
        price_unit: 50.0
        name: 'FIFO Ice Cream'
- 
  I create a draft Purchase Order for second shipment for 30 kg at 80 euro
- 
  !record {model: purchase.order, id: purchase_order_fifo2}:
    partner_id: base.res_partner_3
    location_id: stock.stock_location_stock
    pricelist_id: 1
    order_line:
      - product_id: product_fifo_icecream
        product_qty: 30.0
        product_uom: product.product_uom_categ_kgm
        price_unit: 80.0
        name: 'FIFO Ice Cream'
- 
  I confirm the first purchase order
-
  !workflow {model: purchase.order, action: purchase_confirm, ref: purchase_order_fifo1}
- 
  I confirm the second purchase order
- 
  !workflow {model: purchase.order, action: purchase_confirm, ref: purchase_order_fifo2}
-
  I check the "Approved" status of purchase order 1
-
  !assert {model: purchase.order, id: purchase_order_fifo1}:
    - state == 'approved'
- 
  Process the reception of purchase order 1
-
  !python {model: stock.partial.picking}: |
    pick_ids = self.pool.get('purchase.order').browse(cr, uid, ref("purchase_order_fifo1")).picking_ids
    partial_id = self.create(cr, uid, {}, context={'active_model': 'stock.picking','active_ids': [pick_ids[0].id]})
    self.do_partial(cr, uid, [partial_id])
- 
  Check the standard price of the product (fifo icecream)
- 
  !python {model: product.product}: |
    assert self.browse(cr, uid, ref("product_fifo_icecream")).standard_price == 70.0, 'Standard price should not have changed!'
- 
  Process the reception of purchase order 2
- 
  !python {model: stock.partial.picking}: |
    pick_ids = self.pool.get('purchase.order').browse(cr, uid, ref("purchase_order_fifo2")).picking_ids
    partial_id = self.create(cr, uid, {}, context={'active_model': 'stock.picking','active_ids': [pick_ids[0].id]})
    self.do_partial(cr, uid, [partial_id])
- 
  Check the standard price should not have changed
- 
  !python {model: product.product}: |
    assert self.browse(cr, uid, ref("product_fifo_icecream")).standard_price == 70.0, 'Standard price as fifo price of second reception incorrect!'
- 
  Let us send some goods
- 
  !record {model: stock.picking, id: outgoing_fifo_shipment}:
    type: out
-
  Picking needs movement from stock
-
  !record {model: stock.move, id: outgoing_shipment_fifo_icecream}:
    picking_id: outgoing_fifo_shipment
    product_id: product_fifo_icecream
    product_uom: product.product_uom_kgm
    product_qty: 20.0
    type: out
-
  I confirm outgoing shipment of 20 kg of FIFO Ice Cream.
-
  !workflow {model: stock.picking, action: button_confirm, ref: outgoing_fifo_shipment}
- 
  Process the delivery of the outgoing shipment
- 
  !python {model: stock.partial.picking}: |
    partial_id = self.create(cr, uid, {}, context={'active_model': 'stock.picking','active_ids': [ref("outgoing_fifo_shipment")], 'default_type':'out'})
    self.do_partial(cr, uid, [partial_id])
- 
  Check 2 stock move matchings were created
- 
  !python {model: stock.picking}: |
    assert len(self.browse(cr, uid, ref("outgoing_fifo_shipment")).move_lines[0].matching_ids_out) == 2, 'Should have created 2 matchings'
- 
  Check product standard price changed to 65.0
- 
  !python {model: product.product}: |
    assert self.browse(cr, uid, ref("product_fifo_icecream")).standard_price == 65.0
- 
  Do a delivery of an extra 500 g (delivery order)
- 
  !record {model: stock.picking, id: outgoing_fifo_shipment_uom}:
    type: out
-
  Picking needs movement from stock
-
  !record {model: stock.move, id: outgoing_shipment_fifo_icecream_gram}:
    picking_id: outgoing_fifo_shipment_uom
    product_id: product_fifo_icecream
    product_uom: product.product_uom_gram
    product_qty: 500.0
    type: out
-
  I confirm outgoing shipment of 500g of FIFO Ice Cream.
-
  !workflow {model: stock.picking, action: button_confirm, ref: outgoing_fifo_shipment_uom}
- 
  Process the delivery of the outgoing shipment
- 
  !python {model: stock.partial.picking}: |
    partial_id = self.create(cr, uid, {}, context={'active_model': 'stock.picking','active_ids': [ref("outgoing_fifo_shipment_uom")], 'default_type':'out'})
    self.do_partial(cr, uid, [partial_id])
-
  Check 1 stock move matching was created
-
  !python {model: stock.picking}: |
    assert len(self.browse(cr, uid, ref("outgoing_fifo_shipment_uom")).move_lines[0].matching_ids_out) == 1, 'Should have created 1 matching'
- 
  Check product price changed to 80.0
- 
  !python {model: product.product}: |
    assert self.browse(cr, uid, ref("product_fifo_icecream")).standard_price == 80.0
- 
  Create new pricelist in usd
- 
  !record {model: product.pricelist, id: supplier_pricelist_usd}:
    name: Supplier Pricelist
    type: purchase
    currency_id: base.USD
    version_id:
      - name: v1.0
        items_id:
            - name: 20% Discount given by my supplier
              sequence: 1
              price_min_margin: 2
              price_max_margin: 5
              product_id: product_fifo_icecream
              base: -2
- 
  Purchase order in usd
- 
  I create a draft Purchase Order for 30000 g at 0.150 USD
- 
  !record {model: purchase.order, id: purchase_order_fifo_usd}:
    partner_id: base.res_partner_3
    location_id: stock.stock_location_stock
    pricelist_id: supplier_pricelist_usd
    order_line:
      - product_id: product_fifo_icecream
        product_qty: 30000.0
        product_uom: product.product_uom_gram
        price_unit: 0.150
        name: 'FIFO Ice Cream'
      - product_id: product_fifo_icecream
        product_qty: 10.0
        product_uom: product.product_uom_kgm
        price_unit: 150
- 
  I confirm the first purchase order
-
  !workflow {model: purchase.order, action: purchase_confirm, ref: purchase_order_fifo_usd}
- 
  Process the reception of purchase order with usd
-
  !python {model: stock.partial.picking}: |
    pick_ids = self.pool.get('purchase.order').browse(cr, uid, ref("purchase_order_fifo_usd")).picking_ids
    partial_id = self.create(cr, uid, {}, context={'active_model': 'stock.picking','active_ids': [pick_ids[0].id]})
    self.do_partial(cr, uid, [partial_id])
- 
  We create delivery order of 49500 gram
- 
  !record {model: stock.picking, id: outgoing_fifo_shipment_cur}:
    type: out
-
  Picking needs movement from stock
-
  !record {model: stock.move, id: outgoing_shipment_fifo_icecream_cur}:
    picking_id: outgoing_fifo_shipment_cur
    product_id: product_fifo_icecream
    product_uom: product.product_uom_gram
    product_qty: 49500
    type: out
- 
  Process the delivery of the outgoing shipment
- 
  !python {model: stock.partial.picking}: |
    partial_id = self.create(cr, uid, {}, context={'active_model': 'stock.picking','active_ids': [ref("outgoing_fifo_shipment_cur")], 'default_type':'out'})
    self.do_partial(cr, uid, [partial_id])
- 
  Check rounded price is 102 euro = (30 kg * )
- 
  !python {model: product.product}: |
    print round(self.browse(cr, uid, ref("product_fifo_icecream")).standard_price, 2)
    assert round(self.browse(cr, uid, ref("product_fifo_icecream")).standard_price) == 102
- 
  Print price
- 
  !python {model: product.product}: |
    print self.browse(cr, uid, ref("product_fifo_icecream")).standard_price
    print self.browse(cr, uid, ref("product_fifo_icecream")).qty_available
    list = self.pool.get("stock.move").search(cr, uid, [('product_id','=', ref("product_fifo_icecream"))])
    for move in self.pool.get("stock.move").browse(cr, uid, list):
      print move.price_unit, move.product_qty, move.qty_remaining, move.type, move.date
- 
  Return the goods of purchase order 1
- 
  !python {model: stock.return.picking}: |
    pick_ids = self.pool.get('purchase.order').browse(cr, uid, ref("purchase_order_fifo1")).picking_ids
    return_id = self.create(cr, uid, {}, context={'active_model':'stock.picking', 'active_id': pick_ids[0].id})
    res = self.create_returns(cr, uid, [return_id], context={'active_id': pick_ids[0].id})
    return_move_id = self.pool.get("stock.move").search(cr, uid, [('move_returned_from','=', pick_ids[0].move_lines[0].id)])
    
    movepick_obj = self.pool.get("stock.partial.move")
    movepick_id = movepick_obj.create(cr, uid, {}, context={'active_model': 'stock.move', 'active_ids': return_move_id})
    movepick_obj.do_partial(cr, uid, [movepick_id])
- 
  Check rounded price is 150.0 / 1.2834
- 
  !python {model: product.product}: |
    print round(self.browse(cr, uid, ref("product_fifo_icecream")).standard_price, 2)
    assert round(self.browse(cr, uid, ref("product_fifo_icecream")).standard_price) == round(150.0 / 1.2834)
- 
  Print price
- 
  !python {model: product.product}: |
    print self.browse(cr, uid, ref("product_fifo_icecream")).standard_price
    print self.browse(cr, uid, ref("product_fifo_icecream")).qty_available
    list = self.pool.get("stock.move").search(cr, uid, [('product_id','=', ref("product_fifo_icecream"))])
    for move in self.pool.get("stock.move").browse(cr, uid, list):
      print move.price_unit, move.product_qty, move.qty_remaining, move.type, move.date