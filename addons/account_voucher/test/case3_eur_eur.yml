-
  I create a currency rate for EUR for january of 1.000000
-
  !record {model: res.currency.rate, id: jan_eur}:
    currency_id: base.EUR
    name: !eval "'%s-01-01' %(datetime.now().year)"
    rate: 1.000000
-
  I create a currency rate for EUR for february of 1.000000
-
  !record {model: res.currency.rate, id: feb_eur}:
    currency_id: base.EUR
    name: !eval "'%s-02-01' %(datetime.now().year)"
    rate: 1.000000
-
  I create a currency rate for EUR for march of 1.000000
-
  !record {model: res.currency.rate, id: mar_eur}:
    currency_id: base.EUR
    name: !eval "'%s-03-01' %(datetime.now().year)"
    rate: 1.000000
-
  I create a currency rate for EUR for april of 1.000000
-
  !record {model: res.currency.rate, id: apr_eur}:
    currency_id: base.EUR
    name: !eval "'%s-04-01' %(datetime.now().year)"
    rate: 1.000000
-
  I create a bank journal with EUR as currency
-
  !record {model: account.journal, id: bank_journal_EUR}:
    name: Bank Journal(EUR)
    code: BEUR
    type: bank
    analytic_journal_id: account.sit
    sequence_id: account.sequence_bank_journal
    default_debit_account_id: account.cash
    default_credit_account_id: account.cash
    currency: base.EUR
    company_id: base.main_company
    view_id: account.account_journal_bank_view
-
  I assign accounts for 'Income Curreny Rate' and 'Expense Currency Rate'
-
  !record {model: res.company, id: base.main_company}:
    property_expense_currency_exchange: account.o_expense
    property_income_currency_exchange: account.o_income
-
  I create a new partner Peter Lawson.
-
  !record {model: res.partner, id: res_partner_peter0}:
    address:
      - city: paris
        country_id: base.fr
        name: Peter
        street: 1 rue Rockfeller
        type: invoice
        zip: '75016'
    name: Mr.Peter Lawson
-
  I create the first invoice on 1st January for 150 EUR
-
  !record {model: account.invoice, id: account_first_invoice_jan_eur}:
    account_id: account.a_recv
    address_contact_id: base.res_partner_address_3000
    address_invoice_id: base.res_partner_address_3000
    company_id: base.main_company
    currency_id: base.EUR
    date_invoice: !eval "'%s-01-01' %(datetime.now().year)"
    period_id: account.period_1
    invoice_line:
      - account_id: account.a_sale
        name: '[PC1] Basic PC'
        price_unit: 150.0
        quantity: 1.0
        product_id: product.product_product_pc1
        uos_id: product.product_uom_unit
    journal_id: account.sales_journal
    partner_id: res_partner_peter0
    reference_type: none
-
  I Validate invoice by clicking on Validate button
-
  !workflow {model: account.invoice, action: invoice_open, ref: account_first_invoice_jan_eur}
-
  I check that first invoice move is correct 
-
  !python {model: account.invoice}: |
    invoice_id = self.browse(cr, uid, ref("account_first_invoice_jan_eur"))
    assert invoice_id.move_id, "Move not created for open invoice"
    move_line_obj = self.pool.get('account.move.line')
    move_lines = move_line_obj.search(cr, uid, [('move_id', '=', invoice_id.move_id.id), ('account_id', '=', invoice_id.account_id.id)])
    move_line = move_line_obj.browse(cr, uid, move_lines[0])
    assert (move_line.debit - move_line.credit == 150.00), "Invoice move is incorrect for debtors account"
-
  I create the first invoice on 1st February for 80 EUR
-
  !record {model: account.invoice, id: account_second_invoice_feb_eur}:
    account_id: account.a_recv
    address_contact_id: base.res_partner_address_3000
    address_invoice_id: base.res_partner_address_3000
    company_id: base.main_company
    currency_id: base.EUR
    date_invoice: !eval "'%s-02-01' %(datetime.now().year)"
    period_id: account.period_1
    invoice_line:
      - account_id: account.a_sale
        name: '[PC1] Basic PC'
        price_unit: 80.0
        quantity: 1.0
        product_id: product.product_product_pc1
        uos_id: product.product_uom_unit
    journal_id: account.sales_journal
    partner_id: res_partner_peter0
    reference_type: none
-
  I Validate invoice by clicking on Validate button
-
  !workflow {model: account.invoice, action: invoice_open, ref: account_second_invoice_feb_eur}
-
  I check that second invoice move is correct 
-
  !python {model: account.invoice}: |
    invoice_id = self.browse(cr, uid, ref("account_second_invoice_feb_eur"))
    assert invoice_id.move_id, "Move not created for open invoice"
    move_line_obj = self.pool.get('account.move.line')
    move_lines = move_line_obj.search(cr, uid, [('move_id', '=', invoice_id.move_id.id), ('account_id', '=', invoice_id.account_id.id)])
    move_line = move_line_obj.browse(cr, uid, move_lines[0])
    assert (move_line.debit - move_line.credit == 80.00), "Invoice move is incorrect for debtors account"
-
  I create the first voucher of payment with values 120 EUR, journal EUR, and fill amounts 100 for the invoice of 150 and 20 for the 80 EUR invoice.
-
  !python {model: account.voucher}: |
    import netsvc, time
    vals = {}
    res = self.onchange_partner_id(cr, uid, [], ref("res_partner_peter0"), ref('bank_journal_EUR'), 120.00, 2, ttype='receipt', date=False)
    vals = {
        'account_id': ref('account.cash'),
        'amount': 120.0,
        'company_id': ref('base.main_company'),
        'currency_id': ref('base.EUR'),
        'journal_id': ref('bank_journal_EUR'),
        'partner_id': ref('res_partner_peter0'),
        'period_id': ref('account.period_3'),
        'type': 'receipt',
        'date': time.strftime("%Y-03-01"),
        'payment_option': 'with_writeoff',
        'writeoff_acc_id': ref('account.a_expense'),
        'comment': 'Write Off',
        'name': 'First payment',
    }
    if not res['value']['line_cr_ids']:
      res['value']['line_cr_ids'] = [{'type': 'cr', 'account_id': ref('account.a_recv'),}]
    for item in res['value']['line_cr_ids']:
        if item['amount_unreconciled'] == 150:
            item['amount'] = 100
        else:
            item['amount'] = 20
    vals['line_cr_ids'] = [(0,0,i) for i in res['value']['line_cr_ids']]
    id = self.create(cr, uid, vals)
    voucher_id = self.browse(cr, uid, id)
    assert (voucher_id.state=='draft'), "Voucher is not in draft state"
-
  I check that writeoff amount computed is 0
-
  !python {model: account.voucher}: |
    voucher = self.search(cr, uid, [('name', '=', 'First payment'),('partner_id', '=', ref('res_partner_peter0'))])
    voucher_id = self.browse(cr, uid, voucher[0])
    assert (voucher_id.writeoff_amount == 0), "writeoff amount is not 0"
-
  I check that currency rate difference is 0.00
-
  !python {model: account.voucher}: |
    voucher = self.search(cr, uid, [('name', '=', 'First payment'),('partner_id', '=', ref('res_partner_peter0'))])
    voucher_id = self.browse(cr, uid, voucher[0])
    assert (voucher_id.currency_rate_difference == 0.00), "currency rate difference is not 0.00"
-
  I confirm the voucher
-
  !python {model: account.voucher}: |
    import netsvc
    voucher = self.search(cr, uid, [('name', '=', 'First payment'),('partner_id', '=', ref('res_partner_peter0'))])
    wf_service = netsvc.LocalService("workflow")
    wf_service.trg_validate(uid, 'account.voucher', voucher[0], 'proforma_voucher', cr)
-
  I check that my voucher state is posted
-
  !python {model: account.voucher}: |
    voucher = self.search(cr, uid, [('name', '=', 'First payment'),('partner_id', '=', ref('res_partner_peter0'))])
    voucher_id = self.browse(cr, uid, voucher[0])
    assert voucher_id.state == 'posted', "Voucher state is not posted"
-
  I check that my debtor account is correct
-
  I check that the debtor account has 2 new lines with 0.00 and 0.00 as amount_currency columns and their credit are 20 and 100 respectively
-
  !python {model: account.voucher}: |
    voucher = self.search(cr, uid, [('name', '=', 'First payment'),('partner_id', '=', ref('res_partner_peter0'))])
    voucher_id = self.browse(cr, uid, voucher[0])
    move_line_obj = self.pool.get('account.move.line')
    move_lines = move_line_obj.search(cr, uid, [('move_id', '=', voucher_id.move_id.id)])
    for move_line in move_line_obj.browse(cr, uid, move_lines):
        if move_line.credit == 20:
            assert move_line.amount_currency == 0.00, "Debtor account has wrong entry."
        if move_line.credit == 100:
            assert move_line.amount_currency == 0.00, "Debtor account has wrong entry."
-
  I check the residual amount of Invoice1 is 50
-
  !python {model: account.invoice}: |
    invoice_id = self.browse(cr, uid, ref("account_first_invoice_jan_eur"))
    move_line_obj = self.pool.get('account.move.line')
    move_lines = move_line_obj.search(cr, uid, [('move_id', '=', invoice_id.move_id.id), ('invoice', '=', invoice_id.id), ('account_id', '=', invoice_id.account_id.id)])
    move_line = move_line_obj.browse(cr, uid, move_lines[0])
    residual_curr = move_line.amount_residual_currency
    residual = move_line.amount_residual
    assert (move_line.amount_residual_currency == residual_curr and move_line.amount_residual == residual) , "Residual amount is not correct for first Invoice"
-    
  I check the residual amuont of Invoice2 is 60
-
   !python {model: account.invoice}: |
    invoice_id = self.browse(cr, uid, ref("account_second_invoice_feb_eur"))
    move_line_obj = self.pool.get('account.move.line')
    move_lines = move_line_obj.search(cr, uid, [('move_id', '=', invoice_id.move_id.id), ('invoice', '=', invoice_id.id), ('account_id', '=', invoice_id.account_id.id)])
    move_line = move_line_obj.browse(cr, uid, move_lines[0])
    residual_curr = move_line.amount_residual_currency
    residual = move_line.amount_residual
    assert (move_line.amount_residual_currency == residual_curr and move_line.amount_residual == residual) , "Residual amount is not correct for second Invoice"
-
  I create the second voucher of payment and check to let open the debtor overpaid amount.
-
  I create the second voucher of payment with Paid Amount as 120, journal EUR, and fill amount 50 for the residual amount 50 for the invoice of 150 and 70 for the residual amount 60 for the invoice of 80
-
  !python {model: account.voucher}: |
    import netsvc, time
    vals = {}
    res = self.onchange_partner_id(cr, uid, [], ref("res_partner_peter0"), ref('bank_journal_EUR'), 120.0, 2, ttype='receipt', date=False)
    vals = {
        'account_id': ref('account.cash'),
        'amount': 120.0,
        'company_id': ref('base.main_company'),
        'currency_id': ref('base.EUR'),
        'journal_id': ref('bank_journal_EUR'),
        'partner_id': ref('res_partner_peter0'),
        'period_id': ref('account.period_3'),
        'type': 'receipt',
        'date': time.strftime("%Y-04-01"),
        'payment_option': 'with_writeoff',
        'writeoff_acc_id': ref('account.a_expense'),
        'comment': 'Write Off',
        'name': 'Second payment',
    }
    if not res['value']['line_cr_ids']:
      res['value']['line_cr_ids'] = [{'type': 'cr', 'account_id': ref('account.a_recv'),}]
    for item in res['value']['line_cr_ids']:
        if item['amount_unreconciled'] == 50.00:
            item['amount'] = 50.00
        elif item['amount_unreconciled'] == 60.00:
            item['amount'] = 70.00
    vals['line_cr_ids'] = [(0,0,i) for i in res['value']['line_cr_ids']]
    id = self.create(cr, uid, vals)
    voucher_id = self.browse(cr, uid, id)
    assert (voucher_id.state=='draft'), "Voucher is not in draft state"
-
  I check that writeoff amount computed is 0.00
-
  !python {model: account.voucher}: |
    voucher = self.search(cr, uid, [('name', '=', 'Second payment'),('partner_id', '=', ref('res_partner_peter0'))])
    voucher_id = self.browse(cr, uid, voucher[0])
    assert (voucher_id.writeoff_amount == 0.00), "writeoff amount is not 0"
-
  I check that currency rate difference is 0.00
-
  !python {model: account.voucher}: |
    voucher = self.search(cr, uid, [('name', '=', 'Second payment'), ('partner_id', '=', ref('res_partner_peter0'))])
    voucher_id = self.browse(cr, uid, voucher[0])
    curr_diff = voucher_id.currency_rate_difference
    assert (voucher_id.currency_rate_difference == curr_diff), "currency rate difference is not 0"
-
  I confirm the voucher
-
  !python {model: account.voucher}: |
    import netsvc
    voucher = self.search(cr, uid, [('name', '=', 'Second payment'), ('partner_id', '=', ref('res_partner_peter0'))])
    wf_service = netsvc.LocalService("workflow")
    wf_service.trg_validate(uid, 'account.voucher', voucher[0], 'proforma_voucher', cr)
-
  I check that my voucher state is posted
-
  !python {model: account.voucher}: |
    voucher = self.search(cr, uid, [('name', '=', 'Second payment'), ('partner_id', '=', ref('res_partner_peter0'))])
    voucher_id = self.browse(cr, uid, voucher[0])
    assert voucher_id.state == 'posted', "Voucher state is not posted"
-
  I check that my debtor account is correct
-
  I check that the debtor account has 2 new lines with 0.00 and 0.00 as amount_currency columns and their credit are 70 and 50
-
  !python {model: account.voucher}: |
    voucher = self.search(cr, uid, [('name', '=', 'Second payment'), ('partner_id', '=', ref('res_partner_peter0'))])
    voucher_id = self.browse(cr, uid, voucher[0])
    move_line_obj = self.pool.get('account.move.line')
    move_lines = move_line_obj.search(cr, uid, [('move_id', '=', voucher_id.move_id.id)])
    for move_line in move_line_obj.browse(cr, uid, move_lines):
        if move_line.credit == 70.00:
            assert move_line.amount_currency == 0.00, "Debtor account has wrong entry."
        if move_line.credit == 50.00:
            assert move_line.amount_currency == 0.00, "Debtor account has wrong entry."
-
  I check the residual amount of Invoice1 is 0
-
  !python {model: account.invoice}: |
    invoice_id = self.browse(cr, uid, ref("account_first_invoice_jan_eur"))
    move_line_obj = self.pool.get('account.move.line')
    move_lines = move_line_obj.search(cr, uid, [('move_id', '=', invoice_id.move_id.id), ('invoice', '=', invoice_id.id), ('account_id', '=', invoice_id.account_id.id)])
    move_line = move_line_obj.browse(cr, uid, move_lines[0])
    residual_curr = move_line.amount_residual_currency
    residual = move_line.amount_residual
    assert (move_line.amount_residual_currency == residual_curr and move_line.amount_residual == residual) , "Residual amount is not correct for first Invoice"
-    
  I check the residual amuont of Invoice2 is -10
-
   !python {model: account.invoice}: |
    invoice_id = self.browse(cr, uid, ref("account_second_invoice_feb_eur"))
    move_line_obj = self.pool.get('account.move.line')
    move_lines = move_line_obj.search(cr, uid, [('move_id', '=', invoice_id.move_id.id), ('invoice', '=', invoice_id.id), ('account_id', '=', invoice_id.account_id.id)])
    move_line = move_line_obj.browse(cr, uid, move_lines[0])
    residual_curr = move_line.amount_residual_currency
    residual = move_line.amount_residual
    assert (move_line.amount_residual_currency == residual_curr and move_line.amount_residual == residual) , "Residual amount is not correct for second Invoice"