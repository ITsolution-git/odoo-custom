-
  In order to check the Account_voucher module with multi-currency in OpenERP, 
  I create 2 Invoices in USD and make 2 Payments one in USD and another in EUR, based on the currency rating on that particular date
-
  I modify the debtor account in order to set the currency_id = USD
-
  !python {model: account.account}: |
    from datetime import datetime
    ids = self.search(cr, uid, [('name', 'ilike', 'debtor')])
    self.write(cr, uid, ids, {'currency_id': ref('base.USD')})
-
  I create currency USD in OpenERP for January of 1.333333 Rate
-
  !python {model: res.currency.rate}: |
    from datetime import datetime
    curr_id = self.pool.get('res.currency').search(cr, uid, [('name', '=', 'USD')])[0]
    date = '%s-01-01' %(datetime.now().year)
    ids = self.search(cr, uid, [('currency_id', '=', curr_id), ('name', '=', date)])
    self.write(cr, uid, ids, {'rate': 1.333333})
-
  I create currency USD in OpenERP for February of 1.250000 Rate
-
  !record {model: res.currency.rate, id: febr_usd}:
    currency_id: base.USD
    name: !eval "'%s-02-01' %(datetime.now().year)"
    rate: 1.250000
-
  I create currency USD in OpenERP for March of 1.111111 Rate
-
  !record {model: res.currency.rate, id: marc_usd}:
    currency_id: base.USD
    name: !eval "'%s-03-01' %(datetime.now().year)"
    rate: 1.111111
-
  I create currency USD in OpenERP for April of 1.052632 Rate
-
  !record {model: res.currency.rate, id: apri_usd}:
    currency_id: base.USD
    name: !eval "'%s-04-01' %(datetime.now().year)"
    rate: 1.052632
-
  I create a bank journal with EUR as currency
-
  !record {model: account.journal, id: bank_journal_EUR}:
    name: Bank Journal(EUR)
    code: BEUR
    type: bank
    analytic_journal_id: account.sit
    sequence_id: account.sequence_bank_journal
    default_debit_account_id: account.cash
    default_credit_account_id: account.cash
    currency: base.EUR
    company_id: base.main_company
    view_id: account.account_journal_bank_view
-
  I create a bank journal with USD as currency
-
  !record {model: account.journal, id: bank_journal_USD}:
    name: Bank Journal(USD)
    code: BUSD
    type: bank
    analytic_journal_id: account.sit
    sequence_id: account.sequence_bank_journal
    default_debit_account_id: account.cash
    default_credit_account_id: account.cash
    currency: base.USD
    company_id: base.main_company
    view_id: account.account_journal_bank_view
-
  I create a new partner Michal Gallette
-
  !record {model: res.partner, id: res_partner_michal1}:
    address:
      - city: paris
        country_id: base.fr
        name: Michal
        street: 1 rue Rockfeller
        type: invoice
        zip: '75016'
    name: Mr.Michal Gallette
-
  I create the first invoice on 1st January for 200 USD
-
  !record {model: account.invoice, id: account_first_invoice_jan_michal}:
    account_id: account.a_recv
    address_contact_id: base.res_partner_address_3000
    address_invoice_id: base.res_partner_address_3000
    company_id: base.main_company
    currency_id: base.USD
    date_invoice: !eval "'%s-01-01' %(datetime.now().year)"
    period_id: account.period_1
    invoice_line:
      - account_id: account.a_sale
        name: '[PC1] Basic PC'
        price_unit: 200.0
        quantity: 1.0
        product_id: product.product_product_pc1
        uos_id: product.product_uom_unit
    journal_id: account.sales_journal
    partner_id: res_partner_michal1
    reference_type: none
-
  I Validate invoice by clicking on Validate button
-
  !workflow {model: account.invoice, action: invoice_open, ref: account_first_invoice_jan_michal}
-
  I check that first invoice move is correct for debtor account(debit - credit == 150)
-
  !python {model: account.invoice}: |
    invoice_id = self.browse(cr, uid, ref("account_first_invoice_jan_michal"))
    assert invoice_id.move_id, "Move not created for open invoice"
    move_line_obj = self.pool.get('account.move.line')
    move_lines = move_line_obj.search(cr, uid, [('move_id', '=', invoice_id.move_id.id), ('account_id', '=', invoice_id.account_id.id)])
    move_line = move_line_obj.browse(cr, uid, move_lines[0])
    assert (move_line.debit - move_line.credit == 150.00), "Invoice move is incorrect for debtors account"
-
  I create the second invoice on 1st February for 100 USD
-
  !record {model: account.invoice, id: account_second_invoice_feb_michal}:
    account_id: account.a_recv
    address_contact_id: base.res_partner_address_3000
    address_invoice_id: base.res_partner_address_3000
    company_id: base.main_company
    currency_id: base.USD
    date_invoice: !eval "'%s-02-01' %(datetime.now().year)"
    period_id: account.period_2
    invoice_line:
      - account_id: account.a_sale
        name: '[PC1] Basic PC'
        price_unit: 100.0
        quantity: 1.0
        product_id: product.product_product_pc1
        uos_id: product.product_uom_unit
    journal_id: account.sales_journal
    partner_id: res_partner_michal1
    reference_type: none
-
  I Validate invoice by clicking on Validate button
-
  !workflow {model: account.invoice, action: invoice_open, ref: account_second_invoice_feb_michal}
-
  I check that second invoice move is correct for debtor account (debit - credit == 80)
-
  !python {model: account.invoice}: |
    invoice_id = self.browse(cr, uid, ref("account_second_invoice_feb_michal"))
    assert invoice_id.move_id, "Move not created for open invoice"
    move_line_obj = self.pool.get('account.move.line')
    move_lines = move_line_obj.search(cr, uid, [('move_id', '=', invoice_id.move_id.id), ('account_id', '=', invoice_id.account_id.id)])
    move_line = move_line_obj.browse(cr, uid, move_lines[0])
    assert (move_line.debit - move_line.credit == 80), "Invoice move is incorrect for debtors account"
-
  I create the first voucher of payment
  <create with values 200 EUR (€), journal EUR, and fills amount 130€ for the invoice of 200$ and 70€ for the invoice of 100$>
-
  !python {model: account.voucher}: |
    import netsvc, time
    vals = {}
    res = self.onchange_partner_id(cr, uid, [], ref("res_partner_michal1"), ref('bank_journal_EUR'), 200.0, 2, ttype='receipt', date=False)
    vals = {
        'account_id': ref('account.cash'),
        'amount': 200.0,
        'company_id': ref('base.main_company'),
        'currency_id': ref('base.EUR'),
        'journal_id': ref('bank_journal_EUR'),
        'partner_id': ref('res_partner_michal1'),
        'period_id': ref('account.period_3'),
        'type': 'receipt',
        'date': time.strftime("%Y-03-01"),
        'payment_option': 'with_writeoff',
        'writeoff_acc_id': ref('account.a_expense'),
        'comment': 'Write Off',
        'name': 'First payment',
    }
    if not res['value']['line_cr_ids']:
      res['value']['line_cr_ids'] = [{'type': 'cr', 'account_id': ref('account.a_recv'),}]
    for item in res['value']['line_cr_ids']:
        if item['amount_unreconciled'] == 150.00:
            item['amount'] = 130.00
        else:
            item['amount'] = 70.00
    vals['line_cr_ids'] = [(0,0,i) for i in res['value']['line_cr_ids']]
    id = self.create(cr, uid, vals)
    voucher_id = self.browse(cr, uid, id)
    assert (voucher_id.state=='draft'), "Voucher is not in draft state"
-
  I confirm the voucher
-
  !python {model: account.voucher}: |
    import netsvc
    voucher = self.search(cr, uid, [('name', '=', 'First payment'), ('partner_id', '=', ref('res_partner_michal1'))])
    wf_service = netsvc.LocalService("workflow")
    wf_service.trg_validate(uid, 'account.voucher', voucher[0], 'proforma_voucher', cr)
-
  I check that the move of my voucher is valid
-
  !python {model: account.voucher}: |
    voucher = self.search(cr, uid, [('name', '=', 'First payment'), ('partner_id', '=', ref('res_partner_michal1'))])
    voucher_id = self.browse(cr, uid, voucher[0])
    move_line_obj = self.pool.get('account.move.line')
    move_lines = move_line_obj.search(cr, uid, [('move_id', '=', voucher_id.move_id.id)])
    for move_line in move_line_obj.browse(cr, uid, move_lines):
        assert move_line.state == 'valid', "Voucher move is not valid"
-
  I check that my debtor account is correct
-
  I check that the debtor account has 2 new lines with 144.44 and 77.78 in amount_currency columns and their credit columns are 130 and 70
-
  !python {model: account.voucher}: |
    voucher = self.search(cr, uid, [('name', '=', 'First payment'), ('partner_id', '=', ref('res_partner_michal1'))])
    voucher_id = self.browse(cr, uid, voucher[0])
    move_line_obj = self.pool.get('account.move.line')
    move_lines = move_line_obj.search(cr, uid, [('move_id', '=', voucher_id.move_id.id)])
    for move_line in move_line_obj.browse(cr, uid, move_lines):
        if move_line.credit == 70.0:
            assert move_line.amount_currency == -77.78, "Wrong debtor entry"
        if move_line.credit == 130.0:
            assert move_line.amount_currency == -144.44, "Wrong debtor entry"
-
  I check the residual amount of Invoice1, should be 55.56 in residual currency and 20 in amount_residual
-
  !python {model: account.invoice}: |
    invoice_id = self.browse(cr, uid, ref("account_first_invoice_jan_michal"))
    move_line_obj = self.pool.get('account.move.line')
    move_lines = move_line_obj.search(cr, uid, [('move_id', '=', invoice_id.move_id.id), ('invoice', '=', invoice_id.id), ('account_id', '=', invoice_id.account_id.id)])
    move_line = move_line_obj.browse(cr, uid, move_lines[0])
    assert (move_line.amount_residual_currency == 55.56 and move_line.amount_residual == 20) , "Residual amount is not correct for first Invoice"
-    toto
  I check the residual amuont of Invoice2, should be 22.22 in residual currency and 10 in amount_residual
-
   !python {model: account.invoice}: |
    invoice_id = self.browse(cr, uid, ref("account_second_invoice_feb_michal"))
    move_line_obj = self.pool.get('account.move.line')
    move_lines = move_line_obj.search(cr, uid, [('move_id', '=', invoice_id.move_id.id), ('invoice', '=', invoice_id.id), ('account_id', '=', invoice_id.account_id.id)])
    move_line = move_line_obj.browse(cr, uid, move_lines[0])
    assert (move_line.amount_residual_currency == 22.22 and move_line.amount_residual == 10) , "Residual amount is not correct for second Invoice"
-  
  I create the second voucher of payment
  <create with values 80 USD, journal USD, and fully reconcile the 2 invoices>
-
  !python {model: account.voucher}: |
    import netsvc, time
    vals = {}
    res = self.onchange_partner_id(cr, uid, [], ref("res_partner_michal1"), ref('bank_journal_USD'), 80.0, 2, ttype='receipt', date=False)
    vals = {
        'account_id': ref('account.cash'),
        'amount': 80.0,
        'company_id': ref('base.main_company'),
        'currency_id': ref('base.USD'),
        'journal_id': ref('bank_journal_USD'),
        'partner_id': ref('res_partner_michal1'),
        'period_id': ref('account.period_3'),
        'type': 'receipt',
        'date': time.strftime("%Y-04-01"),
        'payment_option': 'with_writeoff',
        'writeoff_acc_id': ref('account.a_expense'),
        'exchange_acc_id': ref('account.o_expense'),
        'comment': 'Write Off',
        'name': 'Second payment',
    }
    if not res['value']['line_cr_ids']:
      res['value']['line_cr_ids'] = [{'type': 'cr', 'account_id': ref('account.a_recv'),}]
    for item in res['value']['line_cr_ids']:
        if item['amount_unreconciled'] == 55.56:
            item['amount'] = 55.56
        else:
            item['amount'] = 22.22
    vals['line_cr_ids'] = [(0,0,i) for i in res['value']['line_cr_ids']]
    id = self.create(cr, uid, vals)
    voucher_id = self.browse(cr, uid, id)
    assert (voucher_id.state=='draft'), "Voucher is not in draft state"
-
  I check that writeoff amount computed is 2.22
-
  !python {model: account.voucher}: |
    voucher = self.search(cr, uid, [('name', '=', 'Second payment'), ('partner_id', '=', ref('res_partner_michal1'))])
    voucher_id = self.browse(cr, uid, voucher[0])
    assert (round(voucher_id.writeoff_amount, 2) == 2.22), "Writeoff amount is not 2.22$"
-
  I confirm the voucher
-
  !python {model: account.voucher}: |
    import netsvc
    voucher = self.search(cr, uid, [('name', '=', 'Second payment'), ('partner_id', '=', ref('res_partner_michal1'))])
    wf_service = netsvc.LocalService("workflow")
    wf_service.trg_validate(uid, 'account.voucher', voucher[0], 'proforma_voucher', cr)
-
  I check that my voucher state is posted
-
  !python {model: account.voucher}: |
    voucher = self.search(cr, uid, [('name', '=', 'Second payment'), ('partner_id', '=', ref('res_partner_michal1'))])
    voucher_id = self.browse(cr, uid, voucher[0])
    assert voucher_id.state == 'posted', "Voucher state is not posted"
-
  I check that my debtor account is correct
-
  I check that the debtor account has 2 new lines with -55.56 and -22.22 in amount_currency columns and their credit columns are respectively 52.78 and 21.11 and currency is USD($).
-
  I check that my currency rate difference is correct.
-
  I check that my writeoff is correct. 2.11 in credit and 2.22 in amount_currency
-
  !python {model: account.voucher}: |
    voucher = self.search(cr, uid, [('name', '=', 'Second payment'), ('partner_id', '=', ref('res_partner_michal1'))])
    voucher_id = self.browse(cr, uid, voucher[0])
    move_line_obj = self.pool.get('account.move.line')
    move_lines = move_line_obj.search(cr, uid, [('move_id', '=', voucher_id.move_id.id)])
    reconcile_a = reconcile_b = False
    for move_line in move_line_obj.browse(cr, uid, move_lines):
        if move_line.amount_currency == -22.22:
            assert move_line.reconcile_id.id, "The invoice of 200$ is not fully reconciled"
            reconcile_b = move_line.reconcile_id.id
        elif move_line.amount_currency == -55.56:
            assert move_line.reconcile_id.id, "The invoice of 100$ is not fully reconciled"
            reconcile_a = move_line.reconcile_id.id
    for move_line in move_line_obj.browse(cr, uid, move_lines):
        if move_line.amount_currency == -55.56:
            assert move_line.credit == 52.78, "Debtor account has wrong entry."
        elif move_line.amount_currency == -22.22:
            assert move_line.credit == 21.11, "Debtor account has wrong entry."
        elif move_line.credit == 11.11 and move_line.account_id.reconcile:
            assert move_line.amount_currency == 0.00 and move_line.reconcile_id.id == reconcile_b, "Incorrect Currency Difference."
        elif move_line.credit == 32.78 and move_line.account_id.reconcile:
            assert move_line.amount_currency == 0.00 and move_line.reconcile_id.id == reconcile_a, "Incorrect Currency Difference."
        elif move_line.amount_currency == 2.22:
            assert move_line.credit == 2.11, "Writeoff amount is wrong."
-
  I check the residual amount of invoice 1, should be 0 in residual currency and 0 in amount_residual and paid
-
  !python {model: account.invoice}: |
    invoice_id = self.browse(cr, uid, ref("account_first_invoice_jan_michal"))
    move_line_obj = self.pool.get('account.move.line')
    move_lines = move_line_obj.search(cr, uid, [('move_id', '=', invoice_id.move_id.id), ('invoice', '=', invoice_id.id), ('account_id', '=', invoice_id.account_id.id)])
    move_line = move_line_obj.browse(cr, uid, move_lines[0])
    assert (move_line.amount_residual_currency == 0.0 and move_line.amount_residual == 0.0 and invoice_id.state == 'paid') , "Residual amount is not correct for first Invoice"
-    
  I check the residual amuont of invoice 2, should be 0 in residual currency and 0 in amount_residual and paid
-
   !python {model: account.invoice}: |
    invoice_id = self.browse(cr, uid, ref("account_second_invoice_feb_michal"))
    move_line_obj = self.pool.get('account.move.line')
    move_lines = move_line_obj.search(cr, uid, [('move_id', '=', invoice_id.move_id.id), ('invoice', '=', invoice_id.id), ('account_id', '=', invoice_id.account_id.id)])
    move_line = move_line_obj.browse(cr, uid, move_lines[0])
    assert (move_line.amount_residual_currency == 0.0 and move_line.amount_residual == 0.0 and invoice_id.state == 'paid') , "Residual amount is not correct for second Invoice"
