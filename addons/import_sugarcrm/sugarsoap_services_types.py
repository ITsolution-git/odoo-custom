##################################################
# sugarsoap_services_types.py
# generated by ZSI.generate.wsdl2python
##################################################
from osv import osv
from tools.translate import _
try:
    import ZSI
    import ZSI.TCcompound
    from ZSI.TC import TypeDefinition
    from ZSI.TC import _get_type_definition as GTD
    from ZSI.generate.pyclass import pyclass_type
except ImportError:
    raise osv.except_osv(_('ZSI Import Error!'), _('Please install SOAP for python - ZSI-2.0-rc3.tar.gz from http://pypi.python.org/pypi/ZSI/'))

##############################
# targetNamespace
# http://www.sugarcrm.com/sugarcrm
##############################

class ns0:
    targetNamespace = "http://www.sugarcrm.com/sugarcrm"

    class contact_detail_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.sugarcrm.com/sugarcrm"
        type = (schema, "contact_detail")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            #Unused variable ns.
            #ns = ns0.contact_detail_Def.schema
            TClist = [ZSI.TC.String(pname="email_address", aname="_email_address", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name1", aname="_name1", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name2", aname="_name2", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="association", aname="_association", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="id", aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="msi_id", aname="_msi_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="type", aname="_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._email_address = None
                    self._name1 = None
                    self._name2 = None
                    self._association = None
                    self._id = None
                    self._msi_id = None
                    self._type = None
                    return
            Holder.__name__ = "contact_detail_Holder"
            self.pyclass = Holder

    class contact_detail_array_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "http://www.sugarcrm.com/sugarcrm"
        type = (schema, "contact_detail_array")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.contact_detail_Def(None, typed=False)
            atype = (u'http://www.sugarcrm.com/sugarcrm', u'contact_detail[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class user_detail_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.sugarcrm.com/sugarcrm"
        type = (schema, "user_detail")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            #ns = ns0.user_detail_Def.schema
            TClist = [ZSI.TC.String(pname="email_address", aname="_email_address", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="user_name", aname="_user_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="first_name", aname="_first_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="last_name", aname="_last_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="department", aname="_department", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="id", aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="title", aname="_title", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._email_address = None
                    self._user_name = None
                    self._first_name = None
                    self._last_name = None
                    self._department = None
                    self._id = None
                    self._title = None
                    return
            Holder.__name__ = "user_detail_Holder"
            self.pyclass = Holder

    class user_detail_array_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "http://www.sugarcrm.com/sugarcrm"
        type = (schema, "user_detail_array")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.user_detail_Def(None, typed=False)
            atype = (u'http://www.sugarcrm.com/sugarcrm', u'user_detail[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class note_attachment_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.sugarcrm.com/sugarcrm"
        type = (schema, "note_attachment")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
           # ns = ns0.note_attachment_Def.schema
            TClist = [ZSI.TC.String(pname="id", aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="filename", aname="_filename", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="file", aname="_file", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._id = None
                    self._filename = None
                    self._file = None
                    return
            Holder.__name__ = "note_attachment_Holder"
            self.pyclass = Holder

    class return_note_attachment_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.sugarcrm.com/sugarcrm"
        type = (schema, "return_note_attachment")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            #ns = ns0.return_note_attachment_Def.schema
            TClist = [GTD("http://www.sugarcrm.com/sugarcrm","note_attachment",lazy=False)(pname="note_attachment", aname="_note_attachment", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.sugarcrm.com/sugarcrm","error_value",lazy=False)(pname="error", aname="_error", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._note_attachment = None
                    self._error = None
                    return
            Holder.__name__ = "return_note_attachment_Holder"
            self.pyclass = Holder

    class user_auth_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.sugarcrm.com/sugarcrm"
        type = (schema, "user_auth")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            #ns = ns0.user_auth_Def.schema
            TClist = [ZSI.TC.String(pname="user_name", aname="_user_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="version", aname="_version", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._user_name = None
                    self._password = None
                    self._version = None
                    return
            Holder.__name__ = "user_auth_Holder"
            self.pyclass = Holder

    class field_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.sugarcrm.com/sugarcrm"
        type = (schema, "field")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            #ns = ns0.field_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="type", aname="_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="label", aname="_label", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="required", aname="_required", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.sugarcrm.com/sugarcrm","name_value_list",lazy=False)(pname="options", aname="_options", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._type = None
                    self._label = None
                    self._required = None
                    self._options = None
                    return
            Holder.__name__ = "field_Holder"
            self.pyclass = Holder

    class field_list_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "http://www.sugarcrm.com/sugarcrm"
        type = (schema, "field_list")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.field_Def(None, typed=False)
            atype = (u'http://www.sugarcrm.com/sugarcrm', u'field[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class name_value_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.sugarcrm.com/sugarcrm"
        type = (schema, "name_value")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            #ns = ns0.name_value_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="value", aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._value = None
                    return
            Holder.__name__ = "name_value_Holder"
            self.pyclass = Holder

    class name_value_list_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "http://www.sugarcrm.com/sugarcrm"
        type = (schema, "name_value_list")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.name_value_Def(None, typed=False)
            atype = (u'http://www.sugarcrm.com/sugarcrm', u'name_value[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class name_value_lists_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "http://www.sugarcrm.com/sugarcrm"
        type = (schema, "name_value_lists")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.name_value_list_Def(None, typed=False)
            atype = (u'http://www.sugarcrm.com/sugarcrm', u'name_value_list[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class select_fields_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "http://www.sugarcrm.com/sugarcrm"
        type = (schema, "select_fields")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ZSI.TC.String(None, typed=False)
            atype = (u'http://www.w3.org/2001/XMLSchema', u'string[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class module_fields_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.sugarcrm.com/sugarcrm"
        type = (schema, "module_fields")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
           # ns = ns0.module_fields_Def.schema
            TClist = [ZSI.TC.String(pname="module_name", aname="_module_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.sugarcrm.com/sugarcrm","field_list",lazy=False)(pname="module_fields", aname="_module_fields", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.sugarcrm.com/sugarcrm","error_value",lazy=False)(pname="error", aname="_error", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._module_name = None
                    self._module_fields = None
                    self._error = None
                    return
            Holder.__name__ = "module_fields_Holder"
            self.pyclass = Holder

    class module_list_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.sugarcrm.com/sugarcrm"
        type = (schema, "module_list")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            #ns = ns0.module_list_Def.schema
            TClist = [GTD("http://www.sugarcrm.com/sugarcrm","select_fields",lazy=False)(pname="modules", aname="_modules", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.sugarcrm.com/sugarcrm","error_value",lazy=False)(pname="error", aname="_error", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._modules = None
                    self._error = None
                    return
            Holder.__name__ = "module_list_Holder"
            self.pyclass = Holder

    class error_value_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.sugarcrm.com/sugarcrm"
        type = (schema, "error_value")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            #ns = ns0.error_value_Def.schema
            TClist = [ZSI.TC.String(pname="number", aname="_number", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="description", aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._number = None
                    self._name = None
                    self._description = None
                    return
            Holder.__name__ = "error_value_Holder"
            self.pyclass = Holder

    class entry_value_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.sugarcrm.com/sugarcrm"
        type = (schema, "entry_value")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            #ns = ns0.entry_value_Def.schema
            TClist = [ZSI.TC.String(pname="id", aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="module_name", aname="_module_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.sugarcrm.com/sugarcrm","name_value_list",lazy=False)(pname="name_value_list", aname="_name_value_list", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._id = None
                    self._module_name = None
                    self._name_value_list = None
                    return
            Holder.__name__ = "entry_value_Holder"
            self.pyclass = Holder

    class entry_list_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "http://www.sugarcrm.com/sugarcrm"
        type = (schema, "entry_list")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.entry_value_Def(None, typed=False)
            atype = (u'http://www.sugarcrm.com/sugarcrm', u'entry_value[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class get_entry_list_result_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.sugarcrm.com/sugarcrm"
        type = (schema, "get_entry_list_result")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            #ns = ns0.get_entry_list_result_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="result_count", aname="_result_count", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="next_offset", aname="_next_offset", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.sugarcrm.com/sugarcrm","field_list",lazy=False)(pname="field_list", aname="_field_list", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.sugarcrm.com/sugarcrm","entry_list",lazy=False)(pname="entry_list", aname="_entry_list", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.sugarcrm.com/sugarcrm","error_value",lazy=False)(pname="error", aname="_error", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._result_count = None
                    self._next_offset = None
                    self._field_list = None
                    self._entry_list = None
                    self._error = None
                    return
            Holder.__name__ = "get_entry_list_result_Holder"
            self.pyclass = Holder

    class get_entry_result_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.sugarcrm.com/sugarcrm"
        type = (schema, "get_entry_result")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            #ns = ns0.get_entry_result_Def.schema
            TClist = [GTD("http://www.sugarcrm.com/sugarcrm","field_list",lazy=False)(pname="field_list", aname="_field_list", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.sugarcrm.com/sugarcrm","entry_list",lazy=False)(pname="entry_list", aname="_entry_list", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.sugarcrm.com/sugarcrm","error_value",lazy=False)(pname="error", aname="_error", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._field_list = None
                    self._entry_list = None
                    self._error = None
                    return
            Holder.__name__ = "get_entry_result_Holder"
            self.pyclass = Holder

    class set_entry_result_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.sugarcrm.com/sugarcrm"
        type = (schema, "set_entry_result")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            #ns = ns0.set_entry_result_Def.schema
            TClist = [ZSI.TC.String(pname="id", aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.sugarcrm.com/sugarcrm","error_value",lazy=False)(pname="error", aname="_error", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._id = None
                    self._error = None
                    return
            Holder.__name__ = "set_entry_result_Holder"
            self.pyclass = Holder

    class set_entries_result_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.sugarcrm.com/sugarcrm"
        type = (schema, "set_entries_result")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            #ns = ns0.set_entries_result_Def.schema
            TClist = [GTD("http://www.sugarcrm.com/sugarcrm","select_fields",lazy=False)(pname="ids", aname="_ids", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.sugarcrm.com/sugarcrm","error_value",lazy=False)(pname="error", aname="_error", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ids = None
                    self._error = None
                    return
            Holder.__name__ = "set_entries_result_Holder"
            self.pyclass = Holder

    class id_mod_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.sugarcrm.com/sugarcrm"
        type = (schema, "id_mod")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            #ns = ns0.id_mod_Def.schema
            TClist = [ZSI.TC.String(pname="id", aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="date_modified", aname="_date_modified", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="deleted", aname="_deleted", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._id = None
                    self._date_modified = None
                    self._deleted = None
                    return
            Holder.__name__ = "id_mod_Holder"
            self.pyclass = Holder

    class ids_mods_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "http://www.sugarcrm.com/sugarcrm"
        type = (schema, "ids_mods")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.id_mod_Def(None, typed=False)
            atype = (u'http://www.sugarcrm.com/sugarcrm', u'id_mod[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class get_relationships_result_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.sugarcrm.com/sugarcrm"
        type = (schema, "get_relationships_result")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            #ns = ns0.get_relationships_result_Def.schema
            TClist = [GTD("http://www.sugarcrm.com/sugarcrm","ids_mods",lazy=False)(pname="ids", aname="_ids", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.sugarcrm.com/sugarcrm","error_value",lazy=False)(pname="error", aname="_error", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ids = None
                    self._error = None
                    return
            Holder.__name__ = "get_relationships_result_Holder"
            self.pyclass = Holder

    class set_relationship_value_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.sugarcrm.com/sugarcrm"
        type = (schema, "set_relationship_value")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            #ns = ns0.set_relationship_value_Def.schema
            TClist = [ZSI.TC.String(pname="module1", aname="_module1", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="module1_id", aname="_module1_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="module2", aname="_module2", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="module2_id", aname="_module2_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._module1 = None
                    self._module1_id = None
                    self._module2 = None
                    self._module2_id = None
                    return
            Holder.__name__ = "set_relationship_value_Holder"
            self.pyclass = Holder

    class set_relationship_list_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "http://www.sugarcrm.com/sugarcrm"
        type = (schema, "set_relationship_list")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.set_relationship_value_Def(None, typed=False)
            atype = (u'http://www.sugarcrm.com/sugarcrm', u'set_relationship_value[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class set_relationship_list_result_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.sugarcrm.com/sugarcrm"
        type = (schema, "set_relationship_list_result")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            #ns = ns0.set_relationship_list_result_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="created", aname="_created", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="failed", aname="_failed", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.sugarcrm.com/sugarcrm","error_value",lazy=False)(pname="error", aname="_error", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._created = None
                    self._failed = None
                    self._error = None
                    return
            Holder.__name__ = "set_relationship_list_result_Holder"
            self.pyclass = Holder

    class document_revision_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.sugarcrm.com/sugarcrm"
        type = (schema, "document_revision")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            #ns = ns0.document_revision_Def.schema
            TClist = [ZSI.TC.String(pname="id", aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="document_name", aname="_document_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="revision", aname="_revision", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="filename", aname="_filename", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="file", aname="_file", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._id = None
                    self._document_name = None
                    self._revision = None
                    self._filename = None
                    self._file = None
                    return
            Holder.__name__ = "document_revision_Holder"
            self.pyclass = Holder

    class get_entry_list_result_encoded_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.sugarcrm.com/sugarcrm"
        type = (schema, "get_entry_list_result_encoded")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
           # ns = ns0.get_entry_list_result_encoded_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="result_count", aname="_result_count", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="next_offset", aname="_next_offset", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="total_count", aname="_total_count", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.sugarcrm.com/sugarcrm","select_fields",lazy=False)(pname="field_list", aname="_field_list", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="entry_list", aname="_entry_list", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.sugarcrm.com/sugarcrm","error_value",lazy=False)(pname="error", aname="_error", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._result_count = None
                    self._next_offset = None
                    self._total_count = None
                    self._field_list = None
                    self._entry_list = None
                    self._error = None
                    return
            Holder.__name__ = "get_entry_list_result_encoded_Holder"
            self.pyclass = Holder

    class get_sync_result_encoded_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.sugarcrm.com/sugarcrm"
        type = (schema, "get_sync_result_encoded")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
           # ns = ns0.get_sync_result_encoded_Def.schema
            TClist = [ZSI.TC.String(pname="result", aname="_result", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.sugarcrm.com/sugarcrm","error_value",lazy=False)(pname="error", aname="_error", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._result = None
                    self._error = None
                    return
            Holder.__name__ = "get_sync_result_encoded_Holder"
            self.pyclass = Holder

    class get_quick_sync_result_encoded_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.sugarcrm.com/sugarcrm"
        type = (schema, "get_quick_sync_result_encoded")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            #ns = ns0.get_quick_sync_result_encoded_Def.schema
            TClist = [ZSI.TC.String(pname="result", aname="_result", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="result_count", aname="_result_count", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="next_offset", aname="_next_offset", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="total_count", aname="_total_count", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.sugarcrm.com/sugarcrm","error_value",lazy=False)(pname="error", aname="_error", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._result = None
                    self._result_count = None
                    self._next_offset = None
                    self._total_count = None
                    self._error = None
                    return
            Holder.__name__ = "get_quick_sync_result_encoded_Holder"
            self.pyclass = Holder

    class return_document_revision_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.sugarcrm.com/sugarcrm"
        type = (schema, "return_document_revision")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            #ns = ns0.return_document_revision_Def.schema
            TClist = [GTD("http://www.sugarcrm.com/sugarcrm","document_revision",lazy=False)(pname="document_revision", aname="_document_revision", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.sugarcrm.com/sugarcrm","error_value",lazy=False)(pname="error", aname="_error", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._document_revision = None
                    self._error = None
                    return
            Holder.__name__ = "return_document_revision_Holder"
            self.pyclass = Holder

# end class ns0 (tns: http://www.sugarcrm.com/sugarcrm)

# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:
