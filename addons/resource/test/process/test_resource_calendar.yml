-  | 
  In order to test resource calendar, I use the Demo record '38 Hours/Week'.
-
  I check the working hour on day for resource 'Demo Resource' using calendar '38 Hours/Week' .
-
  !python {model: resource.calendar}: |
    from datetime import datetime
    dt = datetime.now()
    calendar = self.browse(cr, uid,  ref('timesheet_group1'))
    result = self.working_hours_on_day(cr, uid, calendar, dt, context)
    assert result, "No Working Our on Day for Resource has been Generated."
-
  I Check the Resource 6.0 Hours Working Internal Timing Based on Resource Calendar.
-
  !python {model: resource.calendar}: |
    from datetime import datetime
    dt = datetime.now()
    result = self.interval_get(cr, uid, ref('timesheet_group1'), dt, 6.0, ref('resource_resource_demorsource'))
    assert result, 'No Working Internal Timeming Generated'
    
-
  I check total number of working hours on resource in between three dates based on resource working calendar.
-
  !python {model: resource.calendar}: |
    from datetime import datetime, timedelta
    dt_from = datetime.now()
    dt_to = dt_from  + timedelta(days=3)
    hours = self.interval_hours_get(cr, uid, ref('timesheet_group1'), dt_from, dt_to)
    assert hours, 'No Working Hours Generated'
-
  I check resource working schedule based on resource calendar for 30 Hours.
-
  !python {model: resource.calendar}: |
    from datetime import datetime, timedelta
    dt_from = datetime.now()
    hours = self.interval_min_get(cr, uid, ref('timesheet_group1'), dt_from, 30.0, resource=ref('resource_resource_demorsource'))
    assert hours, 'No Working Schedule Generated.'
