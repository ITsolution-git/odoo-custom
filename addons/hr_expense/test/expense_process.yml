-
  In Order to test process of "Employee Expenses".
-
  I confirm "Expense Bill of September" of one employee of Marketing Department.
-
  !workflow {model: hr.expense.expense, action: confirm, ref: sep_expenses}
-
  I check state of expense after confirmed
-
  !assert {model: hr.expense.expense, id: sep_expenses}:
    - state == 'confirm'
-
  I accept this expense.
-
  !workflow {model: hr.expense.expense, action: validate, ref: sep_expenses}
-
  I make Invoice for the expense.
-
  !python {model: hr.expense.expense}: |
    self.invoice(cr, uid, [ref('sep_expenses')])
    
-
  I check invoice details after invoiced.
-
  !python {model: hr.expense.expense}: |
    sep_expenses = self.browse(cr, uid, ref("sep_expenses"), context=context)
    assert sep_expenses.state == 'invoiced', "Expense should be in 'Invoiced' state."
    assert sep_expenses.invoice_id, "Expense should have link of Invoice."
-
  I paid the expense
-
  !python {model: hr.expense.expense}: |
    self.expense_paid(cr, uid, [ref('sep_expenses')])
-
  I check the expense after paid.
-
  !assert {model: hr.expense.expense, id: sep_expenses}:
    - state == 'paid'
-
  I print this expense
- 
  !python {model: hr.expense.expense}: |
    import netsvc, tools, os
    (data, format) = netsvc.LocalService('report.hr.expense').create(cr, uid, [ref('hr_expense.sep_expenses')], {}, {})
    if tools.config['test_report_directory']:
        file(os.path.join(tools.config['test_report_directory'], 'hr_expense-report.'+format), 'wb+').write(data)
