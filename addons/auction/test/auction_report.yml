-
  In order to test the PDF reports defined on auction, we will print a Action Artist
- 
  !python {model: auction.lots}: |
    import netsvc, tools, os
    (data, format) = netsvc.LocalService('report.auction.artists').create(cr, uid, [ref('auction.auction_deposit_1_lot_1'),ref('auction.auction_deposit_1_lot_2')], {}, {})
    if tools.config['test_report_directory']:
        file(os.path.join(tools.config['test_report_directory'], 'action_artist_report.'+format), 'wb+').write(data)

-
  In order to test the PDF reports defined on auction, we will print a Action Bid
- 
  !python {model: auction.bid}: |
    import netsvc, tools, os
    (data, format) = netsvc.LocalService('report.auction.bids').create(cr, uid, [ref('auction.auction_date_1_bid_3'),ref('auction.auction_date_1_bid_4')], {}, {})
    if tools.config['test_report_directory']:
        file(os.path.join(tools.config['test_report_directory'], 'action_bid_report.'+format), 'wb+').write(data)
-
  In order to test the PDF reports defined on auction, we will print a Seller Form Report
- 
  !python {model: auction.lots}: |
    import netsvc, tools, os
    (data, format) = netsvc.LocalService('report.seller_form_report').create(cr, uid, [ref('auction.auction_date_1_bid_3'),ref('auction.auction_date_1_bid_4')], {}, {})
    if tools.config['test_report_directory']:
        file(os.path.join(tools.config['test_report_directory'], 'seller_form_report.'+format), 'wb+').write(data)
-
  In order to test the PDF reports defined on auction, we will print a lots list Report
- 
  !python {model: auction.lots}: |
    import netsvc, tools, os
    (data, format) = netsvc.LocalService('report.lots.list').create(cr, uid, [ref('auction.auction_date_1_bid_3'),ref('auction.auction_date_1_bid_4')], {}, {})
    if tools.config['test_report_directory']:
        file(os.path.join(tools.config['test_report_directory'], 'lots_list_report.'+format), 'wb+').write(data)
-
  In order to test the PDF reports defined on auction, we will print a lots inventory Report
- 
  !python {model: auction.lots}: |
    import netsvc, tools, os
    (data, format) = netsvc.LocalService('report.lots.list.inventory').create(cr, uid, [ref('auction.auction_date_1_bid_3'),ref('auction.auction_date_1_bid_4')], {}, {})
    if tools.config['test_report_directory']:
        file(os.path.join(tools.config['test_report_directory'], 'lots_inventory_report.'+format), 'wb+').write(data)
-
  In order to test the PDF reports defined on auction, we will print a deposit seller Report
- 
  !python {model: auction.lots}: |
    import netsvc, tools, os
    (data, format) = netsvc.LocalService('report.deposit.seller').create(cr, uid, [ref('auction.auction_date_1_bid_3'),ref('auction.auction_date_1_bid_4')], {}, {})
    if tools.config['test_report_directory']:
        file(os.path.join(tools.config['test_report_directory'], 'deposit_seller_report.'+format), 'wb+').write(data)
-
  In order to test the PDF reports defined on auction, we will print a catalog
-
  !python {model: auction.dates}: |
    import netsvc, tools, os
    (data, format) = netsvc.LocalService('report.auction.cat_flagy').create(cr, uid, [ref('auction.auction_date_2')], {}, {})
    if tools.config['test_report_directory']:
        file(os.path.join(tools.config['test_report_directory'], 'auction-catalog_list.'+format), 'wb+').write(data)
-
  In order to test the PDF reports defined on auction, we will print buyer form report
-
  !python {model: auction.lots}: |
    import netsvc, tools, os
    (data, format) = netsvc.LocalService('report.buyer_form_report').create(cr, uid, [ref('auction.auction_date_2')], {}, {})
    if tools.config['test_report_directory']:
        file(os.path.join(tools.config['test_report_directory'], 'auction-buyer_form.'+format), 'wb+').write(data)
-
  In order to test the PDF reports defined on auction, we will print bids phones report
-
  !python {model: auction.lots}: |
    import netsvc, tools, os
    (data, format) = netsvc.LocalService('report.bids.phones.details').create(cr, uid, [ref('auction.auction_date_2')], {}, {})
    if tools.config['test_report_directory']:
        file(os.path.join(tools.config['test_report_directory'], 'auction-bids_phones_details.'+format), 'wb+').write(data)
-
  In order to test the PDF reports defined on a auction, we will print a Auction Total
- 
  !python {model: auction.lots}: |
    import netsvc, tools, os
    (data, format) = netsvc.LocalService('report.auction.total.rml').create(cr, uid, [ref('auction.auction_deposit_2_lot_1'),ref('auction.auction_deposit_2_lot_2')], {}, {})
    if tools.config['test_report_directory']:
        file(os.path.join(tools.config['test_report_directory'], 'action_total_report.'+format), 'wb+').write(data)

-
  In order to test the PDF reports defined on a auction, we will print a Auction Result
- 
  !python {model: auction.lots}: |
    import netsvc, tools, os
    (data, format) = netsvc.LocalService('report.auction.result').create(cr, uid, [ref('auction.auction_deposit_3_lot_1'),ref('auction.auction_deposit_3_lot_2')], {}, {})
    if tools.config['test_report_directory']:
        file(os.path.join(tools.config['test_report_directory'], 'action_result_report.'+format), 'wb+').write(data)

-
  In order to test the PDF reports defined on a auction, we will print a Auction Lot
- 
  !python {model: auction.lots}: |
    import netsvc, tools, os
    (data, format) = netsvc.LocalService('report.bids.lots').create(cr, uid, [ref('auction.auction_deposit_4_lot_1'),ref('auction.auction_deposit_4_lot_2')], {}, {})
    if tools.config['test_report_directory']:
        file(os.path.join(tools.config['test_report_directory'], 'action_lot_report.'+format), 'wb+').write(data)  