-
  I Set working period to  Project 'Integrate a Sale and Warehouse Management'
-
  !python {model: project.project}: |
    self.write(cr, uid, [ref("project.project_integrate_openerp")], {'resource_calendar_id': ref("resource.timesheet_group1")})
-
  I update the constrain and the "Collect Requirement and Make SRS" to not start before 4 days.
-
   !python {model : project.phase }: |
      pass
      import datetime
      from dateutil.relativedelta import *
      start = datetime.date.today() + relativedelta(days=4)
      self.write(cr,uid, [(ref("project_phase_1"))], {'constraint_date_start': start})
-
  I Schedule Phases of Project.
-
  !python {model: project.project}: |
    self.schedule_phases(cr, uid, ref("project.project_integrate_openerp"))
-
  Now I create a record to compute the phase of project.
-
  !record {model: project.compute.phases, id: project_compute_phases01}:
    target_project: 'one'
    project_id: project.project_integrate_openerp
-
  I schedule the phases.
-
  !python {model: project.compute.phases}: |
    self.check_selection(cr, uid, [ref("project_compute_phases01")])
-
  Check if phases scheduled, check that either of phase's start_date, end_date and user_id is not null
-
  !python {model: project.project}: |
     prj=self.browse(cr, uid, [ref("project.project_integrate_openerp")])[0]
     for phase in prj.phase_ids:
        if (not phase.date_start) or (not phase.date_end):
            raise AssertionError("Phase not scheduled")
-
  After scheduling, I check the starting date and ending date on the phases are correct.
-
  !python {model: project.phase}: |
     import datetime
     from dateutil.relativedelta import *
     minstart = (datetime.date.today() + relativedelta(days=4)).strftime('%Y-%m-%d')
     minend = (datetime.date.today() + relativedelta(days=5)).strftime('%Y-%m-%d')

     phase1=self.browse(cr, uid, ref('project_phase_1'))
     assert phase1.date_start>=minstart, 'Error, the Collect Requirement and Make SRS phase '+phase1.date_start+' should start after '+str(minstart)
     assert phase1.date_end>=minend, 'Error, the Collect Requirement and Make SRS phase should end after '+str(minend)

     phase2=self.browse(cr, uid, ref('project_phase_2'))
     assert phase2.date_start>=phase1.date_end, 'Error, the phase Design Model should start after the end of the Collect Requirement and Make SRS phase'

     phase3=self.browse(cr, uid, ref('project_phase_3'))
     assert phase3.date_start>=phase2.date_end, 'Error, the phase Development and Integration should start after the end of the Design Model phase'

     phase4=self.browse(cr, uid, ref('project_phase_4'))
     assert phase4.date_start>=phase3.date_end, 'Error, the phase Review and Testing should start after the end of the Development and Integration phase'

     phase5=self.browse(cr, uid, ref('project_phase_5'))
     assert phase5.date_start>=phase4.date_end, 'Error, the phase Deployement and Training start after the end of the Review and Testing phase'
     assert phase5.date_start<phase5.date_end, 'Error, the phase Deployement and Training start before ending'