-
  I create a draft Sale Order
-
  !record {model: sale.order, id: sale_order_edi_1}:
    partner_id: base.res_partner_agrolait
    partner_invoice_id: base.res_partner_address_8invoice
    partner_order_id: base.res_partner_address_8invoice
    partner_shipping_id: base.res_partner_address_8invoice
    pricelist_id: 1
    order_line:
      - product_id: product.product_product_pc1
        product_uom_qty: 1.0
        product_uom: 1
        price_unit: 150.0
        name: 'Basic pc'
    order_line:
      - product_id: product.product_product_pc3
        product_uom_qty: 10.0
        product_uom: 1
        price_unit: 200.0
        name: 'Medium pc'
-
  I confirm the sale order
-
  !workflow {model: sale.order, ref: sale_order_edi_1, action: order_confirm}
-
  Then I export the sale order via EDI
-
  !python {model: edi.document}: |
    sale_order = self.pool.get('sale.order')
    so = sale_order.browse(cr, uid, ref("sale_order_edi_1"))
    token = self.export_edi(cr, uid, [so])
    assert token, 'Invalid EDI Token'
-
  Then I import a sample EDI document of a purchase order
-
  !python {model: edi.document}: |
    sale_order_pool = self.pool.get('sale.order')
    edi_document = {
        "__id": "purchase:5af1272e-dd26-11e0-b65e-701a04e25543.purchase_order_test",
        "__module": "purchase",
        "__model": "purchase.order",
        "__import_module": "sale",
        "__import_model": "sale.order",
        "__version": [6,1,0],
        "name": "PO00011",
        "date_order": "2011-09-12",
        "currency": {
                "__id": "base:5af1272e-dd26-11e0-b65e-701a04e25543.EUR",
                "__module": "base",
                "__model": "res.currency",
                "code": "EUR",
                "symbol": "â‚¬",
        },
        "company_id": ["base:5af1272e-dd26-11e0-b65e-701a04e25543.main_company", "Client S.A."],
        "company_address": {
                "__id": "base:5af1272e-dd26-11e0-b65e-701a04e25543.some_address",
                "__module": "base",
                "__model": "res.partner.address",
                "phone": "(+32).81.81.37.00", 
                "street": "Chaussee de Namur 40", 
                "city": "Gerompont", 
                "zip": "1367", 
                "country_id": ["base:5af1272e-dd26-11e0-b65e-701a04e25543.be", "Belgium"],
                "bank_ids": [
                    ["base:5af1272e-dd26-11e0-b65e-701a04e25543.res_partner_bank-adaWadsadasdDJzGbp","Ladies bank: 032465789-156113"]
                ],
        }, 
        "partner_id": ["purchase:5af1272e-dd26-11e0-b65e-701a04e25543.res_partner_test20", "jones white"], 
        "partner_address": {
                "__id": "base:5af1272e-dd26-11e0-b65e-701a04e25543.res_partner_address_7wdsjasdjh",
                "__module": "base",
                "__model": "res.partner.address",
                "phone": "(+32).81.81.37.00", 
                "street": "Chaussee de Namur 40", 
                "city": "Gerompont", 
                "zip": "1367", 
                "country_id": ["base:5af1272e-dd26-11e0-b65e-701a04e25543.be", "Belgium"], 
        },
        "order_line": [{
                "__id": "purchase:5af1272e-dd26-11e0-b65e-701a04e25543.purchase_order_line-AlhsVDZGoKvJ", 
                "__module": "purchase", 
                "__model": "purchase.order.line",
                "__import_module": "sale", 
                "__import_model": "sale.order.line", 
                "name": "Basic PC", 
                "date_planned": "2011-09-30", 
                "price_unit": 150.0, 
                "product_id": ["product:5af1272e-dd26-11e0-b65e-701a04e25543.product_product_pc1", "[PC1] Basic PC"],
                "product_qty": 1.0, 
                "product_uom": ["product:5af1272e-dd26-11e0-b65e-701a04e25543.product_uom_unit", "PCE"], 
        },
        {
                "__id": "purchase:5af1272e-dd26-11e0-b65e-701a04e25543.purchase_order_line-Alsads33e", 
                "__module": "purchase", 
                "__model": "purchase.order.line",
                "__import_module": "sale", 
                "__import_model": "sale.order.line",
                "name": "Medium PC", 
                "date_planned": "2011-09-15", 
                "price_unit": 100.0, 
                "product_id": ["product:5af1272e-dd26-11e0-b65e-701a04e25543.product_product_pc3", "[PC3] Medium PC"],
                "product_qty": 2.0, 
                "product_uom": ["product:5af1272e-dd26-11e0-b65e-701a04e25543.product_uom_unit", "PCE"], 
        }], 
    }
    new_sale_order_id = sale_order_pool.edi_import(cr, uid, edi_document, context=context)
    assert new_sale_order_id,  'Sale order import failed'
    order_new = sale_order_pool.browse(cr, uid, new_sale_order_id)

    # check bank info on partner
    assert len(order_new.partner_id.bank_ids) == 1, "Expected 1 bank entry related to partner"
    bank_info = order_new.partner_id.bank_ids[0]
    assert bank_info.acc_number == "Ladies bank: 032465789-156113", 'Expected "Ladies bank: 032465789-156113", got %s' % bank_info.acc_number

    assert order_new.pricelist_id.name == 'Public Pricelist' , "Public Price list was not automatically assigned"
    assert order_new.amount_total == 350, "Amount total is wrong"
    assert order_new.amount_untaxed == 350, "Untaxed amount is wrong"
    assert len(order_new.order_line) == 2, "Sale order lines mismatch"
    for sale_line in order_new.order_line:
        if sale_line.name == 'Basic PC':
            assert sale_line.delay == 18 , "incorrect delay: got %s, expected 18"%(sale_line.delay,)
            assert sale_line.product_uom.name == "PCE" , "uom is not same"
            assert sale_line.price_unit == 150 , "unit price is not same, got %s, expected 150"%(sale_line.price_unit,)
            assert sale_line.product_uom_qty == 1 , "product qty is not same"
        elif sale_line.name == 'Medium PC':
            assert sale_line.delay == 3 , "incorrect delay: got %s, expected 3"%(sale_line.delay,)
            assert sale_line.product_uom.name == "PCE" , "uom is not same"
            assert sale_line.price_unit == 100 , "unit price is not same, got %s, expected 100"%(sale_line.price_unit,)
            assert sale_line.product_uom_qty == 2 , "product qty is not same"
        else:
            raise AssertionError('unknown order line: %s' % sale_line)