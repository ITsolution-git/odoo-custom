-
  In order to test the Sale order flow, I compute the total of the listed products.
  "New server config + material" product price is 123.20 and ordered 1 'PCE'
  "Basic PC" product price is 450.50 and ordered 3 'PCE'
  "Medium PC" product price is 900 and ordered 5 'PCE'
  "Mainboard ASUStek A7N8X" product price is 88 and ordered 5 'PCE'
  So, Total should be [(123.20*1)+(450.50*3)+(900*5)+(88*5)] = 6414.70
-
  I check the total untaxed amount of the Quotation is correctly computed
-
  !assert {model: sale.order, id: order, string: The amount of the Quotation is not correctly computed}:
    - sum([l.price_subtotal for l in order_line]) == amount_untaxed
-
  I confirm the Quotation.
-
  !workflow {model: sale.order, action: order_confirm, ref: order}
-
  I check the "In Progress" status  after confirmed Quotation.
-
  !assert {model: sale.order, id: order}:
    - state == 'progress'
-
  I check that Packing details after confirmed Quotation.
-
  !python {model: sale.order}: |
    from datetime import datetime, timedelta
    from dateutil.relativedelta import relativedelta
    from tools import DEFAULT_SERVER_DATE_FORMAT, DEFAULT_SERVER_DATETIME_FORMAT
    sale_order = self.browse(cr, uid, ref("order"))
    assert len(sale_order.picking_ids) >= 1, "Packing should be one"

    for picking in sale_order.picking_ids:
      assert picking.state == "auto" or "confirmed", "Packing state should be in waitting state"
      assert picking.origin == sale_order.name,"Packing Name is not correspond with sale order"
      assert picking.type == 'out',"Packing type should be sending Goods"
      assert picking.move_type == sale_order.picking_policy,"Packing move type should be Partial Delivery"
      assert picking.sale_id.id == sale_order.id,"Sale order is not correspond"
      assert picking.address_id.id == sale_order.partner_shipping_id.id,"Address is not correspond with sale order"
      assert picking.note == sale_order.note,"Notes is not correspond with sale order"
      assert picking.invoice_state == (sale_order.order_policy=='picking' and '2binvoiced') or 'none',"Invoice state is not correspond with sale order"
      assert picking.company_id.id == sale_order.company_id.id,"Company is not correspond with sale order"
      for index in range(0,len(picking.move_lines)):
        location_id = sale_order.shop_id.warehouse_id.lot_stock_id.id
        output_id = sale_order.shop_id.warehouse_id.lot_output_id.id
        date_planned = datetime.strptime(sale_order.date_order, DEFAULT_SERVER_DATE_FORMAT) + relativedelta(days=sale_order.order_line[index].delay or 0.0)
        date_planned = (date_planned - timedelta(days=sale_order.company_id.security_lead)).strftime(DEFAULT_SERVER_DATETIME_FORMAT)
        assert picking.move_lines[index].name == sale_order.order_line[index].name[:64],"Name is not correspond"
        assert picking.move_lines[index].product_id.id == sale_order.order_line[index].product_id.id,"Product is not correspond"
        assert picking.move_lines[index].date == date_planned,"Plane date is not correspond"
        assert picking.move_lines[index].date_expected == date_planned,"Expected date is not correspond"
        assert picking.move_lines[index].product_qty == sale_order.order_line[index].product_uom_qty,"Product Quantity is not correspond"
        assert picking.move_lines[index].product_uom.id == sale_order.order_line[index].product_uom.id,"Product UOM is not correspond"
        assert picking.move_lines[index].product_uos_qty == sale_order.order_line[index].product_uos_qty,"Product UOS Quantity is not correspond"
        assert picking.move_lines[index].product_uos == (sale_order.order_line[index].product_uos and sale_order.order_line[index].product_uos.id) or sale_order.order_line[index].product_uom.id,"Product UOS is not correspond"
        assert picking.move_lines[index].product_packaging.id == sale_order.order_line[index].product_packaging.id,"Product packaging is not correspond"
        assert picking.move_lines[index].address_id.id == sale_order.order_line[index].address_allotment_id.id or sale_order.partner_shipping_id.id,"Address is not correspond"
        assert picking.move_lines[index].location_id.id == location_id,"Source Location is not correspond"
        assert picking.move_lines[index].note == sale_order.order_line[index].notes,"Notes is not correspond"
        assert picking.move_lines[index].company_id.id == sale_order.company_id.id,"Company is not correspond"
        assert picking.move_lines[index].price_unit == sale_order.order_line[index].product_id.standard_price or 0.0,"Price Unit is not correspond"
