-
  In order to test the Sale module in OpenERP,
  I create a Sale Order for Slider Mobile for qty 500 having Shipping Policy is 'Invoice from Picking'
-
  !record {model: sale.order, id: sale_order_so7}:
    date_order: !eval time.strftime('%Y-%m-%d')
    invoice_quantity: order
    name: Test_SO007
    order_line:
      - name: Slider Mobile
        price_unit: 200
        product_uom: product.product_uom_unit
        product_uom_qty: 500.0
        state: draft
        delay: 7.0
        product_id: sale.product_product_slidermobile0
        product_uos_qty: 500.0
        th_weight: 0.0
        type: make_to_order
    order_policy: picking
    partner_id: sale.res_partner_cleartrail0
    partner_invoice_id: sale.res_partner_address_2
    partner_order_id: sale.res_partner_address_1
    partner_shipping_id: sale.res_partner_address_3
    picking_policy: direct
    pricelist_id: product.list0
    shop_id: sale.shop
-
  I confirm the sale order.
-
  !workflow {model: sale.order, action: order_confirm, ref: sale_order_so7}
-
  I verify that picking has been generated for the sale order.
-
  !python {model: sale.order}: |
    so = self.browse(cr, uid, ref("sale_order_so7"))
    assert so.picking_ids,"Picking has not been generated for sale_order_so7"
-
  Then I done the picking
-
  !python {model: stock.picking }: |
   import time
   sale_order_obj = self.pool.get('sale.order')
   so = sale_order_obj.browse(cr, uid, ref("sale_order_so7"))
   picking_id = self.search(cr, uid, [('origin','=',so.name),('type','=','out')])
   if picking_id:
      pick=self.browse(cr,uid,picking_id[0])
      pick.force_assign(cr, uid)
      partial_datas = {
           'partner_id':pick.address_id.partner_id.id,
            'address_id': pick.address_id.id,
            'delivery_date' : time.strftime('%Y-%m-%d'),
           }
      move = pick.move_lines[0]
      partial_datas['move%s'%(move.id)]= {
          'product_id': move.product_id.id,
          'product_qty': move.product_qty,
          'product_uom': move.product_uom.id,
      }
      self.do_partial(cr, uid, [pick.id],partial_datas)
-
  Then I click on 'Create Invoices' button
-
  !python {model: stock.invoice.onshipping}: |
    import time
    sale_obj=self.pool.get('sale.order')
    sale_id=sale_obj.browse(cr, uid, ref("sale_order_so7"))
    ids = [x.id for x in sale_id.picking_ids]
    wiz_id = self.create(cr, uid, {'invoice_date': time.strftime('%Y-%m-%d'), 'journal_id': ref('account.sales_journal')},
      {'active_ids': ids})
    self.create_invoice(cr, uid, [wiz_id], {"active_ids": ids, "active_id": ids[0]})
-
  I check that an invoice has been created.
-
  !python {model: sale.order}: |
    sale_id=self.browse(cr, uid, ref("sale_order_so7"))
    assert(sale_id.invoice_ids), "Invoice has not been created"
-
  I open the Invoice for the SO.
-
  !python {model: account.invoice}: |
    sale_order_obj = self.pool.get('sale.order')
    so = sale_order_obj.browse(cr, uid, ref("sale_order_so7"))
    import netsvc
    wf_service = netsvc.LocalService("workflow")
    invoice_ids = so.invoice_ids
    for invoice in invoice_ids:
        wf_service.trg_validate(uid, 'account.invoice',invoice.id,'invoice_open', cr)
-
  Assign analytic journal into bank journal
-
  !record {model: account.journal, id: sale.account_journal_bankjournal0}:
    analytic_journal_id: account.cose_journal_sale
-
  I pay the invoice
-
  !python {model: account.invoice}: |
    sale_order_obj = self.pool.get('sale.order')
    so = sale_order_obj.browse(cr, uid, ref("sale_order_so7"))
    invoice_id = self.search(cr, uid, [('origin','like',so.name),('state','=','open')])
    self.pay_and_reconcile(cr, uid, invoice_id,
        255000.0, ref('account.cash'), ref('account.period_8'),
        ref('sale.account_journal_bankjournal0'), ref('account.cash'),
        ref('account.period_8'), ref('sale.account_journal_bankjournal0'),
        name='test')
-
  I verify the invoice is in paid state.
-
  !python {model: account.invoice}: |
    sale_order_obj = self.pool.get('sale.order')
    so = sale_order_obj.browse(cr, uid, ref("sale_order_so7"))
    invoice_ids = so.invoice_ids
    for invoice in invoice_ids:
        assert (invoice.state) =='paid', "Invoice for SO is not in done state."
-
  I check that Paid has been set to true.
-
  !python {model: sale.order}: |
    sale_id=self.browse(cr, uid, ref("sale_order_so7"))
    assert(sale_id.invoiced == True), "Paid has not been set to true"
-
  I verify that a procurement has been generated for so
-
  !python {model: procurement.order}: |
    from tools.translate import _
    sale_order_obj = self.pool.get('sale.order')
    so = sale_order_obj.browse(cr, uid, ref("sale_order_so7"))
    proc_ids = self.search(cr, uid, [('origin','=',so.name)])
    assert proc_ids, _('No Procurements!')
-
  Then I click on the "Run Procurement" button
-
  !python {model: procurement.order}: |
    sale_order_obj = self.pool.get('sale.order')
    so = sale_order_obj.browse(cr, uid, ref("sale_order_so7"))
    import netsvc
    wf_service = netsvc.LocalService("workflow")
    proc_ids = self.search(cr, uid, [('origin','=',so.name)])
    for proc in proc_ids:
      wf_service.trg_validate(uid, 'procurement.order',proc,'button_check', cr)
-
  I verify that a procurement state is "running"
-
  !python {model: procurement.order}: |
    from tools.translate import _
    modules = self.pool.get('ir.module.module')
    mod_pur = modules.search(cr, uid, [('name','=','purchase')])
    mod_brw = modules.browse(cr,uid,mod_pur)[0]
    if (mod_brw.state == 'installed'):
        sale_order_obj = self.pool.get('sale.order')
        so = sale_order_obj.browse(cr, uid, ref("sale_order_so7"))
        proc_ids = self.search(cr, uid, [('origin','=',so.name),('state','=','running')])
        assert proc_ids, _('Procurement is not in the running state!')
-
  I verify that a purchase order has been generated
-
  !python {model: sale.order}: |
    from tools.translate import _
    modules = self.pool.get('ir.module.module')
    mod_pur = modules.search(cr, uid, [('name','=','purchase')])
    mod_brw = modules.browse(cr,uid,mod_pur)[0]
    if (mod_brw.state == 'installed'):
        so = self.browse(cr, uid, ref("sale_order_so7"))
        pur_obj=self.pool.get('purchase.order')
        pur_id=pur_obj.search(cr, uid, [('origin','=',so.name)])
        assert pur_id, _('Purchase order has not been generated')
-
  I click on the "Confirm" button to confirm the purchase order
-
  !python {model: sale.order}: |
    from tools.translate import _
    modules = self.pool.get('ir.module.module')
    mod_pur = modules.search(cr, uid, [('name','=','purchase')])
    mod_brw = modules.browse(cr,uid,mod_pur)[0]
    if (mod_brw.state == 'installed'):
        pur_obj=self.pool.get('purchase.order')
        so = self.browse(cr, uid, ref("sale_order_so7"))
        import netsvc
        wf_service = netsvc.LocalService("workflow")
        pur_ids = pur_obj.search(cr, uid, [('origin','=',so.name)])
        for pur in pur_ids:
          wf_service.trg_validate(uid, 'purchase.order',pur,'purchase_confirm', cr)
-
  I click on the "Approved by supplier" button to approve the purchase order
-
  !python {model: sale.order}: |
    from tools.translate import _
    modules = self.pool.get('ir.module.module')
    mod_pur = modules.search(cr, uid, [('name','=','purchase')])
    mod_brw = modules.browse(cr,uid,mod_pur)[0]
    if (mod_brw.state == 'installed'):
        pur_obj = self.pool.get('purchase.order')
        so = self.browse(cr, uid, ref("sale_order_so7"))
        import netsvc
        wf_service = netsvc.LocalService("workflow")
        pur_ids = pur_obj.search(cr, uid, [('origin','=',so.name)])
        for pur in pur_ids:
          wf_service.trg_validate(uid, 'purchase.order',pur,'purchase_approve', cr)
-
  I verify that a picking related to purchase order has been generated.
-
  !python {model: sale.order}: |
    modules = self.pool.get('ir.module.module')
    mod_pur = modules.search(cr, uid, [('name','=','purchase')])
    mod_brw = modules.browse(cr,uid,mod_pur)[0]
    if (mod_brw.state == 'installed'):
        pur_obj = self.pool.get('purchase.order')
        so = self.browse(cr, uid, ref("sale_order_so7"))
        pur_id = pur_obj.search(cr, uid, [('origin','=',so.name)])
        po = pur_obj.browse(cr, uid, pur_id)[0]
        assert(po.picking_ids),"Picking for purchase order has not been generated"
-
  Then I click on the "Products Received" button of Incoming Shipments
-
  !record {model: stock.partial.picking, id: stock_partial_picking_0}:
    date: !eval time.strftime('%Y-%m-%d %H:%M:%S')
-
  I click on the "Validate" button
-
  !python {model: stock.picking}: |
    modules = self.pool.get('ir.module.module')
    mod_pur = modules.search(cr, uid, [('name','=','purchase')])
    mod_brw = modules.browse(cr,uid,mod_pur)[0]
    if (mod_brw.state == 'installed'):
        sale_order_obj = self.pool.get('sale.order')
        pur_obj = self.pool.get('purchase.order')
        so = sale_order_obj.browse(cr, uid, ref("sale_order_so7"))
        pur_id = pur_obj.search(cr, uid, [('origin','=',so.name)])
        po = pur_obj.browse(cr, uid, pur_id)[0]
        pick_ser_id = self.search(cr, uid, [('purchase_id', '=', po.id )])
        import netsvc
        wf_service = netsvc.LocalService("workflow")
        for pick in pick_ser_id:
          wf_service.trg_validate(uid, 'stock.picking',pick,'button_done', cr)
-
  I verify that picking for purchase order has been done.
-
  !python {model: sale.order}: |
    from tools.translate import _
    modules = self.pool.get('ir.module.module')
    mod_pur = modules.search(cr, uid, [('name','=','purchase')])
    mod_brw = modules.browse(cr,uid,mod_pur)[0]
    if (mod_brw.state == 'installed'):
        pur_obj = self.pool.get('purchase.order')
        so = self.browse(cr, uid, ref("sale_order_so7"))
        pur_id = pur_obj.search(cr, uid, [('origin','=',so.name)])
        po = pur_obj.browse(cr, uid, pur_id)[0]
        picking_obj = self.pool.get('stock.picking')
        ids = picking_obj.search(cr, uid, [('purchase_id', '=', po.id ),('state', '=', 'done')])
        assert ids, _('Picking is not in the done state!')
-
  I verify that delivery order has been generated for sale order
-
  !python {model: stock.picking }: |
   sale_order_obj = self.pool.get('sale.order')
   so = sale_order_obj.browse(cr, uid, ref("sale_order_so7"))
   picking_id = self.search(cr, uid, [('origin','=',so.name)])
   assert (picking_id),"Delivery order has not been generated"
-
  I verify that delivery has been done
-
  !python {model: stock.picking }: |
   import time
   sale_order_obj = self.pool.get('sale.order')
   so = sale_order_obj.browse(cr, uid, ref("sale_order_so7"))
   picking_id = self.search(cr, uid, [('origin','=',so.name)])
   if picking_id:
      pick=self.browse(cr,uid,picking_id[0])
      pick.force_assign(cr, uid)
      partial_datas = {
           'partner_id':pick.address_id.partner_id.id,
            'address_id': pick.address_id.id,
            'delivery_date' : time.strftime('%Y-%m-%d'),
           }
      move = pick.move_lines[0]
      partial_datas['move%s'%(move.id)]= {
          'product_id': move.product_id.id,
          'product_qty': move.product_qty,
          'product_uom': move.product_uom.id,
      }
      self.do_partial(cr, uid, [pick.id],partial_datas)
-
  I verify that delivery state is done
-
  !python {model: stock.picking }: |
   sale_order_obj = self.pool.get('sale.order')
   so = sale_order_obj.browse(cr, uid, ref("sale_order_so7"))
   picking_id = self.search(cr, uid, [('origin','=',so.name)])
   if picking_id:
     pick = self.browse(cr,uid,picking_id[0])
     assert (pick.state) =='done', "Picking for SO is not in done state."
-
  I verify that a "Picked" has been set to true
-
  !python {model: sale.order}: |
    so = self.browse(cr, uid, ref("sale_order_so7"))
    assert (so.shipped == True), "Picked has not been set to True"
-
  I verify that a sale order is in done state
-
   !python {model: sale.order}: |
    so = self.browse(cr, uid, ref("sale_order_so7"))
    assert (so.state == 'done'), "Sale order is not in the done state."

