-
  I assign an email address to Administrator.
-
  !record {model: res.users, id: base.user_root}:
    user_email: admin@openerp.com
-
  Now, Test project template feature
-
  Create test project 'OpenERP Test Programme'
-
  !record {model: project.project, id: project_project_testprogramme0}:
    company_id: base.main_company
    name: OpenERP Training Programm
-
  Create analytic account.
-
  !record {model: account.analytic.account, id: account_analytic_account0}:
    name : account_analytic_account
    partner_id: base.res_partner_asus
-
  Create project 'OpenERP Training Programme'
-
  !record {model: project.project, id: project_project_openerptrainingprogramme0}:
    company_id: base.main_company
    parent_id: account_analytic_account0
    partner_id: base.res_partner_asus
    name: OpenERP Training Programme
    date_start: !eval time.strftime('%Y-%m-%d')
    date: !eval time.strftime('%Y-%m-%d')
-
  Create task 'Technical Training' for this project
-
  !record {model: project.task, id: project_task_technicaltraining0}:
    date_start: !eval time.strftime('%Y-%m-%d %H:%M:%S')
    name: Technical Training
    user_id: base.user_root
    planned_hours: 30.0
    project_id: project_project_openerptrainingprogramme0
    remaining_hours: 30.0
    state: draft
-
  Create task 'Training' for this project
-
  !record {model: project.task, id: project_task_child0}:
    date_start: !eval time.strftime('%Y-%m-%d %H:%M:%S')
    name: Training
    planned_hours: 30.0
    project_id: project_project_openerptrainingprogramme0
    remaining_hours: 30.0
    state: done
-
  Create task 'Functional Training' for this project
-
  !record {model: project.task, id: project_task_functionaltraining0}:
    date_start: !eval time.strftime('%Y-%m-%d %H:%M:%S')
    name: Functional Training
    planned_hours: 30.0
    project_id: project_project_openerptrainingprogramme0
    remaining_hours: 30.0
    child_ids:
      - project_task_child0
    state: draft
-
  Set project's task view
-
  !python {model: project.task}: |
    context.update({'project_id': ref('project_task_functionaltraining0')})
    self._default_project(cr, uid,context)
    self.fields_view_get(cr, uid, view_id=None, view_type='form', context=None, toolbar=False, submenu=False)
    self.action_close
-
  Click on Draft button.
-
  !python {model: project.task}: |
    self.do_draft(cr, uid, [ref("project_task_functionaltraining0")], context={})
-
  Click on Start task button.
-
  !python {model: project.task}: |
    self.do_open(cr, uid,[ref("project_task_functionaltraining0")],context={})
-
  Click Pending button
-
  !python {model: project.task}: |
    self.do_pending(cr, uid, [ref("project_task_functionaltraining0")], context={})
-
  Click on Start task button.
-
  !python {model: project.task}: |
    self.do_open(cr, uid,[ref("project_task_functionaltraining0")],context={})
-
  Check child project.
-
  !python {model: project.task}: |
    self._check_child_task(cr, uid, [ref("project_task_functionaltraining0")])
-
  Do some changes on project without define partner.
-
  !python {model: project.task}: |
    self.onchange_project(cr, uid, [ref("project_task_functionaltraining0")],[])
-
  Do some changes on project.
-
  !python {model: project.task}: |
    self.onchange_project(cr, uid, [ref("project_task_functionaltraining0")],ref('project_project_openerptrainingprogramme0'))
-
  Change the type of project.
-
  !python {model: project.task}: |
    self._change_type(cr, uid,[ref("project_task_functionaltraining0")], next, context)
-
  Click on next Button for change the type of project task.
-
  !python {model: project.task}: |
    self.next_type(cr, uid,[ref("project_task_functionaltraining0")], context)
-
  Click on previous Button for go back to previous type of task.
-
  !python {model: project.task}: |
    self.prev_type(cr, uid,[ref("project_task_functionaltraining0")], context)
-
  Create work for project's task.
-
  !record {model: project.task.work, id: project_task_work0}:
    name: Technical Training Task's Work
    task_id: project_task_technicaltraining0
-
  Create project's Work
-
  !python {model: project.task.work}: |
    vals = {
           'name': 'Technical Training',
           'hours': 0.0,
           'task_id': ref('project_task_technicaltraining0'),
            }
    self.create(cr, uid, vals,context={"lang": "en_US", "active_ids": [ref("project_task_functionaltraining0")],"tz": False, "active_id": ref("project_task_functionaltraining0")})
-
  Add project's Work
-
  !python {model: project.task.work}: |
    vals = {
       'name': 'Technical Training',
       'hours': 0.0,
       'task_id': ref('project_task_technicaltraining0'),
        }
    self.write(cr, uid, [ref('project_task_work0')], vals, context={"lang": "en_US", "active_ids": [ref("project_task_functionaltraining0")],"tz": False, "active_id": ref("project_task_functionaltraining0")})
-
  Get project's Work
-
  !python {model: project.project}: |
    self._get_project_work(cr, uid, [ref("project_task_work0")], context={"lang": "en_US", "active_ids": [ref("project_task_functionaltraining0")],"tz": False, "active_id": ref("project_task_functionaltraining0")})
-
  Change the project's partner if needed.
-
  !python {model: project.project}: |
    self.onchange_partner_id(cr, uid, [ref("project_project_openerptrainingprogramme0")], part=ref('base.res_partner_asus'), context = {"lang": "en_US", "active_model": "ir.ui.menu", "active_ids": [ref("project.menu_open_view_project_all")],"tz": False, "active_id": ref("project.menu_open_view_project_all")})
-
  Set project as project template
-
  !python {model: project.project}: |
    self.set_template(cr, uid, [ref("project_project_openerptrainingprogramme0")],
      {"lang": "en_US", "active_model": "ir.ui.menu", "active_ids": [ref("project.menu_open_view_project_all")],
      "tz": False, "active_id": ref("project.menu_open_view_project_all"), })
-
  Check if project in template state
-
  !assert {model: project.project, id: project_project_openerptrainingprogramme0, severity: error, string: Project is in template state}:
       - state == "template"
-
  Create new project based on this template
-
  !python {model: project.project}: |
     new_prj = self.duplicate_template(cr, uid, [ref("project_project_openerptrainingprogramme0")],
      {"lang": "en_US", "active_model": "ir.ui.menu", "active_ids": [ref("project.menu_open_view_project_all")],
      "tz": False, "active_id": ref("project.menu_open_view_project_all"), })
     if not new_prj:
         raise Exception( "New project based on template not created")
     new_id = new_prj['res_id']
     new_prj = self.read(cr, uid, [new_id], ['name', 'state'])[0]
     state = new_prj['state']
     name = new_prj['name']
     assert state == 'open', "Project in %s state. Project created from template project must be in open state"%state
-
  Reset project template to normal project
-
  !python {model: project.project}: |
    self.reset_project(cr, uid, [ref("project_project_openerptrainingprogramme0")], {"lang": "en_US", "active_ids":
      [ref("project.menu_open_view_project_all")], "tz": False, "active_model":
      "ir.ui.menu", "project_id": False, "active_id": ref("project.menu_open_view_project_all"),
      })
-
  Check if project in open state
-
  !assert {model: project.project, id: project_project_openerptrainingprogramme0, severity: error, string: Project is in open state}:
       - state == "open"
-
  Test for different project-states
-
  Keep project pending
-
  !python {model: project.project}: |
    self.set_pending(cr, uid, [ref("project_project_openerptrainingprogramme0")], {"lang": "en_US", "active_ids":
      [ref("project.menu_open_view_project_all")], "tz": False, "active_model":
      "ir.ui.menu", "project_id": False, "active_id": ref("project.menu_open_view_project_all"),
      })
-
  Check if project in pending state
-
  !assert {model: project.project, id: project_project_openerptrainingprogramme0, severity: error, string: Project is in pending state}:
       - state == "pending"
-
  Cancel the project
-
  !python {model: project.project}: |
    self.set_cancel(cr, uid, [ref("project_project_openerptrainingprogramme0")], {"lang": "en_US", "active_ids":
      [ref("project.menu_open_view_project_all")], "tz": False, "active_model":
      "ir.ui.menu", "project_id": False, "active_id": ref("project.menu_open_view_project_all"),
      })
-
  Check if project in cancel state
-
  !assert {model: project.project, id: project_project_openerptrainingprogramme0, severity: error, string: Project is in cancel state}:
       - state == "cancelled"
-
  Re-open the project
-
  !python {model: project.project}: |
    self.set_open(cr, uid, [ref("project_project_openerptrainingprogramme0")], {"lang": "en_US", "active_ids": [ref("project.menu_open_view_project_all")],
      "tz": False, "active_model": "ir.ui.menu", "project_id": False, "active_id":
      ref("project.menu_open_view_project_all"), })
-
  Re-Check if project in open state
-
  !assert {model: project.project, id: project_project_openerptrainingprogramme0, severity: error, string: Project is in open state}:
       - state == "open"
-
  Test for task work allocation
-
  As i cancelled my project before, i check if the task 'Technical Training' is in cancelled state
-
  !assert {model: project.task, id: project_task_technicaltraining0, severity: error, string: Task is in cancelled state}:
       - state == "cancelled"
-
  Now in order to reactivate the task 'Technical Training', i click on the "Reactivate" button and fill the remaining hour field
-
  !record {model: project.task.reevaluate, id: project_task_technicaltraining_remainingwiz0}:
    remaining_hours: 30.0
- |
  Create the view for reevaluate the task.
-
  !python {model: project.task.reevaluate}: |
      self.fields_view_get(cr, uid, view_id=None, view_type='form', context=None, toolbar=False, submenu=False)
- |
  Now get the remaining hours required to close the task.
-
  !python {model: project.task.reevaluate}: |
      self._get_remaining(cr, uid,{'active_id':ref('project_task_functionaltraining0') })
- |
  I click the apply button.
-
  !python {model: project.task.reevaluate}: |
      self.compute_hours(cr, uid, [ref('project_task_technicaltraining_remainingwiz0')], {'active_id': ref("project_task_technicaltraining0"),'button_reactivate': True})
- |
  Check if task 'Technical Training' in  open state and for other initial values
-
  !assert {model: project.task, id: project_task_technicaltraining0, severity: error, string: Project is in open state}:
       - state == "open"
       - planned_hours == 30
       - remaining_hours == 30
       - delay_hours == 0.0
       - effective_hours == 0.0
-
  Make a work task entry 'Training on OpenERP modules, models and classes' of 10 hours
-
  !record {model: project.task, id: project_task_technicaltraining0, context:{'no_analytic_entry':True}}:
    work_ids:
      - date: !eval time.strftime('%Y-%m-%d %H:%M:%S')
        hours: 10.0
        name: Training on OpenERP modules, models and classes
        user_id: base.user_root
-
   Check for effective hours and remaining hours, effective_hours must be equal to 10
-
   !assert {model: project.task, id: project_task_technicaltraining0, severity: error, string: After work task of 10 hours effective_hours must be equal to 10}:
       - remaining_hours == 20
       - effective_hours == 10.0
-
  Make a work task entry 'Training on OpenERP xml views' of 10 hours
-
  !record {model: project.task, id: project_task_technicaltraining0, context:{'no_analytic_entry':True}}:
    work_ids:
      - date: !eval time.strftime('%Y-%m-%d %H:%M:%S')
        hours: 10.0
        name: Training on OpenERP xml views
        user_id: base.user_root
-
   Check for effective hours and remaining hours, effective_hours must be equal to 20
-
   !assert {model: project.task, id: project_task_technicaltraining0, severity: error, string: After one more work task of 10 hours effective_hours must be equal to 20}:
       - remaining_hours == 10
       - effective_hours == 20.0
-
  Make a work task entry 'Training on workflows' of 10 hours
-
  !record {model: project.task, id: project_task_technicaltraining0, context:{'no_analytic_entry':True}}:
    work_ids:
      - date: !eval time.strftime('%Y-%m-%d %H:%M:%S')
        hours: 10.0
        name: Training on workflows
        user_id: base.user_root
-
   Check for effective hours and remaining hours, effective_hours must be equal to 30
-
   !assert {model: project.task, id: project_task_technicaltraining0, severity: error, string: After one more work task of 10 hours effective_hours must be equal to 30}:
       - remaining_hours == 0
       - effective_hours == 30.0

-
  Set remaining hours of 10 hours for reevaluating the task
-
  !record {model: project.task.reevaluate, id: config_compute_remaining_0}:
    remaining_hours: 10.0
-
  Reevaluate the task
-
  !python {model: project.task.reevaluate}: |
    self.compute_hours(cr, uid, [ref("config_compute_remaining_0")], {"lang": "en_US",
      "project_id": False, "tz": False, "active_model": "project.task", "search_default_project_id":
      False, "search_default_user_id": 1, "search_default_current": 1, "active_ids":
      [ref("project_task_technicaltraining0")], "active_id": ref("project_task_technicaltraining0"), })

-
   Check for effective hours and remaining hours, remaining_hours must be 10 while planned_hours remains 30
-
   !assert {model: project.task, id: project_task_technicaltraining0, severity: error, string: After reevaluating the task with 10 hours remaining_hours must be 10 while planned_hours remains 30}:
       - planned_hours == 30
       - remaining_hours == 10.0
       - effective_hours == 30.0
-
  Make a work task entry 'Training on reports and wizards' of 10 hours
-
  !record {model: project.task, id: project_task_technicaltraining0, context:{'no_analytic_entry':True}}:
    work_ids:
      - date: !eval time.strftime('%Y-%m-%d %H:%M:%S')
        hours: 10.0
        name: Training on reports and wizards
        user_id: base.user_root
-
   Check for effective hours and remaining hours
-
   !assert {model: project.task, id: project_task_technicaltraining0, severity: error, string: After one more work task of 10 hours effective_hours must be equal to 40 while planned_hours remains 30}:
       - planned_hours == 30
       - remaining_hours == 0
       - effective_hours == 40.0
-
  Close the task
-
  !python {model: project.task}: |
    self.do_close(cr, uid, [ref("project_task_technicaltraining0")], {'mail_send': False})
-
  Check if task in done state
-
  !assert {model: project.task, id: project_task_technicaltraining0, severity: error, string: Task is in done state}:
       - state == "done"
-
  Test for task reactivation
-
  Reactivate task
-
  !record {model: project.task.reevaluate, id: config_compute_remaining_1}:
    remaining_hours: 10.0
-
  Reevaluate the task with 10 hours remaining
-
  !python {model: project.task.reevaluate}: |
    self.compute_hours(cr, uid, [ref("config_compute_remaining_1")], {"lang": "en_US",
      "project_id": False, "tz": False, "button_reactivate": True, "active_model":
      "project.task", "search_default_project_id": False, "search_default_user_id":
      1, "search_default_current": 1, "active_ids": [ref("project_task_technicaltraining0")], "active_id": ref("project_task_technicaltraining0"),
      })
-
   Check for effective hours and remaining hours, remaining_hours must be 10 while planned_hours remains 30
-
   !assert {model: project.task, id: project_task_technicaltraining0, severity: error, string: After reevaluating the task with 10 hours remaining_hours must be 10 while planned_hours remains 30}:
       - planned_hours == 30
       - remaining_hours == 10.0
       - effective_hours == 40.0
-
  Make a work task entry 'Training on yml' of 5 hours
-
  !record {model: project.task, id: project_task_technicaltraining0, context:{'no_analytic_entry':True}}:
    work_ids:
      - date: !eval time.strftime('%Y-%m-%d %H:%M:%S')
        hours: 5.0
        name: Training on yml
        user_id: base.user_root
-
   Check for effective hours and remaining hours, remaining_hours must be 5, effective_hours must be 45
-
   !assert {model: project.task, id: project_task_technicaltraining0, severity: error, string: After work task of 5 hours effective_hours must be equal to 45 and remaining_hours is 5}:
       - planned_hours == 30
       - remaining_hours == 5.0
       - effective_hours == 45.0
-
  Check for remaining hours
-
  !python {model: project.task}: |
    self.onchange_remaining(cr, uid, [ref("project_task_functionaltraining0")], remaining = 10.0, planned = False)
-
  Close the task
-
  !python {model: project.task}: |
    self.do_close(cr, uid, [ref("project_task_technicaltraining0")], {'mail_send': False})
-
  Check if task in done state
-
  !assert {model: project.task, id: project_task_technicaltraining0, severity: error}:
       - state == "done"
-
   Check for effective hours and remaining hours
-
   !assert {model: project.task, id: project_task_technicaltraining0, severity: error, string: After closing the task planned_hours must remain 30 effective_hours must be 45 and remaining hours must be 0}:
       - planned_hours == 30
       - remaining_hours == 0.0
       - effective_hours == 45.0
-
  Execute the search method
-
  !python {model: project.project}: |
    context.update({"lang": "en_US", "active_ids": [ref("project.menu_open_view_project_all")],
      "tz": False, "active_model": "ir.ui.menu", "project_id": False, "active_id":
      ref("project.menu_open_view_project_all")})
    user = ref('base.user_demo')
    try:
      self.search(cr, user, args={}, offset=0, limit=None, order=None, context=None, count=False)
    except:
      pass
-
  Copy project 'OpenERP Training Programme'
-
  !python {model: project.project}: |
    self.copy(cr, uid, ref("project_project_testprogramme0"), default={}, context=None)
-
  Close project 'OpenERP Training Programme'
-
  !python {model: project.project}: |
    context.update({"lang": "en_US", "active_ids": [ref("project.menu_open_view_project_all")],
      "tz": False, "active_model": "ir.ui.menu", "project_id": False, "active_id":
      ref("project.menu_open_view_project_all")})
    user = ref('base.user_demo')
    args={}
    offset=0
    limit=None
    order=None
    count=False
    try:
      self.search(cr, user, args, offset, limit, order, context, count)
    except:
      pass
    self.set_done(cr, uid, [ref("project_project_openerptrainingprogramme0")], context=context)

-
  Check if project in close state
-
  !assert {model: project.project, id: project_project_openerptrainingprogramme0, severity: error, string: "Project must be in closed state"}:
       - state == "close"
-
  Unlink the task's work.
-
  !python {model: project.task.work}: |
    self.unlink(cr, uid, [ref('project_task_work0')])
-
  After remove project task's work unlink it's details from the analytic account.
-
  !python {model: account.analytic.account}: |
    vals = {
            'name' : 'account_analytic_account',
            'partner_id': ref('base.res_partner_asus')
           }
    self.create(cr, uid, vals, context=None)
    self.unlink(cr, uid, [ref('account_analytic_account0')])
-
  Now, Close the project task
-
  !record {model: project.task.close, id: project_task_close_0}:
    manager_warn : True
    partner_warn : False
    manager_email : 'info@mycustomer.com'
    partner_email : 'info@myinfobid.com'
    description : Description
-
  Send Warn Message by Email to Manager and Customer.
-
  !python {model: project.task.close}: |
    fields = {
        'manager_warn' : True,
        'partner_warn' : False,
        'manager_email' : 'info@mycustomer.com',
        'partner_email' : 'info@myinfobid.com',
        'description' : 'Description'
        }
    self.default_get(cr, uid, fields, context={"active_ids":[ref("project_task_technicaltraining0")],"active_id": ref("project_task_technicaltraining0")})
    try:
      self.send(cr, uid, [ref('project_task_close_0')], context={"active_ids":[ref("project_task_technicaltraining0")],"active_id": ref("project_task_technicaltraining0")})
    except :
      pass
-
  Check for remaining hours
-
  !python {model: project.task}: |
    self.onchange_remaining(cr, uid, [ref("project_task_functionaltraining0")], remaining = 0.0, planned = 0.0)
-
  Change the planned.
-
  !python {model: project.task}: |
    self.onchange_planned(cr, uid, [ref("project_task_functionaltraining0")], planned = 0.0, effective = 0.0)
-
  Cancel this project.
-
  !python {model: project.task}: |
    self.do_cancel(cr, uid,[ref("project_task_functionaltraining0")],context={})
    self.action_close(cr, uid, [ref("project_task_functionaltraining0")], context=None)
-
  Unlink this project's task.
-
  !python {model: project.task}: |
    self.unlink(cr, uid,[ref("project_task_functionaltraining0")])
-
  Unlink the project.
-
  !python {model: project.project}: |
    self.unlink(cr, uid, [ref('project_project_testprogramme0')])

