-
  In order to test effect of relation between production orders and operations I create a production order.
-
  First I will see how changing production order will effect work orders,
-
  !record {model: mrp.production, id: mrp_production_op}:
    company_id: base.main_company
    date_planned: !eval datetime.today().strftime("%Y-%m-%d %H:%M:%S")
    location_dest_id: stock.stock_location_stock
    location_src_id: stock.stock_location_stock
    product_id: product.product_product_cpu3
    product_qty: 5.0
    product_uos_qty: 5.0
    allow_reorder: True
-
  I am computing the data.
-
  !python {model: mrp.production}: |
    self.action_compute(cr, uid, [ref("mrp_production_op")], {"lang": "en_US", "tz":
      False, "search_default_current": 1, "active_model": "ir.ui.menu", "active_ids":
      [ref("mrp.menu_mrp_production_action")], "active_id": ref("mrp.menu_mrp_production_action"),
      })
-
  I calculate planned end date of the production order.
-
  !python {model: mrp.production}: |
    mo = self.browse(cr, uid, ref("mrp_production_op"))
    self._production_date_end(cr, uid, [ref("mrp_production_op")], mo.date_planned, False)
-
  Now I confirm the production order.
-
  !workflow {model: mrp.production, action: button_confirm, ref: mrp_production_op}
-
  I check that there are two work orders generated for this production order.
-
  !assert {model: mrp.production, id: mrp_production_op, string: Operation is started.}:
    - len(workcenter_lines) == 2
-
  The production order is Waiting Goods, so I force reservation of components.
-
 !python {model: mrp.production}:
  self.force_production(cr, uid, [ref("mrp_production_op")])
-
  Now I start my production order.
-
  !workflow {model: mrp.production, action: button_produce, ref: mrp_production_op}
-
  I check that the related work order is in progress state.
-
  !assert {model: mrp.production, id: mrp_production_op, string: Operation is started.}:
    - workcenter_lines[0].state == 'startworking'
- 
  I am creating a mrp.product.produce record.
-
  !record {model: mrp.product.produce, id: mrp_product_produce_0}:
    mode: consume_produce
    product_qty: 5.0
-
  I produce the products by clicking on 'Produce'
-
  !python {model: mrp.product.produce}: |
    self.do_produce(cr, uid, [ref("mrp_product_produce_0")], {"lang": "en_US", "tz":
      False, "search_default_current": 1, "active_model": "mrp.production", "active_ids":
      [ref("mrp_production_op")], "active_id": ref("mrp_production_op"), })
-
  I check all the related work orders for this production order is now done.
-
  !python {model: mrp.production.workcenter.line}: |
    from tools.translate import _
    order_id = self.search(cr, uid, [('production_id','=', ref('mrp_production_op')),('state','=','done')])
    assert order_id, _('The work orders related to this production order are not done yet!')
