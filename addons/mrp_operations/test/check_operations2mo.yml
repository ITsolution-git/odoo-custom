-
  I check that there are two work orders generated for the production order of 2 CPU3.
-
  !assert {model: mrp.production, id: mrp_production_op1, string: Operation is started.}:
    - len(workcenter_lines) == 2
-
  I change the scheduled date of first work order and then I start it.
-
  !python {model: mrp.production.workcenter.line}: |
    order_ids = self.search(cr, uid, [('production_id','=', ref('mrp_production_op1'))])
    from datetime import datetime
    self.write(cr, uid, [order_ids[0]], {'date_planned': datetime.today().strftime("%Y-%m-%d 10:00:00")})
    import netsvc
    wf_service = netsvc.LocalService("workflow")
    wf_service.trg_validate(uid, 'mrp.production.workcenter.line', order_ids[0], 'button_start_working', cr)
-
  I check now the production order is in production state.
-
  !assert {model: mrp.production, id: mrp_production_op1, string: Production order is started.}:
    - state == 'in_production'
- 
  The first work order is done, so I mark it as done.
-
  !python {model: mrp.production.workcenter.line}: |
    order_ids = self.search(cr, uid, [('production_id','=', ref('mrp_production_op1'))])
    import netsvc
    wf_service = netsvc.LocalService("workflow")
    wf_service.trg_validate(uid, 'mrp.production.workcenter.line', order_ids[0], 'button_done', cr)
-
  Now I start second work order then pause it and then resume it.
-
  !python {model: mrp.production.workcenter.line}: |
    order_ids = self.search(cr, uid, [('production_id','=', ref('mrp_production_op1'))])
    import netsvc
    wf_service = netsvc.LocalService("workflow")
    wf_service.trg_validate(uid, 'mrp.production.workcenter.line', order_ids[-1], 'button_start_working', cr)
    wf_service.trg_validate(uid, 'mrp.production.workcenter.line', order_ids[-1], 'button_pause', cr)
    wf_service.trg_validate(uid, 'mrp.production.workcenter.line', order_ids[-1], 'button_resume', cr)
- 
  I mark second work order as done.
-
  !python {model: mrp.production.workcenter.line}: |
    order_ids = self.search(cr, uid, [('production_id','=', ref('mrp_production_op1'))])
    import netsvc
    wf_service = netsvc.LocalService("workflow")
    wf_service.trg_validate(uid, 'mrp.production.workcenter.line', order_ids[-1], 'button_done', cr)
-
  I check that the production order is now done.
-
  !assert {model: mrp.production, id: mrp_production_op1}: 
    - state == 'done'
