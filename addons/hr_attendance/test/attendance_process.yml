-
  In order to test attendance process in OpenERP, I entry of SignIn of employee.
-
  !python {model: hr.sign.in.out}: |
    context.update({'emp_id': [ref('hr.employee_al')]}) #TOFIX: emp_ids instead of 'emp_id'
-
  !record {model: hr.sign.in.out, id: employee_sign_in}:
    {}
-
  Employee Signs In.
-
  !python {model: hr.sign.in.out}: |
    self.si_check(cr, uid, [ref("employee_sign_in")], context=context)
-
  I check that Employee is "Present".
-
  !assert {model: hr.employee, id: hr.employee_al, severity: error, string: Employee should be in present state}:
    - state == 'present'
-
  After few seconds, employee sign's out.
-
  !python {model: hr.sign.in.out}: |
    import time
    time.sleep(2)
    self.so_check(cr, uid, [ref("employee_sign_in")], context=context)
-
  I check that Employee is "Absent".
-
  !assert {model: hr.employee, id: hr.employee_al, severity: error, string: Employee should be in absent state}:
    - state == 'absent'
-
  In order to check that first attendance must be Sign In.
-
   !python {model: hr.attendance}: |
     try:
       self.create(cr, uid, {employee_id: hr.employee_fp, name: time.strftime('%Y-%m-%d 09:59:25'), action: 'sign_out'}, None)
     except Exception, e:
       assert e, 'The first attendance must be Sign In'
-
  First of all, Employee Sign's In.
-
  !record {model: hr.attendance, id: hr_attendance_1}:
    employee_id: hr.employee_fp
    name: !eval time.strftime('%Y-%m-%d 09:59:25')
    action: 'sign_in'
-
  Now Employee is going to Sign In prior to First Sign In.
-
   !python {model: hr.attendance}: |
     try:
       self.create(cr, uid, {employee_id: hr.employee_fp, name: time.strftime('%Y-%m-%d 08:59:25'), action: 'sign_in'}, None)
     except Exception, e:
       assert e, 'Sign In (resp. Sign Out) must follow Sign Out (resp. Sign In)'
-
  After that Employee is going to Sign In after First Sign In.
-
   !python {model: hr.attendance}: |
     try:
       self.create(cr, uid, {employee_id: hr.employee_fp, name: time.strftime('%Y-%m-%d 10:59:25'), action: 'sign_in'}, None)
     except Exception, e:
       assert e, 'Sign In (resp. Sign Out) must follow Sign Out (resp. Sign In)'
-
  After two hours, Employee Sign's Out.
-
  !record {model: hr.attendance, id: hr_attendance_4}:
    employee_id: hr.employee_fp
    name: !eval time.strftime('%Y-%m-%d 11:59:25')
    action: 'sign_out'
-
  Now Employee is going to Sign Out prior to First Sign Out.
-
   !python {model: hr.attendance}: |
     try:
       self.create(cr, uid, {employee_id: hr.employee_fp, name: time.strftime('%Y-%m-%d 10:59:25'), action: 'sign_out'}, None)
     except Exception, e:
       assert e, 'Sign In (resp. Sign Out) must follow Sign Out (resp. Sign In)'
-
  After that Employee is going to Sign Out After First Sign Out.
-
   !python {model: hr.attendance}: |
     try:
       self.create(cr, uid, {employee_id: hr.employee_fp, name: time.strftime('%Y-%m-%d 12:59:25'), action: 'sign_out'}, None)
     except Exception, e:
       assert e, 'Sign In (resp. Sign Out) must follow Sign Out (resp. Sign In)'
