_oe()
{
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"

    cmd="${COMP_WORDS[0]}"
    subcmd=""
    if [[ ${COMP_CWORD} > 0 ]] ; then
        subcmd="${COMP_WORDS[1]}"
    fi

    # oe

    opts="initialize model read run-tests scaffold update \
        call open show consume-nothing consume-memory leak-memory \
        consume-cpu bench-read bench-fields-view-get bench-dummy bench-login \
        bench-sale-mrp --help"

    if [[ ${prev} == oe && ${cur} != -* ]] ; then
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi

    # oe call

    opts="--database --user --password --host --port --help"

    if [[ ${subcmd} == call ]] ; then
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi

    # oe initialize

    opts="--database --addons --all-modules --exclude --no-create --help"

    if [[ ${subcmd} == initialize ]] ; then
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi

    # oe model

    opts="--database --model --field --verbose --help"

    if [[ ${subcmd} == model ]] ; then
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi

    # oe read

    opts="--database --model --id --field --verbose --short --help"

    if [[ ${subcmd} == read ]] ; then
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi

    # oe run-tests

    opts="--database --addons --module --dry-run --help"

    if [[ ${subcmd} == run-tests ]] ; then
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi

    # oe scaffold

    opts="--help"

    if [[ ${subcmd} == scaffold ]] ; then
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi

    # fallback for unimplemented completion

    opts="--help"

    if [[ true ]] ; then
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi
}
complete -F _oe oe
